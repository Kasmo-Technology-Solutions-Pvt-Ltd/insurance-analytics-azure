{
	"name": "dimAgency",
	"properties": {
		"folder": {
			"name": "Insurance Analytics Azure/pcDimDataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_PC_ORGANIZATION",
						"type": "DatasetReference"
					},
					"name": "pcOrganization"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_CONTACT",
						"type": "DatasetReference"
					},
					"name": "PcContact"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_ADDRESS",
						"type": "DatasetReference"
					},
					"name": "PcAddress"
				},
				{
					"dataset": {
						"referenceName": "DS_PCTL_PRIMARYPHONETYPE",
						"type": "DatasetReference"
					},
					"name": "PctlPrimaryphonetype"
				},
				{
					"dataset": {
						"referenceName": "DS_PCTL_PRODUCERSTATUS",
						"type": "DatasetReference"
					},
					"name": "PctlProducerstatus"
				},
				{
					"dataset": {
						"referenceName": "DS_PCTL_STATE",
						"type": "DatasetReference"
					},
					"name": "PctlState"
				},
				{
					"dataset": {
						"referenceName": "DS_PCTL_ORGANIZATIONTYPE",
						"type": "DatasetReference"
					},
					"name": "PctlOrganizationtype"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_AGENCY",
						"type": "DatasetReference"
					},
					"name": "tgtDimAgency"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_DIM_AGENCY",
						"type": "DatasetReference"
					},
					"name": "insertedRows"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_AGENCY",
						"type": "DatasetReference"
					},
					"name": "updatedrows"
				}
			],
			"transformations": [
				{
					"name": "joinOrganizationAndContact"
				},
				{
					"name": "joinOrganizationAndContactAndAddress"
				},
				{
					"name": "joinOrganizationAndContactAndAddressAndPctlPrimaryphonetype"
				},
				{
					"name": "joinOrganizationAndContactAndAddressAndPctlPrimaryphonetypeAndPctlProducerstatus"
				},
				{
					"name": "joinOrganizationAndContactAndAddressAndPctlPrimaryphonetypeAndPctlProducerstatusAndPctlState"
				},
				{
					"name": "joinOrganizationAndContactAndAddressAndPctlPrimaryphonetypeAndPctlProducerstatusAndPctlStateAndPctlOrganizationtype"
				},
				{
					"name": "srcColumnTransformations"
				},
				{
					"name": "srcHashKey"
				},
				{
					"name": "tgtHashKey"
				},
				{
					"name": "lookupKeyColumn"
				},
				{
					"name": "split1"
				},
				{
					"name": "updatecondition"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CreateUserID as long,",
				"          Tier as integer,",
				"          PublicID as string,",
				"          ProducerStatus as integer,",
				"          BeanVersion as integer,",
				"          NameDenorm as string,",
				"          Retired as long,",
				"          CreateTime as timestamp,",
				"          Name as string,",
				"          NameKanji as string,",
				"          MasterAdmin as boolean,",
				"          UpdateUserID as long,",
				"          UpdateTime as timestamp,",
				"          Carrier as boolean,",
				"          Type as integer,",
				"          ID as long,",
				"          ContactID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcOrganization",
				"source(output(",
				"          LoadCommandID as long,",
				"          Preferred as boolean,",
				"          VendorType as integer,",
				"          FaxPhoneCountry as integer,",
				"          Particle as string,",
				"          TaxID as string,",
				"          NameDenorm as string,",
				"          Name as string,",
				"          VendorNumber as string,",
				"          State as integer,",
				"          Prefix as integer,",
				"          Score as integer,",
				"          PreferredCurrency as integer,",
				"          LastNameKanji as string,",
				"          TaxFilingStatus as integer,",
				"          AccountHolderCount as integer,",
				"          Country as integer,",
				"          UpdateTime as timestamp,",
				"          AdjudicatorLicense as string,",
				"          ID as long,",
				"          WithholdingRate as decimal(4,1),",
				"          LastNameDenorm as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          CreateUserID as long,",
				"          ExternalID as string,",
				"          BeanVersion as integer,",
				"          VenueType as integer,",
				"          Retired as long,",
				"          ValidationLevel as integer,",
				"          PrimaryPhone as integer,",
				"          LastUpdateTime as timestamp,",
				"          ExternalVersion as integer,",
				"          UpdateUserID as long,",
				"          HomePhoneExtension as string,",
				"          FirstNameDenorm as string,",
				"          FirstName as string,",
				"          FirstNameKanji as string,",
				"          TemporaryLastUpdateTime as timestamp,",
				"          Gender as integer,",
				"          Notes as string,",
				"          NumDependentsU18 as integer,",
				"          PublicID as string,",
				"          HomePhoneCountry as integer,",
				"          CityKanjiDenorm as string,",
				"          CreateTime as timestamp,",
				"          LicenseNumber as string,",
				"          CellPhoneCountry as integer,",
				"          AutoSync as integer,",
				"          Occupation as string,",
				"          CellPhone as string,",
				"          PrimaryAddressID as long,",
				"          Suffix as integer,",
				"          AddressBookUID as string,",
				"          LoadRelatedContacts as boolean,",
				"          EmailAddress1 as string,",
				"          NumDependents as integer,",
				"          DateOfBirth as timestamp,",
				"          PrimaryLanguage as integer,",
				"          EmailAddress2 as string,",
				"          PrimaryLocale as integer,",
				"          TaxStatus as integer,",
				"          NumDependentsU25 as integer,",
				"          WorkPhoneExtension as string,",
				"          MaritalStatus as integer,",
				"          CityDenorm as string,",
				"          NameKanji as string,",
				"          FaxPhoneExtension as string,",
				"          HomePhone as string,",
				"          LicenseState as integer,",
				"          FaxPhone as string,",
				"          CellPhoneExtension as string,",
				"          PostalCodeDenorm as string,",
				"          EmployeeNumber as string,",
				"          WorkPhoneCountry as integer,",
				"          Subtype as integer,",
				"          PreferredSettlementCurrency as integer,",
				"          FormerName as string,",
				"          WorkPhone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcContact",
				"source(output(",
				"          LocationName as string,",
				"          LoadCommandID as long,",
				"          PublicID as string,",
				"          BatchGeocode as boolean,",
				"          Active as boolean,",
				"          CreateTime as timestamp,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          County as string,",
				"          AddressLine3 as string,",
				"          CityKanji as string,",
				"          AddressLine2Kanji as string,",
				"          PhoneExtension as string,",
				"          State as integer,",
				"          AddressBookUID as string,",
				"          UpdateTime as timestamp,",
				"          Country as integer,",
				"          ID as long,",
				"          EmployeeCount as integer,",
				"          LocationCode as string,",
				"          CreateUserID as long,",
				"          ValidUntil as timestamp,",
				"          PhoneCountry as integer,",
				"          BeanVersion as integer,",
				"          CityDenorm as string,",
				"          Retired as long,",
				"          City as string,",
				"          LastUpdateTime as timestamp,",
				"          Account as long,",
				"          Phone as string,",
				"          AddressType as integer,",
				"          AddressLine1Kanji as string,",
				"          UpdateUserID as long,",
				"          CEDEXBureau as string,",
				"          GeocodeStatus as integer,",
				"          LocationNum as integer,",
				"          CEDEX as boolean,",
				"          PostalCodeDenorm as string,",
				"          PostalCode as string,",
				"          Referenced as boolean,",
				"          Subtype as integer,",
				"          LinkedAddress as long,",
				"          Description as string,",
				"          TemporaryLastUpdateTime as timestamp,",
				"          NonSpecific as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcAddress",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PctlPrimaryphonetype",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PctlProducerstatus",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PctlState",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PctlOrganizationtype",
				"source(output(",
				"          AGENCY_ID as integer,",
				"          AGENCY_KEY as string,",
				"          SOURCE as string,",
				"          AGENCY_CODE as string,",
				"          AGENCY_NAME as string,",
				"          AGENCY_ADDRESS_1 as string,",
				"          AGENCY_ADDRESS_2 as string,",
				"          AGENCY_ADDRESS_3 as string,",
				"          AGENCY_CITY as string,",
				"          AGENCY_STATE_CODE as string,",
				"          AGENCY_STATE_CODE_DESCRIPTION as string,",
				"          AGENCY_ZIP_CODE as string,",
				"          AGENCY_PHONE_NUMBER as string,",
				"          AGENCY_APPT_DATE as date,",
				"          AGENCY_TERM_DATE as date,",
				"          AGENCY_STATUS_CODE as string,",
				"          MANAGER_NAME as string,",
				"          REP_CODE as string,",
				"          REGION_CODE as string,",
				"          AGENCY_LIC_NUMBER as string,",
				"          AGENCY_TAX_ID as string,",
				"          ETL_ROW_EFF_DATETIMESTAMP as timestamp,",
				"          ETL_ROW_EXP_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ORGANIZATION_TYPE as integer,",
				"          ORGANIZATION_TYPE_DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tgtDimAgency",
				"pcOrganization, PcContact join(ContactID == PcContact@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinOrganizationAndContact",
				"joinOrganizationAndContact, PcAddress join(PrimaryAddressID == PcAddress@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinOrganizationAndContactAndAddress",
				"joinOrganizationAndContactAndAddress, PctlPrimaryphonetype join(PrimaryPhone == PctlPrimaryphonetype@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinOrganizationAndContactAndAddressAndPctlPrimaryphonetype",
				"joinOrganizationAndContactAndAddressAndPctlPrimaryphonetype, PctlProducerstatus join(ProducerStatus == PctlProducerstatus@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinOrganizationAndContactAndAddressAndPctlPrimaryphonetypeAndPctlProducerstatus",
				"joinOrganizationAndContactAndAddressAndPctlPrimaryphonetypeAndPctlProducerstatus, PctlState join(PcAddress@State == PctlState@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinOrganizationAndContactAndAddressAndPctlPrimaryphonetypeAndPctlProducerstatusAndPctlState",
				"joinOrganizationAndContactAndAddressAndPctlPrimaryphonetypeAndPctlProducerstatusAndPctlState, PctlOrganizationtype join(Type == PctlOrganizationtype@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinOrganizationAndContactAndAddressAndPctlPrimaryphonetypeAndPctlProducerstatusAndPctlStateAndPctlOrganizationtype",
				"joinOrganizationAndContactAndAddressAndPctlPrimaryphonetypeAndPctlProducerstatusAndPctlStateAndPctlOrganizationtype derive(SRC_SOURCE = 'PC',",
				"          SRC_AGENCY_PHONE_NUMBER = case(PctlPrimaryphonetype@TYPECODE == 'home','HOMEPHONE',PctlPrimaryphonetype@TYPECODE=='work','WORKPHONE'),",
				"          SRC_ETL_ACTIVE_FLAG = 'Y',",
				"          SRC_ETL_ADD_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_ETL_LAST_UPDATE_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_ETL_ROW_EXP_DATETIMESTAMP = toDate('31-12-9999','DD-MM-YYYY'),",
				"          SRC_AGENCY_CODE = pcOrganization@PublicID,",
				"          SRC_AGENCY_KEY = pcOrganization@PublicID,",
				"          SRC_AGENCY_NAME = pcOrganization@Name,",
				"          SRC_AGENCY_ADDRESS_1 = AddressLine1,",
				"          SRC_AGENCY_ADDRESS_2 = AddressLine2,",
				"          SRC_AGENCY_ADDRESS_3 = AddressLine3,",
				"          SRC_AGENCY_CITY = City,",
				"          SRC_AGENCY_STATE_CODE = PctlState@TYPECODE,",
				"          SRC_AGENCY_STATE_CODE_DESCRIPTION = PctlState@DESCRIPTION,",
				"          SRC_AGENCY_ZIP_CODE = PostalCode,",
				"          SRC_AGENCY_STATUS_CODE = PctlProducerstatus@TYPECODE,",
				"          SRC_AGENCY_LIC_NUMBER = LicenseNumber,",
				"          SRC_AGENCY_TAX_ID = TaxID,",
				"          SRC_ETL_ROW_EFF_DATETIMESTAMP = PcContact@UpdateTime,",
				"          SRC_ORGANIZATION_TYPE = Type,",
				"          SRC_ORGANIZATION_TYPE_DESCRIPTION = PctlOrganizationtype@NAME) ~> srcColumnTransformations",
				"srcColumnTransformations derive(srcHashKey = sha1(SRC_SOURCE,SRC_AGENCY_KEY,SRC_AGENCY_CODE,SRC_AGENCY_NAME,SRC_AGENCY_ADDRESS_1,SRC_AGENCY_ADDRESS_2,SRC_AGENCY_ADDRESS_3,SRC_AGENCY_CITY,SRC_AGENCY_STATE_CODE,SRC_AGENCY_STATE_CODE_DESCRIPTION,SRC_AGENCY_ZIP_CODE,SRC_AGENCY_STATUS_CODE,SRC_AGENCY_LIC_NUMBER,SRC_AGENCY_TAX_ID,SRC_AGENCY_PHONE_NUMBER,SRC_ORGANIZATION_TYPE,SRC_ORGANIZATION_TYPE_DESCRIPTION)) ~> srcHashKey",
				"tgtDimAgency derive(tgtHashKey = sha1(SOURCE,AGENCY_KEY,AGENCY_CODE,AGENCY_NAME,AGENCY_ADDRESS_1,AGENCY_ADDRESS_2,AGENCY_ADDRESS_3,AGENCY_CITY,AGENCY_STATE_CODE,AGENCY_STATE_CODE_DESCRIPTION,AGENCY_ZIP_CODE,AGENCY_STATUS_CODE,AGENCY_LIC_NUMBER,AGENCY_TAX_ID,AGENCY_PHONE_NUMBER,ORGANIZATION_TYPE,ORGANIZATION_TYPE_DESCRIPTION)) ~> tgtHashKey",
				"srcHashKey, tgtHashKey lookup(SRC_AGENCY_KEY == AGENCY_KEY,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'both')~> lookupKeyColumn",
				"lookupKeyColumn split(isNull(AGENCY_KEY),",
				"     !isNull(AGENCY_KEY)&&notEquals(srcHashKey,tgtHashKey),",
				"     disjoint: false) ~> split1@(Insert, Update, NoUpdate)",
				"split1@Update alterRow(updateIf(true())) ~> updatecondition",
				"split1@Insert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          AGENCY_ID as integer,",
				"          AGENCY_KEY as string,",
				"          SOURCE as string,",
				"          AGENCY_CODE as string,",
				"          AGENCY_NAME as string,",
				"          AGENCY_ADDRESS_1 as string,",
				"          AGENCY_ADDRESS_2 as string,",
				"          AGENCY_ADDRESS_3 as string,",
				"          AGENCY_CITY as string,",
				"          AGENCY_STATE_CODE as string,",
				"          AGENCY_STATE_CODE_DESCRIPTION as string,",
				"          AGENCY_ZIP_CODE as string,",
				"          AGENCY_PHONE_NUMBER as string,",
				"          AGENCY_APPT_DATE as date,",
				"          AGENCY_TERM_DATE as date,",
				"          AGENCY_STATUS_CODE as string,",
				"          MANAGER_NAME as string,",
				"          REP_CODE as string,",
				"          REGION_CODE as string,",
				"          AGENCY_LIC_NUMBER as string,",
				"          AGENCY_TAX_ID as string,",
				"          ETL_ROW_EFF_DATETIMESTAMP as timestamp,",
				"          ETL_ROW_EXP_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ORGANIZATION_TYPE as integer,",
				"          ORGANIZATION_TYPE_DESCRIPTION as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          AGENCY_KEY = SRC_AGENCY_KEY,",
				"          SOURCE = SRC_SOURCE,",
				"          AGENCY_CODE = SRC_AGENCY_CODE,",
				"          AGENCY_NAME = SRC_AGENCY_NAME,",
				"          AGENCY_ADDRESS_1 = SRC_AGENCY_ADDRESS_1,",
				"          AGENCY_ADDRESS_2 = SRC_AGENCY_ADDRESS_2,",
				"          AGENCY_ADDRESS_3 = SRC_AGENCY_ADDRESS_3,",
				"          AGENCY_CITY = SRC_AGENCY_CITY,",
				"          AGENCY_STATE_CODE = SRC_AGENCY_STATE_CODE,",
				"          AGENCY_STATE_CODE_DESCRIPTION = SRC_AGENCY_STATE_CODE_DESCRIPTION,",
				"          AGENCY_ZIP_CODE = SRC_AGENCY_ZIP_CODE,",
				"          AGENCY_PHONE_NUMBER = SRC_AGENCY_PHONE_NUMBER,",
				"          AGENCY_STATUS_CODE = SRC_AGENCY_STATUS_CODE,",
				"          AGENCY_LIC_NUMBER = SRC_AGENCY_LIC_NUMBER,",
				"          AGENCY_TAX_ID = SRC_AGENCY_TAX_ID,",
				"          ETL_ROW_EFF_DATETIMESTAMP = SRC_ETL_ROW_EFF_DATETIMESTAMP,",
				"          ETL_ROW_EXP_DATETIMESTAMP = SRC_ETL_ROW_EXP_DATETIMESTAMP,",
				"          ETL_ACTIVE_FLAG = SRC_ETL_ACTIVE_FLAG,",
				"          ETL_ADD_DATETIMESTAMP = SRC_ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = SRC_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ORGANIZATION_TYPE = SRC_ORGANIZATION_TYPE,",
				"          ORGANIZATION_TYPE_DESCRIPTION = SRC_ORGANIZATION_TYPE_DESCRIPTION",
				"     )) ~> insertedRows",
				"updatecondition sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          AGENCY_ID as integer,",
				"          AGENCY_KEY as string,",
				"          SOURCE as string,",
				"          AGENCY_CODE as string,",
				"          AGENCY_NAME as string,",
				"          AGENCY_ADDRESS_1 as string,",
				"          AGENCY_ADDRESS_2 as string,",
				"          AGENCY_ADDRESS_3 as string,",
				"          AGENCY_CITY as string,",
				"          AGENCY_STATE_CODE as string,",
				"          AGENCY_STATE_CODE_DESCRIPTION as string,",
				"          AGENCY_ZIP_CODE as string,",
				"          AGENCY_PHONE_NUMBER as string,",
				"          AGENCY_APPT_DATE as date,",
				"          AGENCY_TERM_DATE as date,",
				"          AGENCY_STATUS_CODE as string,",
				"          MANAGER_NAME as string,",
				"          REP_CODE as string,",
				"          REGION_CODE as string,",
				"          AGENCY_LIC_NUMBER as string,",
				"          AGENCY_TAX_ID as string,",
				"          ETL_ROW_EFF_DATETIMESTAMP as timestamp,",
				"          ETL_ROW_EXP_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ORGANIZATION_TYPE as integer,",
				"          ORGANIZATION_TYPE_DESCRIPTION as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['AGENCY_KEY'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          AGENCY_KEY = SRC_AGENCY_KEY,",
				"          SOURCE = SRC_SOURCE,",
				"          AGENCY_CODE = SRC_AGENCY_CODE,",
				"          AGENCY_NAME = SRC_AGENCY_NAME,",
				"          AGENCY_ADDRESS_1 = SRC_AGENCY_ADDRESS_1,",
				"          AGENCY_ADDRESS_2 = SRC_AGENCY_ADDRESS_2,",
				"          AGENCY_ADDRESS_3 = SRC_AGENCY_ADDRESS_3,",
				"          AGENCY_CITY = SRC_AGENCY_CITY,",
				"          AGENCY_STATE_CODE = SRC_AGENCY_STATE_CODE,",
				"          AGENCY_STATE_CODE_DESCRIPTION = SRC_AGENCY_STATE_CODE_DESCRIPTION,",
				"          AGENCY_ZIP_CODE = SRC_AGENCY_ZIP_CODE,",
				"          AGENCY_PHONE_NUMBER = SRC_AGENCY_PHONE_NUMBER,",
				"          AGENCY_STATUS_CODE = SRC_AGENCY_STATUS_CODE,",
				"          AGENCY_LIC_NUMBER = SRC_AGENCY_LIC_NUMBER,",
				"          AGENCY_TAX_ID = SRC_AGENCY_TAX_ID,",
				"          ETL_ROW_EFF_DATETIMESTAMP = SRC_ETL_ROW_EFF_DATETIMESTAMP,",
				"          ETL_ROW_EXP_DATETIMESTAMP = SRC_ETL_ROW_EXP_DATETIMESTAMP,",
				"          ETL_ACTIVE_FLAG = SRC_ETL_ACTIVE_FLAG,",
				"          ETL_ADD_DATETIMESTAMP = SRC_ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = SRC_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ORGANIZATION_TYPE = SRC_ORGANIZATION_TYPE,",
				"          ORGANIZATION_TYPE_DESCRIPTION = SRC_ORGANIZATION_TYPE_DESCRIPTION",
				"     )) ~> updatedrows"
			]
		}
	}
}