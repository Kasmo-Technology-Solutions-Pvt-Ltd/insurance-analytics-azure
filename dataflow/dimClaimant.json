{
	"name": "dimClaimant",
	"properties": {
		"folder": {
			"name": "Insurance Analytics Azure/ccDimDataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_ETL_CLAIMANT_CDC",
						"type": "DatasetReference"
					},
					"name": "claimantCdc"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_CLAIMCONTACT",
						"type": "DatasetReference"
					},
					"name": "claimContact"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_ADDRESS",
						"type": "DatasetReference"
					},
					"name": "address"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_CONTACT",
						"type": "DatasetReference"
					},
					"name": "contact"
				},
				{
					"dataset": {
						"referenceName": "DS_DW_DIM_CLAIMANT",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_DW_DIM_CLAIMANT",
						"type": "DatasetReference"
					},
					"name": "DIMCLAIMANT"
				},
				{
					"dataset": {
						"referenceName": "DS_DW_DIM_CLAIMANT",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "split1"
				},
				{
					"name": "alterRow2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as decimal(19,0),",
				"          UPDATETIME as timestamp,",
				"          CCLAIM_PUBLICID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> claimantCdc",
				"source(output(",
				"          ContactValidTo as timestamp,",
				"          Service as string,",
				"          Retired as long,",
				"          ContactProhibited as boolean,",
				"          EssentialServiceType as integer,",
				"          PublicID as string,",
				"          ArchivePartition as long,",
				"          ClaimantFlag as boolean,",
				"          CreateUserID as long,",
				"          ID as long,",
				"          BeanVersion as integer,",
				"          UpdateUserID as long,",
				"          ClaimID as long,",
				"          LoadCommandID as long,",
				"          ContactID as long,",
				"          PersonFirstNameDenorm as string,",
				"          UpdateTime as timestamp,",
				"          BenefitEndReasonType as integer,",
				"          ContactValidFrom as timestamp,",
				"          PersonLastNameDenorm as string,",
				"          BenefitEndDate as timestamp,",
				"          DependentType as integer,",
				"          BenefitEndReason as string,",
				"          ContactNameDenorm as string,",
				"          PolicyID as long,",
				"          CreateTime as timestamp,",
				"          ProviderType as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> claimContact",
				"source(output(",
				"          PostalCodeDenorm as string,",
				"          Retired as long,",
				"          AddressLine2Kanji as string,",
				"          PublicID as string,",
				"          BatchGeocode as boolean,",
				"          Admin as boolean,",
				"          ArchivePartition as long,",
				"          CreateUserID as long,",
				"          CEDEX as boolean,",
				"          ID as long,",
				"          CityKanji as string,",
				"          BeanVersion as integer,",
				"          AddressBookUID as string,",
				"          UpdateUserID as long,",
				"          Description as string,",
				"          LoadCommandID as long,",
				"          UpdateTime as timestamp,",
				"          Country as integer,",
				"          City as string,",
				"          Subtype as integer,",
				"          ValidUntil as timestamp,",
				"          County as string,",
				"          PostalCode as string,",
				"          State as integer,",
				"          CityDenorm as string,",
				"          AddressLine1Kanji as string,",
				"          CreateTime as timestamp,",
				"          GeocodeStatus as integer,",
				"          AddressType as integer,",
				"          CEDEXBureau as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          AddressLine3 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> address",
				"source(output(",
				"          ValidationLevel as integer,",
				"          LawFirmSpecialty as integer,",
				"          Retired as long,",
				"          FirstNameKanji as string,",
				"          EmailAddress2 as string,",
				"          SpecialtyType as integer,",
				"          EmailAddress1 as string,",
				"          LastName as string,",
				"          FaxPhoneExtension as string,",
				"          AutoSync as integer,",
				"          Admin as boolean,",
				"          HomePhone as string,",
				"          TaxID as string,",
				"          W9ReceivedDate as timestamp,",
				"          LicenseNumber as string,",
				"          PrimaryPhone as integer,",
				"          AdjudicatorLicense as string,",
				"          AutoRepairLicense as string,",
				"          AutoTowingLicense as string,",
				"          ID as long,",
				"          W9Received as boolean,",
				"          BeanVersion as integer,",
				"          PrimaryLocale as integer,",
				"          Score as integer,",
				"          NameDenorm as string,",
				"          AddressBookUID as string,",
				"          PrimaryLanguage as integer,",
				"          AttorneySpecialty as integer,",
				"          DoctorSpecialty as integer,",
				"          Suffix as integer,",
				"          FormerName as string,",
				"          NumDependents as integer,",
				"          Prefix as integer,",
				"          NameKanji as string,",
				"          HomePhoneCountry as integer,",
				"          TaxFilingStatus as integer,",
				"          Notes as string,",
				"          PolicySystemId as string,",
				"          DateOfBirth as timestamp,",
				"          Subtype as integer,",
				"          CellPhoneCountry as integer,",
				"          AdjudicativeDomain as integer,",
				"          CellPhone as string,",
				"          MedicalOrgSpecialty as integer,",
				"          Gender as integer,",
				"          FaxPhoneCountry as integer,",
				"          FaxPhone as string,",
				"          VendorNumber as string,",
				"          AttorneyLicense as string,",
				"          CellPhoneExtension as string,",
				"          VendorType as integer,",
				"          TaxStatus as integer,",
				"          EmployeeNumber as string,",
				"          WorkPhone as string,",
				"          NumDependentsU25 as integer,",
				"          HomePhoneExtension as string,",
				"          Particle as string,",
				"          PublicID as string,",
				"          ArchivePartition as long,",
				"          W9ValidTo as timestamp,",
				"          PendingLinkMessage as boolean,",
				"          CreateUserID as long,",
				"          Occupation as string,",
				"          LoadRelatedContacts as boolean,",
				"          VenueType as integer,",
				"          FirstName as string,",
				"          LastNameDenorm as string,",
				"          MaritalStatus as integer,",
				"          NumDependentsU18 as integer,",
				"          PrimaryAddressID as long,",
				"          FirstNameDenorm as string,",
				"          WorkPhoneCountry as integer,",
				"          UpdateUserID as long,",
				"          WorkPhoneExtension as string,",
				"          LoadCommandID as long,",
				"          UpdateTime as timestamp,",
				"          LicenseState as integer,",
				"          Name as string,",
				"          PreferredCurrency as integer,",
				"          MedicalLicense as string,",
				"          MiddleName as string,",
				"          LastNameKanji as string,",
				"          WithholdingRate as decimal(4,1),",
				"          OrganizationType as integer,",
				"          CreateTime as timestamp,",
				"          W9ValidFrom as timestamp,",
				"          Preferred as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> contact",
				"source(output(",
				"          CLAIMANT_ID as integer,",
				"          SOURCE as string,",
				"          CLAIM_KEY as string,",
				"          CLAIMANT_KEY as string,",
				"          CLAIMANT_NUMBER as string,",
				"          CLAIMANT_NAME as string,",
				"          CLAIMANT_ADDR_1 as string,",
				"          CLAIMANT_ADDR_2 as string,",
				"          CLAIMANT_ADDR_3 as string,",
				"          CLAIMANT_CITY as string,",
				"          CLAIMANT_COUNTY as string,",
				"          CLAIMANT_STATE_CODE as string,",
				"          CLAIMANT_STATE_CODE_DESC as string,",
				"          CLAIMANT_ZIP_CODE as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"claimantCdc, claimContact join(claimantCdc@ID == claimContact@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, address join(claimantCdc@ID == address@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, contact join(claimantCdc@ID == contact@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 derive(SRC_SOURCE = 'CC',",
				"          SRC_CLAIMANT_KEY = concat('CC',address@PublicID),",
				"          SRC_CLAIMANT_NAME = concat(FirstName,' ',LastName),",
				"          SRC_ETL_ADD_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_ETL_LAST_UPDATE_DATETIMESTAMP = currentTimestamp(),",
				"          { SRC_ETL_ACTIVE_FLAG} = 'Y',",
				"          SRC_CLAIMANT_NUMBER = claimContact@PublicID,",
				"          SRC_CLAIMANT_ADDR_1 = AddressLine1,",
				"          SRC_CLAIMANT_ADDR_2 = AddressLine2,",
				"          SRC_CLAIMANT_ADDR_3 = AddressLine3,",
				"          SRC_CLAIMANT_CITY = City,",
				"          SRC_CLAIMANT_COUNTY = County,",
				"          SRC_CLAIMANT_STATE_CODE = State,",
				"          SRC_CLAIMANT_STATE_CODE_DESC = CityDenorm,",
				"          SRC_CLAIMANT_ZIP_CODE = PostalCode) ~> derivedColumn1",
				"derivedColumn1 derive(SrcHashKey = sha1(SRC_SOURCE,SRC_CLAIMANT_KEY,SRC_CLAIMANT_NUMBER,SRC_CLAIMANT_NAME,SRC_CLAIMANT_ADDR_1,SRC_CLAIMANT_ADDR_2,SRC_CLAIMANT_ADDR_3,SRC_CLAIMANT_CITY,SRC_CLAIMANT_COUNTY,SRC_CLAIMANT_STATE_CODE,SRC_CLAIMANT_STATE_CODE_DESC,SRC_CLAIMANT_ZIP_CODE)) ~> derivedColumn2",
				"source1 derive(TgtHashKey = sha1(SOURCE,CLAIMANT_KEY,CLAIMANT_NUMBER,CLAIMANT_NAME,CLAIMANT_ADDR_1,CLAIMANT_ADDR_2,CLAIMANT_ADDR_3,CLAIMANT_CITY,CLAIMANT_COUNTY,toInteger(CLAIMANT_STATE_CODE),CLAIMANT_STATE_CODE_DESC,CLAIMANT_ZIP_CODE)) ~> derivedColumn3",
				"derivedColumn2, derivedColumn3 lookup(SRC_CLAIMANT_KEY == CLAIMANT_KEY,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 split(isNull(CLAIMANT_KEY),",
				"     !isNull(CLAIMANT_KEY) && notEquals(SrcHashKey, TgtHashKey),",
				"     disjoint: false) ~> split1@(Insert, Update, NoUpdate)",
				"split1@Update alterRow(updateIf(true())) ~> alterRow2",
				"split1@Insert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CLAIMANT_ID as integer,",
				"          SOURCE as string,",
				"          CLAIM_KEY as string,",
				"          CLAIMANT_KEY as string,",
				"          CLAIMANT_NUMBER as string,",
				"          CLAIMANT_NAME as string,",
				"          CLAIMANT_ADDR_1 as string,",
				"          CLAIMANT_ADDR_2 as string,",
				"          CLAIMANT_ADDR_3 as string,",
				"          CLAIMANT_CITY as string,",
				"          CLAIMANT_COUNTY as string,",
				"          CLAIMANT_STATE_CODE as string,",
				"          CLAIMANT_STATE_CODE_DESC as string,",
				"          CLAIMANT_ZIP_CODE as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SOURCE = SRC_SOURCE,",
				"          CLAIMANT_KEY = SRC_CLAIMANT_KEY,",
				"          CLAIMANT_NUMBER = SRC_CLAIMANT_NUMBER,",
				"          CLAIMANT_NAME = SRC_CLAIMANT_NAME,",
				"          CLAIMANT_ADDR_1 = SRC_CLAIMANT_ADDR_1,",
				"          CLAIMANT_ADDR_2 = SRC_CLAIMANT_ADDR_2,",
				"          CLAIMANT_ADDR_3 = SRC_CLAIMANT_ADDR_3,",
				"          CLAIMANT_CITY = SRC_CLAIMANT_CITY,",
				"          CLAIMANT_COUNTY = SRC_CLAIMANT_COUNTY,",
				"          CLAIMANT_STATE_CODE = SRC_CLAIMANT_STATE_CODE,",
				"          CLAIMANT_STATE_CODE_DESC = SRC_CLAIMANT_STATE_CODE_DESC,",
				"          CLAIMANT_ZIP_CODE = SRC_CLAIMANT_ZIP_CODE,",
				"          ETL_ADD_DATETIMESTAMP = SRC_ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = SRC_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ETL_ACTIVE_FLAG = { SRC_ETL_ACTIVE_FLAG}",
				"     )) ~> DIMCLAIMANT",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CLAIMANT_ID as integer,",
				"          SOURCE as string,",
				"          CLAIM_KEY as string,",
				"          CLAIMANT_KEY as string,",
				"          CLAIMANT_NUMBER as string,",
				"          CLAIMANT_NAME as string,",
				"          CLAIMANT_ADDR_1 as string,",
				"          CLAIMANT_ADDR_2 as string,",
				"          CLAIMANT_ADDR_3 as string,",
				"          CLAIMANT_CITY as string,",
				"          CLAIMANT_COUNTY as string,",
				"          CLAIMANT_STATE_CODE as string,",
				"          CLAIMANT_STATE_CODE_DESC as string,",
				"          CLAIMANT_ZIP_CODE as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['CLAIMANT_ZIP_CODE'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SOURCE = SRC_SOURCE,",
				"          CLAIMANT_KEY = SRC_CLAIMANT_KEY,",
				"          CLAIMANT_NUMBER = SRC_CLAIMANT_NUMBER,",
				"          CLAIMANT_NAME = SRC_CLAIMANT_NAME,",
				"          CLAIMANT_ADDR_1 = SRC_CLAIMANT_ADDR_1,",
				"          CLAIMANT_ADDR_2 = SRC_CLAIMANT_ADDR_2,",
				"          CLAIMANT_ADDR_3 = SRC_CLAIMANT_ADDR_3,",
				"          CLAIMANT_CITY = SRC_CLAIMANT_CITY,",
				"          CLAIMANT_COUNTY = SRC_CLAIMANT_COUNTY,",
				"          CLAIMANT_STATE_CODE = SRC_CLAIMANT_STATE_CODE,",
				"          CLAIMANT_STATE_CODE_DESC = SRC_CLAIMANT_STATE_CODE_DESC,",
				"          CLAIMANT_ZIP_CODE = SRC_CLAIMANT_ZIP_CODE",
				"     )) ~> sink1"
			]
		}
	}
}