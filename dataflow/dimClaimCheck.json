{
	"name": "dimClaimCheck",
	"properties": {
		"folder": {
			"name": "Insurance Analytics Azure/ccDimDataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CC_CHECK",
						"type": "DatasetReference"
					},
					"name": "ccCheck"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_CONTACT",
						"type": "DatasetReference"
					},
					"name": "ccContact"
				},
				{
					"dataset": {
						"referenceName": "DS_DW_DIM_CLAIMCHECK",
						"type": "DatasetReference"
					},
					"name": "tgtDimClaimCheck"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_DW_DIM_CLAIMCHECK",
						"type": "DatasetReference"
					},
					"name": "dimClaimCheck"
				},
				{
					"dataset": {
						"referenceName": "DS_DW_DIM_CLAIMCHECK",
						"type": "DatasetReference"
					},
					"name": "updateDimClaimCheck"
				}
			],
			"transformations": [
				{
					"name": "joinCheckAndContact"
				},
				{
					"name": "srcClmnsTransformations"
				},
				{
					"name": "srcHashKey"
				},
				{
					"name": "tgtHashKey"
				},
				{
					"name": "lookupKeyColumn"
				},
				{
					"name": "split1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          IssueDate as timestamp,",
				"          PortionID as long,",
				"          Retired as long,",
				"          CheckNumber as string,",
				"          DeductionType as integer,",
				"          ServicePdStart as timestamp,",
				"          PublicID as string,",
				"          BankName as string,",
				"          DateOfService as timestamp,",
				"          GroupID as long,",
				"          ClaimContactID as long,",
				"          ArchivePartition as long,",
				"          BankAccountType as integer,",
				"          CreateUserID as long,",
				"          PendEscalationForBulk as boolean,",
				"          CheckInstructions as integer,",
				"          ID as long,",
				"          BeanVersion as integer,",
				"          UpdateUserID as long,",
				"          CheckSetID as long,",
				"          Comments as string,",
				"          ReportableAmount as decimal(18,2),",
				"          ServicePdEnd as timestamp,",
				"          ClaimID as long,",
				"          LoadCommandID as long,",
				"          PayToDenorm as string,",
				"          RecurringCheckID as long,",
				"          UpdateTime as timestamp,",
				"          PaymentMethod as integer,",
				"          EnteredTime as timestamp,",
				"          IsPrimary as boolean,",
				"          BulkInvoiceItemInfoID as long,",
				"          PayTo as string,",
				"          InvoiceNumber as string,",
				"          Status as integer,",
				"          BankAccountNumber as string,",
				"          BankRoutingNumber as string,",
				"          Reportability as integer,",
				"          ScheduledSendDate as timestamp,",
				"          CheckType as integer,",
				"          MailToAddress as string,",
				"          CreateTime as timestamp,",
				"          Memo as string,",
				"          CheckBatching as integer,",
				"          AccountName as string,",
				"          BankAccount as integer,",
				"          DeliveryMethod as integer,",
				"          MailTo as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccCheck",
				"source(output(",
				"          ValidationLevel as integer,",
				"          LawFirmSpecialty as integer,",
				"          Retired as long,",
				"          FirstNameKanji as string,",
				"          EmailAddress2 as string,",
				"          SpecialtyType as integer,",
				"          EmailAddress1 as string,",
				"          LastName as string,",
				"          FaxPhoneExtension as string,",
				"          AutoSync as integer,",
				"          Admin as boolean,",
				"          HomePhone as string,",
				"          TaxID as string,",
				"          W9ReceivedDate as timestamp,",
				"          LicenseNumber as string,",
				"          PrimaryPhone as integer,",
				"          AdjudicatorLicense as string,",
				"          AutoRepairLicense as string,",
				"          AutoTowingLicense as string,",
				"          ID as long,",
				"          W9Received as boolean,",
				"          BeanVersion as integer,",
				"          PrimaryLocale as integer,",
				"          Score as integer,",
				"          NameDenorm as string,",
				"          AddressBookUID as string,",
				"          PrimaryLanguage as integer,",
				"          AttorneySpecialty as integer,",
				"          DoctorSpecialty as integer,",
				"          Suffix as integer,",
				"          FormerName as string,",
				"          NumDependents as integer,",
				"          Prefix as integer,",
				"          NameKanji as string,",
				"          HomePhoneCountry as integer,",
				"          TaxFilingStatus as integer,",
				"          Notes as string,",
				"          PolicySystemId as string,",
				"          DateOfBirth as timestamp,",
				"          Subtype as integer,",
				"          CellPhoneCountry as integer,",
				"          AdjudicativeDomain as integer,",
				"          CellPhone as string,",
				"          MedicalOrgSpecialty as integer,",
				"          Gender as integer,",
				"          FaxPhoneCountry as integer,",
				"          FaxPhone as string,",
				"          VendorNumber as string,",
				"          AttorneyLicense as string,",
				"          CellPhoneExtension as string,",
				"          VendorType as integer,",
				"          TaxStatus as integer,",
				"          EmployeeNumber as string,",
				"          WorkPhone as string,",
				"          NumDependentsU25 as integer,",
				"          HomePhoneExtension as string,",
				"          Particle as string,",
				"          PublicID as string,",
				"          ArchivePartition as long,",
				"          W9ValidTo as timestamp,",
				"          PendingLinkMessage as boolean,",
				"          CreateUserID as long,",
				"          Occupation as string,",
				"          LoadRelatedContacts as boolean,",
				"          VenueType as integer,",
				"          FirstName as string,",
				"          LastNameDenorm as string,",
				"          MaritalStatus as integer,",
				"          NumDependentsU18 as integer,",
				"          PrimaryAddressID as long,",
				"          FirstNameDenorm as string,",
				"          WorkPhoneCountry as integer,",
				"          UpdateUserID as long,",
				"          WorkPhoneExtension as string,",
				"          LoadCommandID as long,",
				"          UpdateTime as timestamp,",
				"          LicenseState as integer,",
				"          Name as string,",
				"          PreferredCurrency as integer,",
				"          MedicalLicense as string,",
				"          MiddleName as string,",
				"          LastNameKanji as string,",
				"          WithholdingRate as decimal(4,1),",
				"          OrganizationType as integer,",
				"          CreateTime as timestamp,",
				"          W9ValidFrom as timestamp,",
				"          Preferred as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccContact",
				"source(output(",
				"          CHECK_ID as integer,",
				"          CHECK_BID as integer,",
				"          CHECK_KEY as string,",
				"          ETL_ROW_EFF_DATETIMESTAMP as timestamp,",
				"          ETL_ROW_EXP_DATETIMESTAMP as timestamp,",
				"          SOURCE as string,",
				"          CHECK_ISSUE_TIME as timestamp,",
				"          CHECK_NUMBER as string,",
				"          PAYEE_MAIL_ADDRESS as string,",
				"          PAYEE_1_NAME as string,",
				"          PAYEE_2_NAME as string,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          PAYEE_TAXID as string,",
				"          PAYTONAME as string,",
				"          CHECKTYPE as string,",
				"          CHECK_COST_TYPECODE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tgtDimClaimCheck",
				"ccCheck, ccContact join(ccCheck@ID == ccContact@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinCheckAndContact",
				"joinCheckAndContact derive(ETL_ROW_EFF_DATETIMESTAMP = currentTimestamp(),",
				"          ETL_ROW_EXP_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_SOURCE = 'CC',",
				"          { ETL_ACTIVE_FLAG} = 'Y',",
				"          ETL_ADD_DATETIMESTAMP = currentTimestamp(),",
				"          { ETL_LAST_UPDATE_DATETIMESTAMP} = currentTimestamp(),",
				"          SRC_CHECK_BID = ccCheck@ID,",
				"          SRC_CHECK_KEY = ccCheck@ID,",
				"          SRC_CHECK_ISSUE_TIME = EnteredTime,",
				"          SRC_CHECK_NUMBER = CheckNumber,",
				"          SRC_PAYEE_MAIL_ADDRESS = EmailAddress1,",
				"          SRC_PAYEE_1_NAME = FirstNameKanji,",
				"          SRC_PAYEE_2_NAME = LastName,",
				"          SRC_PAYEE_TAXID = TaxID,",
				"          SRC_PAYTONAME = PayTo,",
				"          SRC_CHECKTYPE = MailToAddress,",
				"          SRC_CHECK_COST_TYPECODE = CheckType,",
				"          D_SRC_CHECK_KEY = toString(ccCheck@ID)) ~> srcClmnsTransformations",
				"srcClmnsTransformations derive(SrcHashKey = md5(toInteger(SRC_CHECK_BID),toString(SRC_CHECK_KEY),toString(SRC_SOURCE),toString(SRC_CHECK_ISSUE_TIME),SRC_CHECK_NUMBER,toString(SRC_PAYEE_MAIL_ADDRESS),SRC_PAYEE_MAIL_ADDRESS,SRC_PAYEE_1_NAME,SRC_PAYEE_2_NAME,SRC_PAYEE_TAXID,SRC_PAYTONAME,SRC_CHECKTYPE,SRC_CHECK_COST_TYPECODE)) ~> srcHashKey",
				"tgtDimClaimCheck derive(TgtHashKey = md5(toInteger(CHECK_BID),toString(CHECK_KEY),toString(SOURCE),toString(CHECK_ISSUE_TIME),toString(PAYEE_MAIL_ADDRESS),PAYEE_1_NAME,PAYEE_2_NAME,PAYEE_TAXID,PAYTONAME,CHECKTYPE,CHECK_COST_TYPECODE)) ~> tgtHashKey",
				"srcHashKey, tgtHashKey lookup(D_SRC_CHECK_KEY == CHECK_KEY,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupKeyColumn",
				"lookupKeyColumn split(isNull(CHECK_KEY),",
				"     !isNull(CHECK_KEY)&&notEquals(SrcHashKey,TgtHashKey),",
				"     disjoint: false) ~> split1@(INSERT, UPDATE, NOUPDATE)",
				"split1@UPDATE alterRow(updateIf(true())) ~> alterRow1",
				"split1@INSERT sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CHECK_ID as integer,",
				"          CHECK_BID as integer,",
				"          CHECK_KEY as string,",
				"          ETL_ROW_EFF_DATETIMESTAMP as timestamp,",
				"          ETL_ROW_EXP_DATETIMESTAMP as timestamp,",
				"          SOURCE as string,",
				"          CHECK_ISSUE_TIME as timestamp,",
				"          CHECK_NUMBER as string,",
				"          PAYEE_MAIL_ADDRESS as string,",
				"          PAYEE_1_NAME as string,",
				"          PAYEE_2_NAME as string,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          PAYEE_TAXID as string,",
				"          PAYTONAME as string,",
				"          CHECKTYPE as string,",
				"          CHECK_COST_TYPECODE as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CHECK_BID = SRC_CHECK_BID,",
				"          ETL_ROW_EFF_DATETIMESTAMP,",
				"          ETL_ROW_EXP_DATETIMESTAMP,",
				"          SOURCE = SRC_SOURCE,",
				"          CHECK_ISSUE_TIME = SRC_CHECK_ISSUE_TIME,",
				"          CHECK_NUMBER = SRC_CHECK_NUMBER,",
				"          PAYEE_MAIL_ADDRESS = SRC_PAYEE_MAIL_ADDRESS,",
				"          PAYEE_1_NAME = SRC_PAYEE_MAIL_ADDRESS,",
				"          PAYEE_2_NAME = SRC_PAYEE_2_NAME,",
				"          ETL_ACTIVE_FLAG = { ETL_ACTIVE_FLAG},",
				"          ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = { ETL_LAST_UPDATE_DATETIMESTAMP},",
				"          PAYEE_TAXID = SRC_PAYEE_TAXID,",
				"          PAYTONAME = SRC_PAYTONAME,",
				"          CHECKTYPE = SRC_CHECKTYPE,",
				"          CHECK_COST_TYPECODE = SRC_CHECK_COST_TYPECODE,",
				"          CHECK_KEY = SRC_CHECK_KEY",
				"     )) ~> dimClaimCheck",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CHECK_ID as integer,",
				"          CHECK_BID as integer,",
				"          CHECK_KEY as string,",
				"          ETL_ROW_EFF_DATETIMESTAMP as timestamp,",
				"          ETL_ROW_EXP_DATETIMESTAMP as timestamp,",
				"          SOURCE as string,",
				"          CHECK_ISSUE_TIME as timestamp,",
				"          CHECK_NUMBER as string,",
				"          PAYEE_MAIL_ADDRESS as string,",
				"          PAYEE_1_NAME as string,",
				"          PAYEE_2_NAME as string,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          PAYEE_TAXID as string,",
				"          PAYTONAME as string,",
				"          CHECKTYPE as string,",
				"          CHECK_COST_TYPECODE as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['CHECK_KEY'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CHECK_BID = SRC_CHECK_BID,",
				"          CHECK_KEY = SRC_CHECK_KEY,",
				"          ETL_ROW_EFF_DATETIMESTAMP = split1@UPDATE@ETL_ROW_EFF_DATETIMESTAMP,",
				"          ETL_ROW_EXP_DATETIMESTAMP = split1@UPDATE@ETL_ROW_EXP_DATETIMESTAMP,",
				"          SOURCE = SRC_SOURCE,",
				"          CHECK_ISSUE_TIME,",
				"          CHECK_NUMBER = SRC_CHECK_NUMBER,",
				"          PAYEE_MAIL_ADDRESS = SRC_PAYEE_MAIL_ADDRESS,",
				"          PAYEE_1_NAME = SRC_PAYEE_1_NAME,",
				"          PAYEE_2_NAME = SRC_PAYEE_2_NAME,",
				"          ETL_ACTIVE_FLAG,",
				"          ETL_ADD_DATETIMESTAMP = split1@UPDATE@ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          PAYEE_TAXID = SRC_PAYEE_TAXID,",
				"          PAYTONAME = SRC_PAYTONAME,",
				"          CHECKTYPE = SRC_CHECKTYPE,",
				"          CHECK_COST_TYPECODE = SRC_CHECK_COST_TYPECODE",
				"     )) ~> updateDimClaimCheck"
			]
		}
	}
}