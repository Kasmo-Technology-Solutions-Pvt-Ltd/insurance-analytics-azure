{
	"name": "dimClaimActivity",
	"properties": {
		"folder": {
			"name": "Insurance Analytics Azure/ccDimDataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_CC_ACTIVITY",
						"type": "DatasetReference"
					},
					"name": "ccActivity"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_ACTIVITYPATTERN",
						"type": "DatasetReference"
					},
					"name": "ccActivitypattern"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_CLAIM",
						"type": "DatasetReference"
					},
					"name": "ccClaim"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_USER",
						"type": "DatasetReference"
					},
					"name": "ccUser"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_GROUP",
						"type": "DatasetReference"
					},
					"name": "ccGroup"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_EXPOSURE",
						"type": "DatasetReference"
					},
					"name": "ccExposure"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_MATTER",
						"type": "DatasetReference"
					},
					"name": "ccMatter"
				},
				{
					"dataset": {
						"referenceName": "DS_DW_DIM_CLAIMACTIVITY",
						"type": "DatasetReference"
					},
					"name": "tgtCcDimClaimActivity"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_DW_DIM_CLAIMACTIVITY",
						"type": "DatasetReference"
					},
					"name": "insertedRows"
				},
				{
					"dataset": {
						"referenceName": "DS_DW_DIM_CLAIMACTIVITY",
						"type": "DatasetReference"
					},
					"name": "updatedRows"
				}
			],
			"transformations": [
				{
					"name": "joinActivityAndUser"
				},
				{
					"name": "joinActivityAndUserAndGroup"
				},
				{
					"name": "joinActivityAndUserAndGroupAndExposure"
				},
				{
					"name": "joinActivityAndUserAndGroupAndExposureAndClaim"
				},
				{
					"name": "joinActivityAndUserAndGroupAndExposureAndClaimAndActivitypattern"
				},
				{
					"name": "joinActivityAndUserAndGroupAndExposureAndClaimAndActivitypatternAndMatter"
				},
				{
					"name": "srcColumnTransformation"
				},
				{
					"name": "srcHashKey"
				},
				{
					"name": "tgtHashKey"
				},
				{
					"name": "lookupKeyColumn"
				},
				{
					"name": "split1"
				},
				{
					"name": "updateCondition"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ValidationLevel as integer,",
				"          LogicalName as string,",
				"          ExternallyOwned as boolean,",
				"          Retired as long,",
				"          MatterID as long,",
				"          CloseUserID as long,",
				"          ServiceRequestID as long,",
				"          DocumentTemplate as string,",
				"          ShortSubject as string,",
				"          EscalationDate as timestamp,",
				"          AssignedUserID as long,",
				"          ExposureID as long,",
				"          ID as long,",
				"          BulkInvoiceID as long,",
				"          BeanVersion as integer,",
				"          ApprovalRationale as string,",
				"          PreviousQueueID as long,",
				"          TransactionSetID as long,",
				"          EmailTemplate as string,",
				"          Subtype as integer,",
				"          LastViewedDate as timestamp,",
				"          EndDate as timestamp,",
				"          Mandatory as boolean,",
				"          AutoGenerated as boolean,",
				"          ActivityClass as integer,",
				"          CloseDate as timestamp,",
				"          Recurring as boolean,",
				"          Command as string,",
				"          AssignmentDate as timestamp,",
				"          PreviousUserID as long,",
				"          TargetDate as timestamp,",
				"          Type as integer,",
				"          Approved as boolean,",
				"          AssignedByUserID as long,",
				"          PublicID as string,",
				"          ClaimContactID as long,",
				"          ArchivePartition as long,",
				"          CreateUserID as long,",
				"          ExternalOwnerCCID as long,",
				"          Importance as integer,",
				"          AssignedGroupID as long,",
				"          UpdateUserID as long,",
				"          AssignedQueueID as long,",
				"          Escalated as boolean,",
				"          Description as string,",
				"          AssignmentStatus as integer,",
				"          WorkflowID as long,",
				"          Subject as string,",
				"          ClaimID as long,",
				"          LoadCommandID as long,",
				"          UpdateTime as timestamp,",
				"          Priority as integer,",
				"          ApprovalIssue as string,",
				"          Status as integer,",
				"          CreateTime as timestamp,",
				"          ActivityPatternID as long,",
				"          PreviousGroupID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccActivity",
				"source(output(",
				"          Command as string,",
				"          ExternallyOwned as boolean,",
				"          Retired as long,",
				"          Type as integer,",
				"          TargetDays as integer,",
				"          TargetIncludeDays as integer,",
				"          EscBusCalLocPath as string,",
				"          PublicID as string,",
				"          Code as string,",
				"          EscalationInclDays as integer,",
				"          DocumentTemplate as string,",
				"          EscalationBusCalTag as integer,",
				"          TargetHours as integer,",
				"          CreateUserID as long,",
				"          ShortSubject as string,",
				"          TargetBusCalLocPath as string,",
				"          ID as long,",
				"          BeanVersion as integer,",
				"          Importance as integer,",
				"          AutomatedOnly as boolean,",
				"          TargetBusCalTag as integer,",
				"          UpdateUserID as long,",
				"          Description as string,",
				"          ClaimLossType as integer,",
				"          Subject as string,",
				"          LoadCommandID as long,",
				"          UpdateTime as timestamp,",
				"          ClosedClaimAvlble as boolean,",
				"          Priority as integer,",
				"          EmailTemplate as string,",
				"          EscalationHours as integer,",
				"          Category as integer,",
				"          EscalationStartPt as integer,",
				"          TargetStartPoint as integer,",
				"          CreateTime as timestamp,",
				"          Mandatory as boolean,",
				"          EscalationDays as integer,",
				"          ActivityClass as integer,",
				"          Recurring as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccActivitypattern",
				"source(output(",
				"          HazardousWaste as boolean,",
				"          SubrogationStatus as integer,",
				"          MMIdate as timestamp,",
				"          ReinsuranceReportable as boolean,",
				"          EmpSentMPNNotice as timestamp,",
				"          InsurerSentMPNNotice as timestamp,",
				"          SIEscalateSIU as integer,",
				"          StateFileNumber as string,",
				"          BeanVersion as integer,",
				"          StorageLocationState as integer,",
				"          Currency as integer,",
				"          Weather as integer,",
				"          SIEscalateSIUdate as timestamp,",
				"          LockingColumn as integer,",
				"          ReportedDate as timestamp,",
				"          PurgeDate as timestamp,",
				"          LargeLossNotificationStatus as integer,",
				"          OtherRecovStatus as integer,",
				"          SalvageStatus as integer,",
				"          LossLocationID as long,",
				"          SIUStatus as integer,",
				"          StorageCategory as integer,",
				"          JurisdictionState as integer,",
				"          ISOReceiveDate as timestamp,",
				"          FaultRating as integer,",
				"          PolicyID as long,",
				"          LossType as integer,",
				"          CloseDate as timestamp,",
				"          EmploymentInjury as boolean,",
				"          StorageType as integer,",
				"          DateFormRetByEmp as timestamp,",
				"          LocationOfTheft as integer,",
				"          ClosedOutcome as integer,",
				"          AssignmentDate as timestamp,",
				"          PreviousUserID as long,",
				"          ClaimTier as integer,",
				"          ReopenedReason as integer,",
				"          EmployerValidityReason as string,",
				"          AssignedByUserID as long,",
				"          PublicID as string,",
				"          LitigationStatus as integer,",
				"          DateEligibleForArchive as timestamp,",
				"          FlaggedReason as string,",
				"          LossCause as integer,",
				"          LossDate as timestamp,",
				"          InjuredRegularJob as boolean,",
				"          ClaimantDenormID as long,",
				"          Segment as integer,",
				"          ISOStatus as integer,",
				"          StorageVolumes as string,",
				"          AssignedGroupID as long,",
				"          UpdateUserID as long,",
				"          AssignedQueueID as long,",
				"          ExposureBegan as timestamp,",
				"          SIScore as integer,",
				"          Mold as boolean,",
				"          WorkloadUpdated as timestamp,",
				"          Strategy as integer,",
				"          CurrentConditions as boolean,",
				"          UpdateTime as timestamp,",
				"          LocationCodeID as long,",
				"          PTPinMPN as boolean,",
				"          HospitalDate as timestamp,",
				"          SupplementalWorkloadWeight as integer,",
				"          FurtherTreatment as boolean,",
				"          SafetyEquipUsed as boolean,",
				"          FlaggedDate as timestamp,",
				"          ReOpenDate as timestamp,",
				"          CreateTime as timestamp,",
				"          StateAckNumber as string,",
				"          StorageDate as timestamp,",
				"          LossLocationCode as string,",
				"          AgencyId as string,",
				"          Fault as decimal(4,1),",
				"          StatuteDate as timestamp,",
				"          ValidationLevel as integer,",
				"          ModifiedDutyAvail as boolean,",
				"          Retired as long,",
				"          HospitalDays as integer,",
				"          ExposureEnded as timestamp,",
				"          DateRptdToEmployer as timestamp,",
				"          DrugsInvolved as integer,",
				"          ISOKnown as boolean,",
				"          ComputerSecurity as boolean,",
				"          InjuredOnPremises as boolean,",
				"          ExaminationDate as timestamp,",
				"          DateRptdToInsured as timestamp,",
				"          AssignedUserID as long,",
				"          ReportedByType as integer,",
				"          ID as long,",
				"          CatastropheID as long,",
				"          DeathDate as timestamp,",
				"          PreviousQueueID as long,",
				"          SafetyEquipProv as boolean,",
				"          TreatedPatientBfr as boolean,",
				"          HowReported as integer,",
				"          DateCompDcsnDue as timestamp,",
				"          InsuredPremises as boolean,",
				"          MainContactType as integer,",
				"          StorageBarCodeNum as string,",
				"          ClaimNumber as string,",
				"          DiagnosticCnsistnt as boolean,",
				"          DateCompDcsnMade as timestamp,",
				"          DateFormGivenToEmp as timestamp,",
				"          Flagged as integer,",
				"          SIULifeCycleState as integer,",
				"          ClaimWorkCompID as long,",
				"          LOBCode as integer,",
				"          FireDeptInfo as string,",
				"          PreexDisblty as boolean,",
				"          InjWkrInMPN as timestamp,",
				"          IncidentReport as boolean,",
				"          BenefitsStatusDcsn as boolean,",
				"          ArchivePartition as long,",
				"          ConcurrentEmp as integer,",
				"          CreateUserID as long,",
				"          ShowMedicalFirstInfo as integer,",
				"          ISOSendDate as timestamp,",
				"          EmploymentDataID as long,",
				"          ISOEnabled as boolean,",
				"          FirstNoticeSuit as boolean,",
				"          AssignmentStatus as integer,",
				"          Description as string,",
				"          CoverageInQuestion as boolean,",
				"          ReinsuranceFlaggedStatus as integer,",
				"          AccidentType as integer,",
				"          LoadCommandID as long,",
				"          WorkloadWeight as integer,",
				"          PoliceDeptInfo as string,",
				"          ClaimSource as integer,",
				"          DateRptdToAgent as timestamp,",
				"          ManifestationDate as timestamp,",
				"          Progress as integer,",
				"          PermissionRequired as integer,",
				"          State as integer,",
				"          EmpQusValidity as integer,",
				"          StorageBoxNum as string,",
				"          ClaimantRprtdDate as timestamp,",
				"          InsuredDenormID as long,",
				"          WeatherRelated as boolean,",
				"          PreviousGroupID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccClaim",
				"source(output(",
				"          ValidationLevel as integer,",
				"          ExternalUser as boolean,",
				"          Retired as long,",
				"          OrganizationID as long,",
				"          VacationStatus as integer,",
				"          PublicID as string,",
				"          CreateUserID as long,",
				"          CredentialID as long,",
				"          DefaultCountry as integer,",
				"          ID as long,",
				"          BeanVersion as integer,",
				"          TimeZone as integer,",
				"          Department as string,",
				"          UpdateUserID as long,",
				"          PolicyType as integer,",
				"          DefaultPhoneCountry as integer,",
				"          UserSettingsID as long,",
				"          LoadCommandID as long,",
				"          ContactID as long,",
				"          AuthorityProfileID as long,",
				"          UpdateTime as timestamp,",
				"          Locale as integer,",
				"          ExperienceLevel as integer,",
				"          QuickClaim as integer,",
				"          CreateTime as timestamp,",
				"          LossType as integer,",
				"          SystemUserType as integer,",
				"          Language as integer,",
				"          NewlyAssignedActivities as integer,",
				"          JobTitle as string,",
				"          OffsetStatsUpdateTime as timestamp,",
				"          SessionTimeoutSecs as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccUser",
				"source(output(",
				"          ValidationLevel as integer,",
				"          GroupType as integer,",
				"          LoadFactor as integer,",
				"          Retired as long,",
				"          OrganizationID as long,",
				"          UpdateTime as timestamp,",
				"          WorldVisible as boolean,",
				"          NameKanji as string,",
				"          PublicID as string,",
				"          Name as string,",
				"          SecurityZoneID as long,",
				"          CreateUserID as long,",
				"          CreateTime as timestamp,",
				"          ID as long,",
				"          SupervisorID as long,",
				"          BeanVersion as integer,",
				"          UpdateUserID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccGroup",
				"source(output(",
				"          IncidentID as long,",
				"          SSDIEligible as boolean,",
				"          StatLineID as long,",
				"          CompBenefitsID as long,",
				"          DisBenefitsID as long,",
				"          CoverageID as long,",
				"          BeanVersion as integer,",
				"          IncidentLimitReached as boolean,",
				"          LostPropertyType as integer,",
				"          SSDIBenefitsID as long,",
				"          WCPreexDisbltyInfo as string,",
				"          LossParty as integer,",
				"          JurisdictionState as integer,",
				"          ClaimantType as integer,",
				"          WageStmtSent as timestamp,",
				"          ISOReceiveDate as timestamp,",
				"          LossCategory as integer,",
				"          OtherCoverageInfo as string,",
				"          SettleDate as timestamp,",
				"          CloseDate as timestamp,",
				"          ClosedOutcome as integer,",
				"          AssignmentDate as timestamp,",
				"          ContactPermitted as boolean,",
				"          PreviousUserID as long,",
				"          ReopenedReason as integer,",
				"          AssignedByUserID as long,",
				"          PublicID as string,",
				"          ClaimOrder as integer,",
				"          NewEmpDataID as long,",
				"          ClaimantDenormID as long,",
				"          WCPreexDisblty as boolean,",
				"          Segment as integer,",
				"          ISOStatus as integer,",
				"          CoverageSubType as integer,",
				"          PrimaryCoverage as integer,",
				"          AssignedGroupID as long,",
				"          DepreciatedValue as decimal(18,2),",
				"          UpdateUserID as long,",
				"          AssignedQueueID as long,",
				"          DeathBenefitsID as long,",
				"          ClaimID as long,",
				"          WorkloadUpdated as timestamp,",
				"          PIPDeathBenefitsID as long,",
				"          Strategy as integer,",
				"          CurrentConditions as boolean,",
				"          UpdateTime as timestamp,",
				"          LifePensionBenefitsID as long,",
				"          BreakIn as boolean,",
				"          TempLocationID as long,",
				"          SecurityLevel as integer,",
				"          HospitalDate as timestamp,",
				"          SupplementalWorkloadWeight as integer,",
				"          FurtherTreatment as boolean,",
				"          PriorEmpDataID as long,",
				"          ReOpenDate as timestamp,",
				"          SSBenefit as boolean,",
				"          CreateTime as timestamp,",
				"          TTDBenefitsID as long,",
				"          WageStmtRecd as timestamp,",
				"          OtherCoverage as boolean,",
				"          ValidationLevel as integer,",
				"          Retired as long,",
				"          HospitalDays as integer,",
				"          ISOKnown as boolean,",
				"          ExaminationDate as timestamp,",
				"          DaysInWeek as integer,",
				"          ExposureLimitReached as boolean,",
				"          AssignedUserID as long,",
				"          ID as long,",
				"          RIAgreementGroupID as long,",
				"          PreviousQueueID as long,",
				"          TreatedPatientBfr as boolean,",
				"          PPDBenefitsID as long,",
				"          AverageWeeklyWages as decimal(18,2),",
				"          WageBenefit as boolean,",
				"          PIPNonMedAggLimitReached as boolean,",
				"          WCBenefit as boolean,",
				"          PTDBenefitsID as long,",
				"          WCBenefitsID as long,",
				"          RSBenefitsID as long,",
				"          TPDBenefitsID as long,",
				"          DiagnosticCnsistnt as boolean,",
				"          PIPVocBenefitsID as long,",
				"          MetricLimitGeneration as integer,",
				"          Locked as boolean,",
				"          OtherCovgChoice as integer,",
				"          SettleMethod as integer,",
				"          PIPPersonAggLimitReached as boolean,",
				"          ReplacementValue as decimal(18,2),",
				"          ArchivePartition as long,",
				"          CreateUserID as long,",
				"          RIGroupSetExternally as boolean,",
				"          ISOSendDate as timestamp,",
				"          AssignmentStatus as integer,",
				"          PIPESSLimitReached as boolean,",
				"          LoadCommandID as long,",
				"          WorkloadWeight as integer,",
				"          Progress as integer,",
				"          VocBenefitsID as long,",
				"          State as integer,",
				"          ExposureType as integer,",
				"          ExposureTier as integer,",
				"          LastDayWorked as timestamp,",
				"          PIPClaimAggLimitReached as boolean,",
				"          PreviousGroupID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccExposure",
				"source(output(",
				"          ValidationLevel as integer,",
				"          FilingDate as timestamp,",
				"          Retired as long,",
				"          Arbitration as boolean,",
				"          FirstNotice as boolean,",
				"          SuitType as integer,",
				"          PunitiveAmount as decimal(18,2),",
				"          Room as string,",
				"          FinalSettleCost as decimal(18,2),",
				"          PunitiveDamages as boolean,",
				"          CourtType as integer,",
				"          AssignedUserID as long,",
				"          ID as long,",
				"          MediationDate as timestamp,",
				"          BeanVersion as integer,",
				"          CaseNumber as string,",
				"          PreviousQueueID as long,",
				"          SentToDefenseDate as timestamp,",
				"          ArbitrationDate as timestamp,",
				"          FileDate as timestamp,",
				"          StructuredSettle as boolean,",
				"          AdDamnumAmount as decimal(18,2),",
				"          HearingDate as timestamp,",
				"          FinalSettleDate as timestamp,",
				"          ResponseDue as timestamp,",
				"          AdDamnumSpecified as boolean,",
				"          ArbitrationRoom as string,",
				"          CloseDate as timestamp,",
				"          TrialDate as timestamp,",
				"          MatterType as integer,",
				"          MatterCaseNumber as string,",
				"          ServiceDate as timestamp,",
				"          AssignmentDate as timestamp,",
				"          PreviousUserID as long,",
				"          SubroRelated as boolean,",
				"          RiskType as integer,",
				"          ReopenedReason as integer,",
				"          DefenseApptDate as timestamp,",
				"          MediationRoom as string,",
				"          AssignedByUserID as long,",
				"          PublicID as string,",
				"          SubrogationSummaryID as long,",
				"          ArchivePartition as long,",
				"          CreateUserID as long,",
				"          MotionSummaryJgmt as boolean,",
				"          FinalLegalCost as decimal(18,2),",
				"          LegalSpecialty as integer,",
				"          ResponseFiled as timestamp,",
				"          AssignedGroupID as long,",
				"          MethodServed as integer,",
				"          UpdateUserID as long,",
				"          AssignedQueueID as long,",
				"          DocketNumber as string,",
				"          AssignmentStatus as integer,",
				"          Resolution as integer,",
				"          ClaimID as long,",
				"          HearingRoom as string,",
				"          LoadCommandID as long,",
				"          UpdateTime as timestamp,",
				"          Name as string,",
				"          DeclaratoryJgmt as boolean,",
				"          CreateTime as timestamp,",
				"          PrimaryCause as integer,",
				"          PreviousGroupID as long,",
				"          CourtDistrict as integer,",
				"          VenueRating as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccMatter",
				"source(output(",
				"          ACTIVITY_ID as integer,",
				"          ACTIVITY_KEY as string,",
				"          SOURCE as string,",
				"          ACTIVITY_PATTERN_CD as string,",
				"          ACTIVITY_PATTERN_DESC as string,",
				"          ACTIVITY_ASSIGNMENT_TS as timestamp,",
				"          ACTIVITY_SUBJECT_NAME as string,",
				"          ACTIVITY_TYPECODE as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ACTIVITY_EXPOSUREID as integer,",
				"          ACTIVITY_UPDATETIME as timestamp,",
				"          CLAIM_NUMBER as string,",
				"          CLAIM_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tgtCcDimClaimActivity",
				"ccActivity, ccUser join(ccActivity@ID == ccUser@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinActivityAndUser",
				"joinActivityAndUser, ccGroup join(ccUser@ID == ccGroup@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinActivityAndUserAndGroup",
				"joinActivityAndUserAndGroup, ccExposure join(ccGroup@ID == IncidentID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinActivityAndUserAndGroupAndExposure",
				"joinActivityAndUserAndGroupAndExposure, ccClaim join(ccExposure@ID == ccClaim@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinActivityAndUserAndGroupAndExposureAndClaim",
				"joinActivityAndUserAndGroupAndExposureAndClaim, ccActivitypattern join(ccClaim@ID == ccActivitypattern@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinActivityAndUserAndGroupAndExposureAndClaimAndActivitypattern",
				"joinActivityAndUserAndGroupAndExposureAndClaimAndActivitypattern, ccMatter join(ccActivitypattern@ID == ccMatter@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinActivityAndUserAndGroupAndExposureAndClaimAndActivitypatternAndMatter",
				"joinActivityAndUserAndGroupAndExposureAndClaimAndActivitypatternAndMatter derive(SRC_SOURCE = 'CC',",
				"          SRC_ETL_ADD_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_ETL_LAST_UPDATE_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_ACT_EXPOSUREID = toInteger(ExposureID),",
				"          SRC_ETL_ACTIVE_FLAG = 'Y',",
				"          SRC_ACTIVITY_KEY = ccActivity@PublicID,",
				"          SRC_ACTIVITY_PATTERN_CD = Code,",
				"          SRC_ACTIVITY_PATTERN_DESC = ccActivitypattern@Description,",
				"          SRC_ACTIVITY_ASSIGNMENT_TS = ccActivity@AssignmentDate,",
				"          SRC_ACTVY_SBJ_NM = ccActivity@Subject,",
				"          SRC_ACTIVITY_TYPECODE = ccActivity@Type,",
				"          SRC_CLAIM_NUMBER = ClaimNumber,",
				"          SRC_CLAIM_ID = ccClaim@ID,",
				"          SRC_ACTIVITY_UPDATETIME = ccActivity@UpdateTime) ~> srcColumnTransformation",
				"srcColumnTransformation derive(srcHashKey = sha1(SRC_ACTIVITY_KEY,SRC_SOURCE,SRC_ACTIVITY_PATTERN_CD,SRC_ACTIVITY_PATTERN_DESC,SRC_ACTVY_SBJ_NM,SRC_CLAIM_NUMBER,toInteger(SRC_CLAIM_ID),SRC_ACT_EXPOSUREID)) ~> srcHashKey",
				"tgtCcDimClaimActivity derive(tgtHashKey = sha1(ACTIVITY_KEY,SOURCE,ACTIVITY_PATTERN_CD,ACTIVITY_PATTERN_DESC,ACTIVITY_SUBJECT_NAME,CLAIM_NUMBER,CLAIM_ID,ACTIVITY_EXPOSUREID)) ~> tgtHashKey",
				"srcHashKey, tgtHashKey lookup(SRC_ACTIVITY_KEY == ACTIVITY_KEY,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'both')~> lookupKeyColumn",
				"lookupKeyColumn split(isNull(ACTIVITY_KEY),",
				"     !isNull(ACTIVITY_KEY)&&notEquals(srcHashKey,tgtHashKey),",
				"     disjoint: false) ~> split1@(insert, update, noUpdate)",
				"split1@update alterRow(updateIf(true())) ~> updateCondition",
				"split1@insert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ACTIVITY_ID as integer,",
				"          ACTIVITY_KEY as string,",
				"          SOURCE as string,",
				"          ACTIVITY_PATTERN_CD as string,",
				"          ACTIVITY_PATTERN_DESC as string,",
				"          ACTIVITY_ASSIGNMENT_TS as timestamp,",
				"          ACTIVITY_SUBJECT_NAME as string,",
				"          ACTIVITY_TYPECODE as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ACTIVITY_EXPOSUREID as integer,",
				"          ACTIVITY_UPDATETIME as timestamp,",
				"          CLAIM_NUMBER as string,",
				"          CLAIM_ID as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ACTIVITY_KEY = SRC_ACTIVITY_KEY,",
				"          SOURCE = SRC_SOURCE,",
				"          ACTIVITY_PATTERN_CD = SRC_ACTIVITY_PATTERN_CD,",
				"          ACTIVITY_PATTERN_DESC = SRC_ACTIVITY_PATTERN_DESC,",
				"          ACTIVITY_ASSIGNMENT_TS = SRC_ACTIVITY_ASSIGNMENT_TS,",
				"          ACTIVITY_SUBJECT_NAME = SRC_ACTVY_SBJ_NM,",
				"          ACTIVITY_TYPECODE = SRC_ACTIVITY_TYPECODE,",
				"          ETL_ADD_DATETIMESTAMP = SRC_ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = SRC_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ETL_ACTIVE_FLAG = SRC_ETL_ACTIVE_FLAG,",
				"          ACTIVITY_EXPOSUREID = SRC_ACT_EXPOSUREID,",
				"          ACTIVITY_UPDATETIME = SRC_ACTIVITY_UPDATETIME,",
				"          CLAIM_NUMBER = SRC_CLAIM_NUMBER,",
				"          CLAIM_ID = SRC_CLAIM_ID",
				"     )) ~> insertedRows",
				"updateCondition sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ACTIVITY_ID as integer,",
				"          ACTIVITY_KEY as string,",
				"          SOURCE as string,",
				"          ACTIVITY_PATTERN_CD as string,",
				"          ACTIVITY_PATTERN_DESC as string,",
				"          ACTIVITY_ASSIGNMENT_TS as timestamp,",
				"          ACTIVITY_SUBJECT_NAME as string,",
				"          ACTIVITY_TYPECODE as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ACTIVITY_EXPOSUREID as integer,",
				"          ACTIVITY_UPDATETIME as timestamp,",
				"          CLAIM_NUMBER as string,",
				"          CLAIM_ID as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['ACTIVITY_KEY'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ACTIVITY_KEY = SRC_ACTIVITY_KEY,",
				"          SOURCE = SRC_SOURCE,",
				"          ACTIVITY_PATTERN_CD = SRC_ACTIVITY_PATTERN_CD,",
				"          ACTIVITY_PATTERN_DESC = SRC_ACTIVITY_PATTERN_DESC,",
				"          ACTIVITY_ASSIGNMENT_TS = SRC_ACTIVITY_ASSIGNMENT_TS,",
				"          ACTIVITY_SUBJECT_NAME = SRC_ACTVY_SBJ_NM,",
				"          ACTIVITY_TYPECODE = SRC_ACTIVITY_TYPECODE,",
				"          ETL_ADD_DATETIMESTAMP = SRC_ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = SRC_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ETL_ACTIVE_FLAG = SRC_ETL_ACTIVE_FLAG,",
				"          ACTIVITY_EXPOSUREID = SRC_ACT_EXPOSUREID,",
				"          ACTIVITY_UPDATETIME = SRC_ACTIVITY_UPDATETIME,",
				"          CLAIM_NUMBER = SRC_CLAIM_NUMBER,",
				"          CLAIM_ID = SRC_CLAIM_ID",
				"     )) ~> updatedRows"
			]
		}
	}
}