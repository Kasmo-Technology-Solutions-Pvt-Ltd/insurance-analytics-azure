{
	"name": "dimLocation",
	"properties": {
		"folder": {
			"name": "Insurance Analytics Azure/pcDimDataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_PC_POLICYLOCATION",
						"type": "DatasetReference"
					},
					"name": "policylocation"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_ADDRESS1",
						"type": "DatasetReference"
					},
					"name": "address"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_JOB",
						"type": "DatasetReference"
					},
					"name": "job"
				},
				{
					"dataset": {
						"referenceName": "DS_PCTL_COUNTRY",
						"type": "DatasetReference"
					},
					"name": "country"
				},
				{
					"dataset": {
						"referenceName": "DS_PCTL_STATE1",
						"type": "DatasetReference"
					},
					"name": "State"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_POLICYPERIOD",
						"type": "DatasetReference"
					},
					"name": "policyperiod"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_dw_dim_location",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "join5"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PublicID as string,",
				"          CityKanjiInternalDenorm as string,",
				"          AddressLine1Internal as string,",
				"          CountyInternal as string,",
				"          AddressLine2Internal as string,",
				"          AddressLine3Internal as string,",
				"          CreateTime as timestamp,",
				"          CityKanjiInternal as string,",
				"          AddressLine2KanjiInternal as string,",
				"          StateInternal as integer,",
				"          FixedID as long,",
				"          CountryInternal as integer,",
				"          EffectiveDate as timestamp,",
				"          UpdateTime as timestamp,",
				"          ID as long,",
				"          ExpirationDate as timestamp,",
				"          EmployeeCountInternal as integer,",
				"          ValidUntilInternal as timestamp,",
				"          TaxLocation as long,",
				"          CreateUserID as long,",
				"          AccountLocation as long,",
				"          CityInternalDenorm as string,",
				"          IndustryCodeID as long,",
				"          ArchivePartition as long,",
				"          BeanVersion as integer,",
				"          CityInternal as string,",
				"          ChangeType as integer,",
				"          AddressTypeInternal as integer,",
				"          AddressLine1KanjiInternal as string,",
				"          CEDEXBureauInternal as string,",
				"          BasedOnID as long,",
				"          UpdateUserID as long,",
				"          LocationNum as integer,",
				"          PostalCodeInternalDenorm as string,",
				"          CEDEXInternal as boolean,",
				"          BuildingAutoNumberSeq as long,",
				"          PostalCodeInternal as string,",
				"          DescriptionInternal as string,",
				"          BranchID as long,",
				"          FireProtectClass as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> policylocation",
				"source(output(",
				"          LocationName as string,",
				"          LoadCommandID as long,",
				"          PublicID as string,",
				"          BatchGeocode as boolean,",
				"          Active as boolean,",
				"          CreateTime as timestamp,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          County as string,",
				"          AddressLine3 as string,",
				"          CityKanji as string,",
				"          AddressLine2Kanji as string,",
				"          PhoneExtension as string,",
				"          State as integer,",
				"          AddressBookUID as string,",
				"          UpdateTime as timestamp,",
				"          Country as integer,",
				"          ID as long,",
				"          EmployeeCount as integer,",
				"          LocationCode as string,",
				"          CreateUserID as long,",
				"          ValidUntil as timestamp,",
				"          PhoneCountry as integer,",
				"          BeanVersion as integer,",
				"          CityDenorm as string,",
				"          Retired as long,",
				"          City as string,",
				"          LastUpdateTime as timestamp,",
				"          Account as long,",
				"          Phone as string,",
				"          AddressType as integer,",
				"          AddressLine1Kanji as string,",
				"          UpdateUserID as long,",
				"          CEDEXBureau as string,",
				"          GeocodeStatus as integer,",
				"          LocationNum as integer,",
				"          CEDEX as boolean,",
				"          PostalCodeDenorm as string,",
				"          PostalCode as string,",
				"          Referenced as boolean,",
				"          Subtype as integer,",
				"          LinkedAddress as long,",
				"          Description as string,",
				"          TemporaryLastUpdateTime as timestamp,",
				"          NonSpecific as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> address",
				"source(output(",
				"          NotTakenNotifDate as timestamp,",
				"          ArchiveState as integer,",
				"          ArchiveSchemaInfo as long,",
				"          UpdateTime as timestamp,",
				"          NotificationDate as timestamp,",
				"          ID as long,",
				"          Source as integer,",
				"          ExcludeReason as string,",
				"          NextPurgeCheckDate as timestamp,",
				"          CreateUserID as long,",
				"          ArchiveFailureID as long,",
				"          RejectReason as integer,",
				"          CloseDate as timestamp,",
				"          BeanVersion as integer,",
				"          Retired as long,",
				"          CancelReasonCode as integer,",
				"          ChangePolicyNumber as boolean,",
				"          UpdateUserID as long,",
				"          PrimaryInsuredNameDenorm as string,",
				"          NonRenewalNotifDate as timestamp,",
				"          PrimaryInsuredName as string,",
				"          QuoteType as integer,",
				"          DateQuoteNeeded as timestamp,",
				"          PublicID as string,",
				"          SideBySide as boolean,",
				"          JobNumber as string,",
				"          RewriteType as integer,",
				"          CreateTime as timestamp,",
				"          AuditInformationID as long,",
				"          PolicyID as long,",
				"          ExcludedFromArchive as boolean,",
				"          RejectReasonText as string,",
				"          ArchiveFailureDetailsID as long,",
				"          RescindNotificationDate as timestamp,",
				"          PurgeStatus as integer,",
				"          InitialNotificationDate as timestamp,",
				"          LastNotifiedCancellationDate as timestamp,",
				"          JobGroup as long,",
				"          CancelProcessDate as timestamp,",
				"          RenewalCode as integer,",
				"          EscalateAfterHoldReleased as boolean,",
				"          ReinstateCode as integer,",
				"          RenewalNotifDate as timestamp,",
				"          PaymentReceived as decimal(18,2),",
				"          ArchivePartition as long,",
				"          PaymentReceived_cur as integer,",
				"          NotificationAckDate as timestamp,",
				"          ArchiveDate as timestamp,",
				"          BindOption as integer,",
				"          NonRenewalCode as integer,",
				"          Subtype as integer,",
				"          SubmissionDate as timestamp,",
				"          Description as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> job",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> country",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> State",
				"source(output(",
				"          BasedOnDate as timestamp,",
				"          ValidQuote as boolean,",
				"          TotalPremiumRPT as decimal(18,2),",
				"          TotalPremiumRPT_cur as integer,",
				"          MinimumPremium as long,",
				"          Locked as boolean,",
				"          EditEffectiveDate as timestamp,",
				"          ValidReinsurance as boolean,",
				"          SeriesCheckingPatternCode as string,",
				"          ArchiveState as integer,",
				"          ArchiveSchemaInfo as long,",
				"          PNIContactDenorm as long,",
				"          LocationAutoNumberSeq as long,",
				"          EditLocked as boolean,",
				"          UpdateTime as timestamp,",
				"          RateAsOfDate as timestamp,",
				"          JobID as long,",
				"          ID as long,",
				"          SingleCheckingPatternCode as string,",
				"          UWCompany as long,",
				"          BillingMethod as integer,",
				"          PeriodID as long,",
				"          TransactionPremiumRPT as decimal(18,2),",
				"          AssignedRisk as boolean,",
				"          ExcludeReason as string,",
				"          TransactionPremiumRPT_cur as integer,",
				"          CreateUserID as long,",
				"          ArchiveFailureID as long,",
				"          AllowGapsBefore as boolean,",
				"          QuoteHidden as boolean,",
				"          BeanVersion as integer,",
				"          FailedOOSEValidation as boolean,",
				"          Retired as long,",
				"          BranchName as string,",
				"          Preempted as boolean,",
				"          UpdateUserID as long,",
				"          FuturePeriods as boolean,",
				"          PrimaryInsuredNameDenorm as string,",
				"          CancellationDate as timestamp,",
				"          ModelNumber as integer,",
				"          TemporaryBranch as boolean,",
				"          PrimaryInsuredName as string,",
				"          Segment as integer,",
				"          TermNumber as integer,",
				"          DepositOverridePct as decimal(12,3),",
				"          PolicyTermID as long,",
				"          WaiveDepositChange as boolean,",
				"          PeriodStart as timestamp,",
				"          ProducerCodeOfRecordID as long,",
				"          DoNotPurge as boolean,",
				"          PublicID as string,",
				"          AltBillingAccountNumber as string,",
				"          TotalCostRPT as decimal(18,2),",
				"          WrittenDate as timestamp,",
				"          TotalCostRPT_cur as integer,",
				"          CreateTime as timestamp,",
				"          MostRecentModel as boolean,",
				"          PolicyID as long,",
				"          ExcludedFromArchive as boolean,",
				"          AllocationOfRemainder as integer,",
				"          OverrideBillingAllocation as boolean,",
				"          ArchiveFailureDetailsID as long,",
				"          ModelDate as timestamp,",
				"          InvoiceStreamCode as string,",
				"          ModelNumberIndex as string,",
				"          BaseState as integer,",
				"          MostRecentModelIndex as string,",
				"          ArchivePartition as long,",
				"          CustomBilling as boolean,",
				"          TransactionCostRPT as decimal(18,2),",
				"          BranchNumber as integer,",
				"          FailedOOSEEvaluation as boolean,",
				"          DepositCollected as decimal(18,2),",
				"          TransactionCostRPT_cur as integer,",
				"          DepositCollected_cur as integer,",
				"          BasedOnID as long,",
				"          LockingColumn as integer,",
				"          RefundCalcMethod as integer,",
				"          ArchiveDate as timestamp,",
				"          BillImmediatelyPercentage as decimal(4,1),",
				"          Status as integer,",
				"          DepositAmount as decimal(18,2),",
				"          DepositAmount_cur as integer,",
				"          PeriodEnd as timestamp,",
				"          PreferredCoverageCurrency as integer,",
				"          PolicyNumber as string,",
				"          PreferredSettlementCurrency as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> policyperiod",
				"policylocation, address join(AccountLocation == address@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, policyperiod join(BranchID == policyperiod@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, job join(JobID == job@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3, country join(CountryInternal == country@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4, State join(StateInternal == State@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"join5 derive(Location_Key = concat(concat(concat(concat('PC-', toString(PeriodID))),'-'),toString(FixedID)),",
				"          tgt_SOURCE = 'PC',",
				"          END_EFF_DATE = case(isNull(EffectiveDate),PeriodStart,EffectiveDate),",
				"          END_EXP_DATE = case(isNull(ExpirationDate),PeriodEnd,ExpirationDate),",
				"          LOCATION_NO = toString(policylocation@LocationNum),",
				"          tgt_COUNTRY_TEXT = 'state_alpha',",
				"          tgt_REGION_TEXT = 'state_alpha',",
				"          ETL_ACTIVE_FLAG = 'Y',",
				"          ETL_ADD_DATETIMESTAMP = currentTimestamp(),",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = currentTimestamp()) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LOCATION_ID as integer,",
				"          LOCATION_KEY as string,",
				"          ETL_END_EFF_DATE as timestamp,",
				"          ETL_END_EXP_DATE as timestamp,",
				"          END_EFF_DATE as timestamp,",
				"          END_EXP_DATE as timestamp,",
				"          SOURCE as string,",
				"          LOCATION_NO as string,",
				"          STREET_1_NAME as string,",
				"          STREET_2_NAME as string,",
				"          STREET_3_NAME as string,",
				"          COUNTRY_CODE as string,",
				"          COUNTRY_TEXT as string,",
				"          REGION_CODE as string,",
				"          REGION_TEXT as string,",
				"          CITY_NAME as string,",
				"          POSTAL_CODE as string,",
				"          COUNTY_NAME as string,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          LOCATION_KEY = Location_Key,",
				"          END_EFF_DATE,",
				"          END_EXP_DATE,",
				"          SOURCE = tgt_SOURCE,",
				"          LOCATION_NO,",
				"          STREET_1_NAME = AddressLine1Internal,",
				"          STREET_2_NAME = AddressLine2Internal,",
				"          STREET_3_NAME = AddressLine3Internal,",
				"          COUNTRY_CODE = country@TYPECODE,",
				"          COUNTRY_TEXT = tgt_COUNTRY_TEXT,",
				"          REGION_CODE = State@TYPECODE,",
				"          REGION_TEXT = tgt_REGION_TEXT,",
				"          CITY_NAME = CityInternal,",
				"          POSTAL_CODE = PostalCodeInternal,",
				"          COUNTY_NAME = CountyInternal,",
				"          ETL_ACTIVE_FLAG,",
				"          ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP",
				"     )) ~> sink1"
			]
		}
	}
}