{
	"name": "factPremiumTransaction",
	"properties": {
		"folder": {
			"name": "Insurance Analytics Azure/pcDimDataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_POL_TRN_ALL_STG_VW",
						"type": "DatasetReference"
					},
					"name": "polTrnAllStg"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_POLICY",
						"type": "DatasetReference"
					},
					"name": "dimPolicy"
				},
				{
					"dataset": {
						"referenceName": "ds_dw_dim_location",
						"type": "DatasetReference"
					},
					"name": "dimLocation"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_AGENCY",
						"type": "DatasetReference"
					},
					"name": "dimAgency"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_AGENT",
						"type": "DatasetReference"
					},
					"name": "dimAgent"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_NAMED_INSURED",
						"type": "DatasetReference"
					},
					"name": "dimNamedInsured"
				},
				{
					"dataset": {
						"referenceName": "DIM_ACCOUNT",
						"type": "DatasetReference"
					},
					"name": "dimAccount"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_COVERAGE",
						"type": "DatasetReference"
					},
					"name": "dimCoverage"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_DATE",
						"type": "DatasetReference"
					},
					"name": "dimDate"
				},
				{
					"dataset": {
						"referenceName": "DS_AZSQL_ORGANIZATION",
						"type": "DatasetReference"
					},
					"name": "dimOrganization"
				},
				{
					"dataset": {
						"referenceName": "DS_DW_DIM_PRODUCT",
						"type": "DatasetReference"
					},
					"name": "dimProduct"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_MONTH",
						"type": "DatasetReference"
					},
					"name": "dimMonth"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_DW_FACT_PREMIUM_TRANSACTION",
						"type": "DatasetReference"
					},
					"name": "factPremiumTransaction"
				}
			],
			"transformations": [
				{
					"name": "joinPolTrnAllStgtrnsAndOrganization"
				},
				{
					"name": "joinPolTrnAllStgtrnsAndOrganizationAndProduct"
				},
				{
					"name": "joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicy"
				},
				{
					"name": "joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocation"
				},
				{
					"name": "joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgent"
				},
				{
					"name": "joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgentAndAgency"
				},
				{
					"name": "joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgentAndAgencyAndNamedInsured"
				},
				{
					"name": "joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgentAndAgencyAndNamedInsuredAndAccount"
				},
				{
					"name": "joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgentAndAgencyAndNamedInsuredAndAccountAndDate"
				},
				{
					"name": "joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgentAndAgencyAndNamedInsuredAndAccountAndDateAndCoverage"
				},
				{
					"name": "MonthID"
				},
				{
					"name": "columnTransformations"
				},
				{
					"name": "polTrnAllStgtrns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as long,",
				"          TRANSACTION_PRO_DATE as timestamp,",
				"          TRANSACTION_TYPE_CODE as string,",
				"          TRANSACTION_CODE as string,",
				"          WRITTEN_PREMIUM_AMT as decimal(18,2),",
				"          CHARGE_TYPECODE as string,",
				"          TOTALPREMIUMRPT as decimal(18,2),",
				"          TOTALREPORTEDPREMIUM as decimal(18,2),",
				"          PCTL_TYPECODE as string,",
				"          TAX_AMOUNT as decimal(18,2),",
				"          FEE_AMOUNT as decimal(18,2),",
				"          SURCHARGE_AMOUNT as decimal(18,2),",
				"          PREM_BASIS_AMT as decimal(18,0),",
				"          AMOUNT as decimal(18,0),",
				"          ACTUALAMOUNT as decimal(18,0),",
				"          TRANSACTION_AMOUNT as decimal(18,2),",
				"          ACCTG_PRD_ID as integer,",
				"          TRANS_EFF_DATE as timestamp,",
				"          TRANS_EXP_DATE as timestamp,",
				"          RISK_TYPE_CODE as string,",
				"          PREM_FULLY_EARNED_FL as string,",
				"          CURRENCY_CODE as string,",
				"          INFORCE_PREM_AMOUNT as decimal(18,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> polTrnAllStg",
				"source(output(",
				"          POLICY_ID as integer,",
				"          SOURCE as string,",
				"          LAST_STATUS_ID as integer,",
				"          LAST_STATUS_PROC_DTS as timestamp,",
				"          LAST_STATUS_EFF_DATE as timestamp,",
				"          POLICY_KEY as string,",
				"          POLICY_NO as string,",
				"          POL_EFF_DATE as timestamp,",
				"          POL_EXP_DATE as timestamp,",
				"          ORIG_EFF_DATE as timestamp,",
				"          POL_YEAR as integer,",
				"          POL_FORM_CODE as string,",
				"          PRIM_STATE_CODE as string,",
				"          POL_TERM as string,",
				"          SIC_CODE as string,",
				"          NEW_BUS_FL as string,",
				"          ENTITY_TYPE_CODE as string,",
				"          BILL_PLAN_CODE as string,",
				"          PAY_PLAN_CODE as string,",
				"          AUDIT_PLAN_CODE as string,",
				"          ELECT_FUNDS_TFR_FL as string,",
				"          CLAIMS_MADE_FL as string,",
				"          RETRO_FL as string,",
				"          UNDERWRITER_CODE as string,",
				"          END_EFF_DATE as timestamp,",
				"          END_EXP_DATE as timestamp,",
				"          MOSTRECENTMODEL as boolean,",
				"          JOB_CREATETIME as timestamp,",
				"          JOB_REJECTREASONTEXT as string,",
				"          JOB_JOBNUMBER as string,",
				"          JOB_SUBMISSIONDATE as timestamp,",
				"          JOB_UPDATEUSERID as integer,",
				"          ISSUEDATE as timestamp,",
				"          CANCELLATIONDATE as timestamp,",
				"          HASAPPROVALORREJECTION as boolean,",
				"          UWISSUE_SHORTDESCRIPTION as string,",
				"          POLICY_STATUS_ID as integer,",
				"          POL_PERIOD_STATUS as integer,",
				"          BRANCHNAME as string,",
				"          UPDATE_USER_ID as integer,",
				"          UPDATE_USER as string,",
				"          JOB_RENEWALCODE as integer,",
				"          POLICYTYPE as integer,",
				"          POLICYSUFFIX as string,",
				"          ACCOUNTNUMBER as string,",
				"          UNDERWRITERGROUPTYPE as integer,",
				"          UNDERWRITINGGROUPNAME as integer,",
				"          RETENTION_TYPE as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FL as string,",
				"          JOB_RENEWALCODE_DESCRIPTION as string,",
				"          POL_PERIOD_STATUS_DESCRIPTION as string,",
				"          POLICYTYPE_DESCRIPTION as string,",
				"          UNDERWRITINGGROUPNAME_DESCRIPTION as string,",
				"          UNDERWRITERGROUPTYPE_DESCRIPTION as string,",
				"          POL_STATUS_DESCRIPTION as string,",
				"          ACCOUNTNAME as string,",
				"          POLICY_STATUS_DESC as string,",
				"          POLICY_REASON_DESC as string,",
				"          POLICY_SNAPSHOT_FLAG as string,",
				"          PRIMIUM_STATE_DESCRIPTION as string,",
				"          UNDERWRITER_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimPolicy",
				"source(output(",
				"          LOCATION_ID as integer,",
				"          LOCATION_KEY as string,",
				"          ETL_END_EFF_DATE as timestamp,",
				"          ETL_END_EXP_DATE as timestamp,",
				"          END_EFF_DATE as timestamp,",
				"          END_EXP_DATE as timestamp,",
				"          SOURCE as string,",
				"          LOCATION_NO as string,",
				"          STREET_1_NAME as string,",
				"          STREET_2_NAME as string,",
				"          STREET_3_NAME as string,",
				"          COUNTRY_CODE as string,",
				"          COUNTRY_TEXT as string,",
				"          REGION_CODE as string,",
				"          REGION_TEXT as string,",
				"          CITY_NAME as string,",
				"          POSTAL_CODE as string,",
				"          COUNTY_NAME as string,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimLocation",
				"source(output(",
				"          AGENCY_ID as integer,",
				"          AGENCY_KEY as string,",
				"          SOURCE as string,",
				"          AGENCY_CODE as string,",
				"          AGENCY_NAME as string,",
				"          AGENCY_ADDRESS_1 as string,",
				"          AGENCY_ADDRESS_2 as string,",
				"          AGENCY_ADDRESS_3 as string,",
				"          AGENCY_CITY as string,",
				"          AGENCY_STATE_CODE as string,",
				"          AGENCY_STATE_CODE_DESCRIPTION as string,",
				"          AGENCY_ZIP_CODE as string,",
				"          AGENCY_PHONE_NUMBER as string,",
				"          AGENCY_APPT_DATE as date,",
				"          AGENCY_TERM_DATE as date,",
				"          AGENCY_STATUS_CODE as string,",
				"          MANAGER_NAME as string,",
				"          REP_CODE as string,",
				"          REGION_CODE as string,",
				"          AGENCY_LIC_NUMBER as string,",
				"          AGENCY_TAX_ID as string,",
				"          ETL_ROW_EFF_DATETIMESTAMP as timestamp,",
				"          ETL_ROW_EXP_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ORGANIZATION_TYPE as integer,",
				"          ORGANIZATION_TYPE_DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimAgency",
				"source(output(",
				"          AGENT_ID as integer,",
				"          AGENT_KEY as string,",
				"          SOURCE as string,",
				"          AGENT_NAME as string,",
				"          AGENT_CODE as string,",
				"          AGENT_ADDRESS_1 as string,",
				"          AGENT_ADDRESS_2 as string,",
				"          AGENT_ADDRESS_3 as string,",
				"          AGENT_CITY as string,",
				"          AGENT_STATE_CODE as string,",
				"          AGENT_STATE_CODE_DESCRIPTION as string,",
				"          AGENT_ZIP_CODE as string,",
				"          AGENT_PHONE_NUMBER as string,",
				"          AGENT_APPT_DATE as date,",
				"          AGENT_TERM_DATE as date,",
				"          AGENT_STATUS_CODE as string,",
				"          MANAGER_NAME as string,",
				"          REP_CODE as string,",
				"          REGION_CODE as string,",
				"          AGENT_LIC_NUMBER as string,",
				"          AGENT_TAX_ID as string,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          PRODUCERGROUP_NAME as string,",
				"          BRANCHNAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimAgent",
				"source(output(",
				"          NAMED_INSURED_ID as integer,",
				"          NAMED_INSURED_KEY as string,",
				"          ETL_END_EFF_DTS as timestamp,",
				"          ETL_END_EXP_DTS as timestamp,",
				"          POLICY_KEY as string,",
				"          SOURCE as string,",
				"          MAILING_ADDRESS_1 as string,",
				"          MAILING_ADDRESS_2 as string,",
				"          MAILING_ADDRESS_3 as string,",
				"          MAILING_CITY as string,",
				"          MAILING_STATE_CODE as string,",
				"          MAILING_ZIP_CODE as string,",
				"          PRIM_INSURED_FL as string,",
				"          INSURED_NAME as string,",
				"          EMAILADDRESS2 as string,",
				"          EMAILADDRESS1 as string,",
				"          HOMEPHONE as string,",
				"          PRIMARYPHONE as integer,",
				"          CELLPHONE as string,",
				"          WORKPHONE as string,",
				"          ETL_ACTIVE_FL as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          NAMED_INSURED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimNamedInsured",
				"source(output(",
				"          ACCOUNT_ID as integer,",
				"          SOURCE as string,",
				"          ACCOUNT_KEY as string,",
				"          ACCOUNT_BASE_ID as integer,",
				"          ACCOUNT_NO as string,",
				"          ACCOUNT_NAME as string,",
				"          MAILING_ADDRESS_1 as string,",
				"          MAILING_ADDRESS_2 as string,",
				"          MAILING_ADDRESS_3 as string,",
				"          MAILING_CITY as string,",
				"          MAILING_STATE_CODE as string,",
				"          MAILING_STATE_SHORT_TEXT as string,",
				"          MAILING_STATE_LONG_TEXT as string,",
				"          MAILING_ZIP_CODE as string,",
				"          ACCOUNTORGTYPE as integer,",
				"          ACCOUNTSTATUS as integer,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ACCOUNTORGTYPE_DESCRIPTION as string,",
				"          ACCOUNTSTATUS_DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimAccount",
				"source(output(",
				"          COVERAGE_ID as integer,",
				"          COVERAGE_KEY as string,",
				"          ETL_ROW_EFF_DATETIMESTAMP as timestamp,",
				"          ETL_ROW_EXP_DATETIMESTAMP as timestamp,",
				"          ROW_PROC_DATETIMESTAMP as timestamp,",
				"          SOURCE as string,",
				"          COVERAGE_PART_CODE as string,",
				"          COVERAGE_PART_CODE_DESCRIPTION as string,",
				"          COVERAGE_CODE as string,",
				"          COVERAGE_CODE_DESCRIPTION as string,",
				"          ETL_CURR_ROW_FLAG as string,",
				"          ETL_LATE_ARRIVING_FLAG as string,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          COVERAGE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimCoverage",
				"source(output(",
				"          DATE_ID as integer,",
				"          Date as timestamp,",
				"          FullDate as string,",
				"          DAY_OF_MONTH as integer,",
				"          DAYName as string,",
				"          DAY_OF_WEEK as string,",
				"          YEAR as string,",
				"          MONTH as integer,",
				"          MONTH_NAME as string,",
				"          WEEK_OF_YEAR as integer,",
				"          DAY_OF_YEAR as integer,",
				"          Quarter as string,",
				"          MonthYear as string,",
				"          MMYYYY as string,",
				"          YYYYMM as string,",
				"          LASTDAYOFMONTH as string,",
				"          LASTDAYOFYEAR as string,",
				"          LASTDAYOFQUARTER as string,",
				"          YearName as string,",
				"          FirstDayOfMonth as string,",
				"          FirstDayOfQuater as string,",
				"          FirstDayOfYear as string,",
				"          MonthOfQuarter as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimDate",
				"source(output(",
				"          ORG_ID as integer,",
				"          SOURCE as string,",
				"          MASTER_CO_CD as string,",
				"          MASTER_CO_CD_DESC as string,",
				"          POL_CO_CD as string,",
				"          POL_CO_CD_DESC as string,",
				"          BRANCH_OFC_CD as string,",
				"          PROFIT_CTR_CD as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_TIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          UWCOMPANYNAME_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimOrganization",
				"source(output(",
				"          PRODUCT_ID as integer,",
				"          SOURCE as string,",
				"          LOB_CODE as string,",
				"          LOB_CODE_DESC as string,",
				"          LINE_DIV_CODE as string,",
				"          LINE_DIV_CODE_DESC as string,",
				"          PRODUCT_CODE as string,",
				"          PROG_CD as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimProduct",
				"source(output(",
				"          MONTH_ID as integer,",
				"          MONTH_OFFSET_NUMBER as string,",
				"          Month as string,",
				"          MonthName as string,",
				"          QUARTER as string,",
				"          Year as string,",
				"          MonthYear as string,",
				"          MMYYYY as integer,",
				"          YearName as string,",
				"          MonthOfQuarter as string,",
				"          MONTH_END_DATE as string,",
				"          MONTH_BEGIN_DATE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimMonth",
				"polTrnAllStgtrns, dimOrganization join(ID == ORG_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPolTrnAllStgtrnsAndOrganization",
				"joinPolTrnAllStgtrnsAndOrganization, dimProduct join(ID == PRODUCT_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPolTrnAllStgtrnsAndOrganizationAndProduct",
				"joinPolTrnAllStgtrnsAndOrganizationAndProduct, dimPolicy join(ID == POLICY_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicy",
				"joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicy, dimLocation join(ID == LOCATION_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocation",
				"joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocation, dimAgent join(ID == AGENT_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgent",
				"joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgent, dimAgency join(ID == AGENCY_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgentAndAgency",
				"joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgentAndAgency, dimNamedInsured join(ID == NAMED_INSURED_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgentAndAgencyAndNamedInsured",
				"joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgentAndAgencyAndNamedInsured, dimAccount join(ID == ACCOUNT_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgentAndAgencyAndNamedInsuredAndAccount",
				"joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgentAndAgencyAndNamedInsuredAndAccount, dimDate join(d_trans_eff == DATE_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgentAndAgencyAndNamedInsuredAndAccountAndDate",
				"joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgentAndAgencyAndNamedInsuredAndAccountAndDate, dimCoverage join(ID == COVERAGE_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgentAndAgencyAndNamedInsuredAndAccountAndDateAndCoverage",
				"dimMonth derive(MONTH_ID = toString(MONTH_ID)) ~> MonthID",
				"joinPolTrnAllStgtrnsAndOrganizationAndProductAndPolicyAndLocationAndAgentAndAgencyAndNamedInsuredAndAccountAndDateAndCoverage derive(TGT_TRANSACTION_PROC_DT_ID = toInteger(toString(TRANSACTION_PRO_DATE,'yyyyMMdd')),",
				"          TGT_TRANSACTION_EFF_DT_ID = toInteger(toString(TRANS_EFF_DATE,'YYYYMMDD')),",
				"          TGT_TRANSACTION_EXP_DT_ID = toInteger(toString(TRANS_EXP_DATE,'YYYYMMDD')),",
				"          TGT_SOURCE = 'PC',",
				"          TGT_ETL_ACTIVE_FLAG = 'Y',",
				"          TGT_ETL_ADD_DATETIMESTAMP = currentTimestamp(),",
				"          TGT_ETL_LAST_UPDATE_DATETIMESTAMP = currentTimestamp()) ~> columnTransformations",
				"polTrnAllStg derive(d_trans_eff = toInteger(toString(TRANS_EFF_DATE, 'yyyyMMdd'))) ~> polTrnAllStgtrns",
				"columnTransformations sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PREMIUM_TRANSACTION_ID as integer,",
				"          ORG_ID as integer,",
				"          PRODUCT_ID as integer,",
				"          POLICY_ID as integer,",
				"          LOC_ID as integer,",
				"          COVG_ID as integer,",
				"          AGENT_ID as integer,",
				"          AGENCY_ID as integer,",
				"          PRIM_NAMED_INSURED_ID as integer,",
				"          ACCT_ID as integer,",
				"          DATE_ID as integer,",
				"          MONTH_ID as integer,",
				"          ALT_PREMIUM_TRANSACTION_ID as integer,",
				"          REC_TYPE_ID as integer,",
				"          ACCTG_PRD_ID as integer,",
				"          TRANSACTION_PROC_DT_ID as integer,",
				"          TRANSACTION_EFF_DT_ID as integer,",
				"          TRANSACTION_EXP_DT_ID as integer,",
				"          TRANSACTION_PROC_DATETIMESTAMP as timestamp,",
				"          RISK_TYPE_CD as string,",
				"          SOURCE as string,",
				"          TRANSACTION_TYPE_CD as string,",
				"          TRANSACTION_CD as string,",
				"          TRANSACTION_SEQ as integer,",
				"          CURRENCY_CD as string,",
				"          TRANSACTION_AMOUNT as integer,",
				"          TRANSACTION_ALLOC_CD as string,",
				"          WRITTEN_PREMIUM_AMOUNT as integer,",
				"          INFORCE_PREMIUM_AMOUNT as integer,",
				"          TAX_AMOUNT as integer,",
				"          FEE_AMOUNT as integer,",
				"          SURCHARGE_AMOUNT as integer,",
				"          COMMISSION_AMOUNT as integer,",
				"          COMMISSION_PERCENT as integer,",
				"          PREMIUM_FULLY_EARNED_FLAG as string,",
				"          ESTIMATED_PREMIUM_AMOUNT as integer,",
				"          REPORTED_PREMIUM_AMOUNT as integer,",
				"          AUDIT_PREMIUM_AMOUNT as integer,",
				"          PREMIUM_BASIS_AMOUNT as integer,",
				"          AUDITABLE_FLAG as string,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          TOTALPREMIUMRPT as decimal(19,2),",
				"          TOTALREPORTEDPREMIUM as decimal(19,2),",
				"          POLICY_STATUS_DESC_EXT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ORG_ID,",
				"          PRODUCT_ID,",
				"          POLICY_ID,",
				"          LOC_ID = LOCATION_ID,",
				"          COVG_ID = COVERAGE_ID,",
				"          AGENT_ID,",
				"          AGENCY_ID,",
				"          PRIM_NAMED_INSURED_ID = NAMED_INSURED_ID,",
				"          ACCT_ID = ACCOUNT_ID,",
				"          DATE_ID,",
				"          MONTH_ID = DATE_ID,",
				"          ACCTG_PRD_ID,",
				"          TRANSACTION_TYPE_CD = TRANSACTION_TYPE_CODE,",
				"          TRANSACTION_CD = TRANSACTION_CODE,",
				"          TRANSACTION_AMOUNT,",
				"          TRANSACTION_ALLOC_CD = TRANSACTION_CODE,",
				"          WRITTEN_PREMIUM_AMOUNT = WRITTEN_PREMIUM_AMT,",
				"          INFORCE_PREMIUM_AMOUNT = INFORCE_PREM_AMOUNT,",
				"          TAX_AMOUNT,",
				"          FEE_AMOUNT,",
				"          SURCHARGE_AMOUNT,",
				"          PREMIUM_FULLY_EARNED_FLAG = PREM_FULLY_EARNED_FL,",
				"          PREMIUM_BASIS_AMOUNT = PREM_BASIS_AMT,",
				"          TOTALPREMIUMRPT,",
				"          TOTALREPORTEDPREMIUM,",
				"          POLICY_STATUS_DESC_EXT = POLICY_STATUS_DESC,",
				"          ALT_PREMIUM_TRANSACTION_ID = POLICY_ID,",
				"          TRANSACTION_PROC_DT_ID = TGT_TRANSACTION_PROC_DT_ID,",
				"          TRANSACTION_EFF_DT_ID = TGT_TRANSACTION_EFF_DT_ID,",
				"          TRANSACTION_EXP_DT_ID = TGT_TRANSACTION_EXP_DT_ID,",
				"          TRANSACTION_PROC_DATETIMESTAMP = TRANSACTION_PRO_DATE,",
				"          CURRENCY_CD = CURRENCY_CODE,",
				"          TOTALPREMIUMRPT,",
				"          TOTALREPORTEDPREMIUM,",
				"          ETL_ACTIVE_FLAG = TGT_ETL_ACTIVE_FLAG,",
				"          ETL_ADD_DATETIMESTAMP = TGT_ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = TGT_ETL_LAST_UPDATE_DATETIMESTAMP",
				"     )) ~> factPremiumTransaction"
			]
		}
	}
}