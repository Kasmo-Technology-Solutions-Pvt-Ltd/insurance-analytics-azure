{
	"name": "dimDocument",
	"properties": {
		"folder": {
			"name": "Insurance Analytics Azure/ccDimDataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_CC_DOCUMENT",
						"type": "DatasetReference"
					},
					"name": "ccDocument"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_CLAIM",
						"type": "DatasetReference"
					},
					"name": "ccClaim"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_CONTACT",
						"type": "DatasetReference"
					},
					"name": "ccContact"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_ADDRESS",
						"type": "DatasetReference"
					},
					"name": "ccAddress"
				},
				{
					"dataset": {
						"referenceName": "DS_CCTL_CLAIMSTATE",
						"type": "DatasetReference"
					},
					"name": "cctlClaimstate"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_EXPOSURE",
						"type": "DatasetReference"
					},
					"name": "ccExposure"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_CLAIMCONTACT",
						"type": "DatasetReference"
					},
					"name": "ccClaimContact"
				},
				{
					"dataset": {
						"referenceName": "DS_DW_DIM_DOCUMENT",
						"type": "DatasetReference"
					},
					"name": "tgtDimDocument"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_DW_DIM_DOCUMENT",
						"type": "DatasetReference"
					},
					"name": "ccDimDocument"
				},
				{
					"dataset": {
						"referenceName": "DS_DW_DIM_DOCUMENT",
						"type": "DatasetReference"
					},
					"name": "updateCcDimDocument"
				}
			],
			"transformations": [
				{
					"name": "joinDocumentAndClaim"
				},
				{
					"name": "joinDocumentAndClaimAndClaimContact"
				},
				{
					"name": "joinDocumentAndClaimAndClaimContactAndContact"
				},
				{
					"name": "joinDocumentAndClaimAndClaimContactAndContactAndAddress"
				},
				{
					"name": "joinDocumentAndClaimAndClaimContactAndContactAndAddressAndClaimstate"
				},
				{
					"name": "joinDocumentAndClaimAndClaimContactAndContactAndAddressAndClaimstateAndExposure"
				},
				{
					"name": "srcClmnTransormations"
				},
				{
					"name": "srcHashKey"
				},
				{
					"name": "tgtHashKey"
				},
				{
					"name": "lookupKeyColumn"
				},
				{
					"name": "update"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Retired as long,",
				"          MimeType as string,",
				"          Type as integer,",
				"          Author as string,",
				"          MatterID as long,",
				"          PublicID as string,",
				"          Obsolete as boolean,",
				"          AuthorDenorm as string,",
				"          ClaimContactID as long,",
				"          ArchivePartition as long,",
				"          Inbound as boolean,",
				"          CreateUserID as long,",
				"          ExposureID as long,",
				"          DocumentIdentifier as string,",
				"          ID as long,",
				"          BeanVersion as integer,",
				"          Recipient as string,",
				"          NameDenorm as string,",
				"          UpdateUserID as long,",
				"          DocUID as string,",
				"          Description as string,",
				"          DMS as boolean,",
				"          ClaimID as long,",
				"          LoadCommandID as long,",
				"          DateCreated as timestamp,",
				"          SecurityType as integer,",
				"          UpdateTime as timestamp,",
				"          PendingDocUID as string,",
				"          Name as string,",
				"          Status as integer,",
				"          Section as integer,",
				"          DateModified as timestamp,",
				"          CreateTime as timestamp,",
				"          Language as integer,",
				"          DocumentIdentifierDenorm as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccDocument",
				"source(output(",
				"          HazardousWaste as boolean,",
				"          SubrogationStatus as integer,",
				"          MMIdate as timestamp,",
				"          ReinsuranceReportable as boolean,",
				"          EmpSentMPNNotice as timestamp,",
				"          InsurerSentMPNNotice as timestamp,",
				"          SIEscalateSIU as integer,",
				"          StateFileNumber as string,",
				"          BeanVersion as integer,",
				"          StorageLocationState as integer,",
				"          Currency as integer,",
				"          Weather as integer,",
				"          SIEscalateSIUdate as timestamp,",
				"          LockingColumn as integer,",
				"          ReportedDate as timestamp,",
				"          PurgeDate as timestamp,",
				"          LargeLossNotificationStatus as integer,",
				"          OtherRecovStatus as integer,",
				"          SalvageStatus as integer,",
				"          LossLocationID as long,",
				"          SIUStatus as integer,",
				"          StorageCategory as integer,",
				"          JurisdictionState as integer,",
				"          ISOReceiveDate as timestamp,",
				"          FaultRating as integer,",
				"          PolicyID as long,",
				"          LossType as integer,",
				"          CloseDate as timestamp,",
				"          EmploymentInjury as boolean,",
				"          StorageType as integer,",
				"          DateFormRetByEmp as timestamp,",
				"          LocationOfTheft as integer,",
				"          ClosedOutcome as integer,",
				"          AssignmentDate as timestamp,",
				"          PreviousUserID as long,",
				"          ClaimTier as integer,",
				"          ReopenedReason as integer,",
				"          EmployerValidityReason as string,",
				"          AssignedByUserID as long,",
				"          PublicID as string,",
				"          LitigationStatus as integer,",
				"          DateEligibleForArchive as timestamp,",
				"          FlaggedReason as string,",
				"          LossCause as integer,",
				"          LossDate as timestamp,",
				"          InjuredRegularJob as boolean,",
				"          ClaimantDenormID as long,",
				"          Segment as integer,",
				"          ISOStatus as integer,",
				"          StorageVolumes as string,",
				"          AssignedGroupID as long,",
				"          UpdateUserID as long,",
				"          AssignedQueueID as long,",
				"          ExposureBegan as timestamp,",
				"          SIScore as integer,",
				"          Mold as boolean,",
				"          WorkloadUpdated as timestamp,",
				"          Strategy as integer,",
				"          CurrentConditions as boolean,",
				"          UpdateTime as timestamp,",
				"          LocationCodeID as long,",
				"          PTPinMPN as boolean,",
				"          HospitalDate as timestamp,",
				"          SupplementalWorkloadWeight as integer,",
				"          FurtherTreatment as boolean,",
				"          SafetyEquipUsed as boolean,",
				"          FlaggedDate as timestamp,",
				"          ReOpenDate as timestamp,",
				"          CreateTime as timestamp,",
				"          StateAckNumber as string,",
				"          StorageDate as timestamp,",
				"          LossLocationCode as string,",
				"          AgencyId as string,",
				"          Fault as decimal(4,1),",
				"          StatuteDate as timestamp,",
				"          ValidationLevel as integer,",
				"          ModifiedDutyAvail as boolean,",
				"          Retired as long,",
				"          HospitalDays as integer,",
				"          ExposureEnded as timestamp,",
				"          DateRptdToEmployer as timestamp,",
				"          DrugsInvolved as integer,",
				"          ISOKnown as boolean,",
				"          ComputerSecurity as boolean,",
				"          InjuredOnPremises as boolean,",
				"          ExaminationDate as timestamp,",
				"          DateRptdToInsured as timestamp,",
				"          AssignedUserID as long,",
				"          ReportedByType as integer,",
				"          ID as long,",
				"          CatastropheID as long,",
				"          DeathDate as timestamp,",
				"          PreviousQueueID as long,",
				"          SafetyEquipProv as boolean,",
				"          TreatedPatientBfr as boolean,",
				"          HowReported as integer,",
				"          DateCompDcsnDue as timestamp,",
				"          InsuredPremises as boolean,",
				"          MainContactType as integer,",
				"          StorageBarCodeNum as string,",
				"          ClaimNumber as string,",
				"          DiagnosticCnsistnt as boolean,",
				"          DateCompDcsnMade as timestamp,",
				"          DateFormGivenToEmp as timestamp,",
				"          Flagged as integer,",
				"          SIULifeCycleState as integer,",
				"          ClaimWorkCompID as long,",
				"          LOBCode as integer,",
				"          FireDeptInfo as string,",
				"          PreexDisblty as boolean,",
				"          InjWkrInMPN as timestamp,",
				"          IncidentReport as boolean,",
				"          BenefitsStatusDcsn as boolean,",
				"          ArchivePartition as long,",
				"          ConcurrentEmp as integer,",
				"          CreateUserID as long,",
				"          ShowMedicalFirstInfo as integer,",
				"          ISOSendDate as timestamp,",
				"          EmploymentDataID as long,",
				"          ISOEnabled as boolean,",
				"          FirstNoticeSuit as boolean,",
				"          AssignmentStatus as integer,",
				"          Description as string,",
				"          CoverageInQuestion as boolean,",
				"          ReinsuranceFlaggedStatus as integer,",
				"          AccidentType as integer,",
				"          LoadCommandID as long,",
				"          WorkloadWeight as integer,",
				"          PoliceDeptInfo as string,",
				"          ClaimSource as integer,",
				"          DateRptdToAgent as timestamp,",
				"          ManifestationDate as timestamp,",
				"          Progress as integer,",
				"          PermissionRequired as integer,",
				"          State as integer,",
				"          EmpQusValidity as integer,",
				"          StorageBoxNum as string,",
				"          ClaimantRprtdDate as timestamp,",
				"          InsuredDenormID as long,",
				"          WeatherRelated as boolean,",
				"          PreviousGroupID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccClaim",
				"source(output(",
				"          PostalCodeDenorm as string,",
				"          Retired as long,",
				"          AddressLine2Kanji as string,",
				"          PublicID as string,",
				"          BatchGeocode as boolean,",
				"          Admin as boolean,",
				"          ArchivePartition as long,",
				"          CreateUserID as long,",
				"          CEDEX as boolean,",
				"          ID as long,",
				"          CityKanji as string,",
				"          BeanVersion as integer,",
				"          AddressBookUID as string,",
				"          UpdateUserID as long,",
				"          Description as string,",
				"          LoadCommandID as long,",
				"          UpdateTime as timestamp,",
				"          Country as integer,",
				"          City as string,",
				"          Subtype as integer,",
				"          ValidUntil as timestamp,",
				"          County as string,",
				"          PostalCode as string,",
				"          State as integer,",
				"          CityDenorm as string,",
				"          AddressLine1Kanji as string,",
				"          CreateTime as timestamp,",
				"          GeocodeStatus as integer,",
				"          AddressType as integer,",
				"          CEDEXBureau as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          AddressLine3 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccContact",
				"source(output(",
				"          ValidationLevel as integer,",
				"          LawFirmSpecialty as integer,",
				"          Retired as long,",
				"          FirstNameKanji as string,",
				"          EmailAddress2 as string,",
				"          SpecialtyType as integer,",
				"          EmailAddress1 as string,",
				"          LastName as string,",
				"          FaxPhoneExtension as string,",
				"          AutoSync as integer,",
				"          Admin as boolean,",
				"          HomePhone as string,",
				"          TaxID as string,",
				"          W9ReceivedDate as timestamp,",
				"          LicenseNumber as string,",
				"          PrimaryPhone as integer,",
				"          AdjudicatorLicense as string,",
				"          AutoRepairLicense as string,",
				"          AutoTowingLicense as string,",
				"          ID as long,",
				"          W9Received as boolean,",
				"          BeanVersion as integer,",
				"          PrimaryLocale as integer,",
				"          Score as integer,",
				"          NameDenorm as string,",
				"          AddressBookUID as string,",
				"          PrimaryLanguage as integer,",
				"          AttorneySpecialty as integer,",
				"          DoctorSpecialty as integer,",
				"          Suffix as integer,",
				"          FormerName as string,",
				"          NumDependents as integer,",
				"          Prefix as integer,",
				"          NameKanji as string,",
				"          HomePhoneCountry as integer,",
				"          TaxFilingStatus as integer,",
				"          Notes as string,",
				"          PolicySystemId as string,",
				"          DateOfBirth as timestamp,",
				"          Subtype as integer,",
				"          CellPhoneCountry as integer,",
				"          AdjudicativeDomain as integer,",
				"          CellPhone as string,",
				"          MedicalOrgSpecialty as integer,",
				"          Gender as integer,",
				"          FaxPhoneCountry as integer,",
				"          FaxPhone as string,",
				"          VendorNumber as string,",
				"          AttorneyLicense as string,",
				"          CellPhoneExtension as string,",
				"          VendorType as integer,",
				"          TaxStatus as integer,",
				"          EmployeeNumber as string,",
				"          WorkPhone as string,",
				"          NumDependentsU25 as integer,",
				"          HomePhoneExtension as string,",
				"          Particle as string,",
				"          PublicID as string,",
				"          ArchivePartition as long,",
				"          W9ValidTo as timestamp,",
				"          PendingLinkMessage as boolean,",
				"          CreateUserID as long,",
				"          Occupation as string,",
				"          LoadRelatedContacts as boolean,",
				"          VenueType as integer,",
				"          FirstName as string,",
				"          LastNameDenorm as string,",
				"          MaritalStatus as integer,",
				"          NumDependentsU18 as integer,",
				"          PrimaryAddressID as long,",
				"          FirstNameDenorm as string,",
				"          WorkPhoneCountry as integer,",
				"          UpdateUserID as long,",
				"          WorkPhoneExtension as string,",
				"          LoadCommandID as long,",
				"          UpdateTime as timestamp,",
				"          LicenseState as integer,",
				"          Name as string,",
				"          PreferredCurrency as integer,",
				"          MedicalLicense as string,",
				"          MiddleName as string,",
				"          LastNameKanji as string,",
				"          WithholdingRate as decimal(4,1),",
				"          OrganizationType as integer,",
				"          CreateTime as timestamp,",
				"          W9ValidFrom as timestamp,",
				"          Preferred as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccAddress",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> cctlClaimstate",
				"source(output(",
				"          IncidentID as long,",
				"          SSDIEligible as boolean,",
				"          StatLineID as long,",
				"          CompBenefitsID as long,",
				"          DisBenefitsID as long,",
				"          CoverageID as long,",
				"          BeanVersion as integer,",
				"          IncidentLimitReached as boolean,",
				"          LostPropertyType as integer,",
				"          SSDIBenefitsID as long,",
				"          WCPreexDisbltyInfo as string,",
				"          LossParty as integer,",
				"          JurisdictionState as integer,",
				"          ClaimantType as integer,",
				"          WageStmtSent as timestamp,",
				"          ISOReceiveDate as timestamp,",
				"          LossCategory as integer,",
				"          OtherCoverageInfo as string,",
				"          SettleDate as timestamp,",
				"          CloseDate as timestamp,",
				"          ClosedOutcome as integer,",
				"          AssignmentDate as timestamp,",
				"          ContactPermitted as boolean,",
				"          PreviousUserID as long,",
				"          ReopenedReason as integer,",
				"          AssignedByUserID as long,",
				"          PublicID as string,",
				"          ClaimOrder as integer,",
				"          NewEmpDataID as long,",
				"          ClaimantDenormID as long,",
				"          WCPreexDisblty as boolean,",
				"          Segment as integer,",
				"          ISOStatus as integer,",
				"          CoverageSubType as integer,",
				"          PrimaryCoverage as integer,",
				"          AssignedGroupID as long,",
				"          DepreciatedValue as decimal(18,2),",
				"          UpdateUserID as long,",
				"          AssignedQueueID as long,",
				"          DeathBenefitsID as long,",
				"          ClaimID as long,",
				"          WorkloadUpdated as timestamp,",
				"          PIPDeathBenefitsID as long,",
				"          Strategy as integer,",
				"          CurrentConditions as boolean,",
				"          UpdateTime as timestamp,",
				"          LifePensionBenefitsID as long,",
				"          BreakIn as boolean,",
				"          TempLocationID as long,",
				"          SecurityLevel as integer,",
				"          HospitalDate as timestamp,",
				"          SupplementalWorkloadWeight as integer,",
				"          FurtherTreatment as boolean,",
				"          PriorEmpDataID as long,",
				"          ReOpenDate as timestamp,",
				"          SSBenefit as boolean,",
				"          CreateTime as timestamp,",
				"          TTDBenefitsID as long,",
				"          WageStmtRecd as timestamp,",
				"          OtherCoverage as boolean,",
				"          ValidationLevel as integer,",
				"          Retired as long,",
				"          HospitalDays as integer,",
				"          ISOKnown as boolean,",
				"          ExaminationDate as timestamp,",
				"          DaysInWeek as integer,",
				"          ExposureLimitReached as boolean,",
				"          AssignedUserID as long,",
				"          ID as long,",
				"          RIAgreementGroupID as long,",
				"          PreviousQueueID as long,",
				"          TreatedPatientBfr as boolean,",
				"          PPDBenefitsID as long,",
				"          AverageWeeklyWages as decimal(18,2),",
				"          WageBenefit as boolean,",
				"          PIPNonMedAggLimitReached as boolean,",
				"          WCBenefit as boolean,",
				"          PTDBenefitsID as long,",
				"          WCBenefitsID as long,",
				"          RSBenefitsID as long,",
				"          TPDBenefitsID as long,",
				"          DiagnosticCnsistnt as boolean,",
				"          PIPVocBenefitsID as long,",
				"          MetricLimitGeneration as integer,",
				"          Locked as boolean,",
				"          OtherCovgChoice as integer,",
				"          SettleMethod as integer,",
				"          PIPPersonAggLimitReached as boolean,",
				"          ReplacementValue as decimal(18,2),",
				"          ArchivePartition as long,",
				"          CreateUserID as long,",
				"          RIGroupSetExternally as boolean,",
				"          ISOSendDate as timestamp,",
				"          AssignmentStatus as integer,",
				"          PIPESSLimitReached as boolean,",
				"          LoadCommandID as long,",
				"          WorkloadWeight as integer,",
				"          Progress as integer,",
				"          VocBenefitsID as long,",
				"          State as integer,",
				"          ExposureType as integer,",
				"          ExposureTier as integer,",
				"          LastDayWorked as timestamp,",
				"          PIPClaimAggLimitReached as boolean,",
				"          PreviousGroupID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccExposure",
				"source(output(",
				"          ContactValidTo as timestamp,",
				"          Service as string,",
				"          Retired as long,",
				"          ContactProhibited as boolean,",
				"          EssentialServiceType as integer,",
				"          PublicID as string,",
				"          ArchivePartition as long,",
				"          ClaimantFlag as boolean,",
				"          CreateUserID as long,",
				"          ID as long,",
				"          BeanVersion as integer,",
				"          UpdateUserID as long,",
				"          ClaimID as long,",
				"          LoadCommandID as long,",
				"          ContactID as long,",
				"          PersonFirstNameDenorm as string,",
				"          UpdateTime as timestamp,",
				"          BenefitEndReasonType as integer,",
				"          ContactValidFrom as timestamp,",
				"          PersonLastNameDenorm as string,",
				"          BenefitEndDate as timestamp,",
				"          DependentType as integer,",
				"          BenefitEndReason as string,",
				"          ContactNameDenorm as string,",
				"          PolicyID as long,",
				"          CreateTime as timestamp,",
				"          ProviderType as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccClaimContact",
				"source(output(",
				"          DOCUMENT_ID as integer,",
				"          CLAIM_IDENTIFIER as integer,",
				"          CLAIM_FOLDER_LABEL_NAME as string,",
				"          DOCUMENT_AUTHOR as string,",
				"          DOCUMENT_CREATED_DATE as timestamp,",
				"          DOCUMENT_RECIPIENT as string,",
				"          SOURCE as string,",
				"          CLAIM_NUMBER_EXT as string,",
				"          DOCUMENT_NAME as string,",
				"          DOCUMENT_KEY as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ACTIVE_FLAG as string,",
				"          CLAIM_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tgtDimDocument",
				"ccDocument, ccClaim join(ccDocument@ID == ccClaim@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDocumentAndClaim",
				"joinDocumentAndClaim, ccClaimContact join(ccDocument@ID == ccClaimContact@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDocumentAndClaimAndClaimContact",
				"joinDocumentAndClaimAndClaimContact, ccContact join(ccDocument@ID == ccContact@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDocumentAndClaimAndClaimContactAndContact",
				"joinDocumentAndClaimAndClaimContactAndContact, ccAddress join(ccDocument@ID == ccAddress@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDocumentAndClaimAndClaimContactAndContactAndAddress",
				"joinDocumentAndClaimAndClaimContactAndContactAndAddress, cctlClaimstate join(ccDocument@ID == cctlClaimstate@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDocumentAndClaimAndClaimContactAndContactAndAddressAndClaimstate",
				"joinDocumentAndClaimAndClaimContactAndContactAndAddressAndClaimstate, ccExposure join(ccDocument@ID == ccExposure@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDocumentAndClaimAndClaimContactAndContactAndAddressAndClaimstateAndExposure",
				"joinDocumentAndClaimAndClaimContactAndContactAndAddressAndClaimstateAndExposure derive(SRC_SOURCE = toString('CC'),",
				"          SRC_DOCUMENT_KEY = toString(concat('CC-',ccDocument@PublicID)),",
				"          ETL_ADD_DATETIMESTAMP = currentTimestamp(),",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_ACTIVE_FLAG = 'Y',",
				"          SRC_CLAIMID = toInteger(ccDocument@ClaimID),",
				"          SRC_DOCUMENT_NAME = toString(ccDocument@Name),",
				"          SRC_DOCUMENT_DATECREATED = toString(DateCreated),",
				"          SRC_DOCUMENT_RECIPIENT = toString(Recipient),",
				"          SRC_DOCUMENT_UPDATETIME = toString(ccDocument@UpdateTime),",
				"          SRC_CLAIMNUMBER = toInteger(ClaimNumber),",
				"          SRC_DOCUMENT_AUTHOR = toString(AuthorDenorm)) ~> srcClmnTransormations",
				"srcClmnTransormations derive(srcHashKey = md5(SRC_SOURCE,SRC_DOCUMENT_KEY,SRC_DOCUMENT_NAME,SRC_DOCUMENT_AUTHOR,SRC_DOCUMENT_RECIPIENT)) ~> srcHashKey",
				"tgtDimDocument derive(tgtHashKey = md5(SOURCE,DOCUMENT_KEY,DOCUMENT_NAME,DOCUMENT_AUTHOR,DOCUMENT_RECIPIENT)) ~> tgtHashKey",
				"srcHashKey, tgtHashKey lookup(SRC_DOCUMENT_KEY == DOCUMENT_KEY,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'both')~> lookupKeyColumn",
				"lookupKeyColumn split(isNull(DOCUMENT_KEY),",
				"     !isNull(DOCUMENT_KEY)&&notEquals(srcHashKey,tgtHashKey),",
				"     disjoint: false) ~> update@(INSERT, UPDATE, NOUPDATE)",
				"update@UPDATE alterRow(updateIf(true())) ~> alterRow1",
				"update@INSERT sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          DOCUMENT_ID as integer,",
				"          CLAIM_IDENTIFIER as integer,",
				"          CLAIM_FOLDER_LABEL_NAME as string,",
				"          DOCUMENT_AUTHOR as string,",
				"          DOCUMENT_CREATED_DATE as timestamp,",
				"          DOCUMENT_RECIPIENT as string,",
				"          SOURCE as string,",
				"          CLAIM_NUMBER_EXT as string,",
				"          DOCUMENT_NAME as string,",
				"          DOCUMENT_KEY as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ACTIVE_FLAG as string,",
				"          CLAIM_ID as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CLAIM_IDENTIFIER = SRC_CLAIMID,",
				"          DOCUMENT_AUTHOR = SRC_DOCUMENT_AUTHOR,",
				"          DOCUMENT_CREATED_DATE,",
				"          DOCUMENT_RECIPIENT = SRC_DOCUMENT_RECIPIENT,",
				"          SOURCE = SRC_SOURCE,",
				"          DOCUMENT_NAME,",
				"          DOCUMENT_KEY,",
				"          ETL_ADD_DATETIMESTAMP = update@INSERT@ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = update@INSERT@ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ACTIVE_FLAG,",
				"          CLAIM_ID = SRC_CLAIMID",
				"     )) ~> ccDimDocument",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          DOCUMENT_ID as integer,",
				"          CLAIM_IDENTIFIER as integer,",
				"          CLAIM_FOLDER_LABEL_NAME as string,",
				"          DOCUMENT_AUTHOR as string,",
				"          DOCUMENT_CREATED_DATE as timestamp,",
				"          DOCUMENT_RECIPIENT as string,",
				"          SOURCE as string,",
				"          CLAIM_NUMBER_EXT as string,",
				"          DOCUMENT_NAME as string,",
				"          DOCUMENT_KEY as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ACTIVE_FLAG as string,",
				"          CLAIM_ID as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['DOCUMENT_KEY'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CLAIM_IDENTIFIER = SRC_CLAIMID,",
				"          DOCUMENT_AUTHOR = SRC_DOCUMENT_AUTHOR,",
				"          DOCUMENT_CREATED_DATE = SRC_DOCUMENT_DATECREATED,",
				"          DOCUMENT_RECIPIENT = SRC_DOCUMENT_RECIPIENT,",
				"          SOURCE = SRC_SOURCE,",
				"          DOCUMENT_NAME = SRC_DOCUMENT_NAME,",
				"          DOCUMENT_KEY = SRC_DOCUMENT_KEY,",
				"          ETL_ADD_DATETIMESTAMP = update@UPDATE@ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = update@UPDATE@ETL_ADD_DATETIMESTAMP,",
				"          ACTIVE_FLAG,",
				"          CLAIM_ID = SRC_CLAIMID",
				"     )) ~> updateCcDimDocument"
			]
		}
	}
}