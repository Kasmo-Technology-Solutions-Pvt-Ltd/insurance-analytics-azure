{
	"name": "dimPolicy",
	"properties": {
		"folder": {
			"name": "Insurance Analytics Azure/pcDimDataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_PC_EFFECTIVEDATEDFIELDS",
						"type": "DatasetReference"
					},
					"name": "pcEffectivedatefields"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_POLICYPERIOD",
						"type": "DatasetReference"
					},
					"name": "pcPolicyPeriod"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_JOB",
						"type": "DatasetReference"
					},
					"name": "pcJob"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_POLICY",
						"type": "DatasetReference"
					},
					"name": "pcPoicy"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_ACCOUNT",
						"type": "DatasetReference"
					},
					"name": "pcAccount"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_POLICYUSERROLEASSIGN",
						"type": "DatasetReference"
					},
					"name": "pcPolicyUserRoleAssign"
				},
				{
					"dataset": {
						"referenceName": "DS_PCTL_POLICYPERIODSTATUS",
						"type": "DatasetReference"
					},
					"name": "pctlPolicyPeriodStatus"
				},
				{
					"dataset": {
						"referenceName": "PC_PAYMENTPLANSUMMARY",
						"type": "DatasetReference"
					},
					"name": "pcPaymentPlanSummary"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_POLICYTERM",
						"type": "DatasetReference"
					},
					"name": "pcPolicyTerm"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_UWISSUE",
						"type": "DatasetReference"
					},
					"name": "pcUwissue"
				},
				{
					"dataset": {
						"referenceName": "DS_Pctl_job",
						"type": "DatasetReference"
					},
					"name": "pctlJob"
				},
				{
					"dataset": {
						"referenceName": "DS_PCTL_USERROLE",
						"type": "DatasetReference"
					},
					"name": "pctlUserRole"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_USER",
						"type": "DatasetReference"
					},
					"name": "pcUser"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_CONTACT",
						"type": "DatasetReference"
					},
					"name": "pcContact"
				},
				{
					"dataset": {
						"referenceName": "policyperiodfilter",
						"type": "DatasetReference"
					},
					"name": "policyperiodfilter"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_POLICY",
						"type": "DatasetReference"
					},
					"name": "tgtDimPolicy"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_DIM_POLICY",
						"type": "DatasetReference"
					},
					"name": "insertedRows"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_POLICY",
						"type": "DatasetReference"
					},
					"name": "updatedRows"
				}
			],
			"transformations": [
				{
					"name": "joinEffectivedatefieldsAndFilterForPolicyperiodAnd"
				},
				{
					"name": "joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJob"
				},
				{
					"name": "joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicy"
				},
				{
					"name": "joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccount"
				},
				{
					"name": "joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssign"
				},
				{
					"name": "joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatus"
				},
				{
					"name": "joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummary"
				},
				{
					"name": "joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTerm"
				},
				{
					"name": "joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTermAndpcUwissue"
				},
				{
					"name": "joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTermAndpcUwissueAndpctlJob"
				},
				{
					"name": "joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTermAndpcUwissueAndpctlJobAndTypecodeFilter"
				},
				{
					"name": "joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTermAndpcUwissueAndpctlJobAndTypecodeFilterAndpcUser"
				},
				{
					"name": "joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTermAndpcUwissueAndpctlJobAndTypecodeFilterAndpcUserAndpcContact"
				},
				{
					"name": "srcColumnTransformations"
				},
				{
					"name": "filterRows"
				},
				{
					"name": "aggregatetogetminvalue"
				},
				{
					"name": "FilterForPolicyperiod"
				},
				{
					"name": "FilterTypecode"
				},
				{
					"name": "filterCondition"
				},
				{
					"name": "srcHashKey"
				},
				{
					"name": "lookupKeyColumn"
				},
				{
					"name": "TgtHashKey"
				},
				{
					"name": "update"
				},
				{
					"name": "updateCondition"
				},
				{
					"name": "srcClmnTypeConversions"
				},
				{
					"name": "TypecodeFilter"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CreateUserID as long,",
				"          PolicyAddress as long,",
				"          PublicID as string,",
				"          SecondaryNamedInsured as long,",
				"          BillingContact as long,",
				"          ArchivePartition as long,",
				"          BeanVersion as integer,",
				"          CreateTime as timestamp,",
				"          ChangeType as integer,",
				"          BasedOnID as long,",
				"          UpdateUserID as long,",
				"          FixedID as long,",
				"          OfferingCode as string,",
				"          PrimaryNamedInsured as long,",
				"          EffectiveDate as timestamp,",
				"          UpdateTime as timestamp,",
				"          PrimaryLocation as long,",
				"          ProducerCodeID as long,",
				"          ID as long,",
				"          BranchID as long,",
				"          ExpirationDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcEffectivedatefields",
				"source(output(",
				"          BasedOnDate as timestamp,",
				"          ValidQuote as boolean,",
				"          TotalPremiumRPT as decimal(18,2),",
				"          TotalPremiumRPT_cur as integer,",
				"          MinimumPremium as long,",
				"          Locked as boolean,",
				"          EditEffectiveDate as timestamp,",
				"          ValidReinsurance as boolean,",
				"          SeriesCheckingPatternCode as string,",
				"          ArchiveState as integer,",
				"          ArchiveSchemaInfo as long,",
				"          PNIContactDenorm as long,",
				"          LocationAutoNumberSeq as long,",
				"          EditLocked as boolean,",
				"          UpdateTime as timestamp,",
				"          RateAsOfDate as timestamp,",
				"          JobID as long,",
				"          ID as long,",
				"          SingleCheckingPatternCode as string,",
				"          UWCompany as long,",
				"          BillingMethod as integer,",
				"          PeriodID as long,",
				"          TransactionPremiumRPT as decimal(18,2),",
				"          AssignedRisk as boolean,",
				"          ExcludeReason as string,",
				"          TransactionPremiumRPT_cur as integer,",
				"          CreateUserID as long,",
				"          ArchiveFailureID as long,",
				"          AllowGapsBefore as boolean,",
				"          QuoteHidden as boolean,",
				"          BeanVersion as integer,",
				"          FailedOOSEValidation as boolean,",
				"          Retired as long,",
				"          BranchName as string,",
				"          Preempted as boolean,",
				"          UpdateUserID as long,",
				"          FuturePeriods as boolean,",
				"          PrimaryInsuredNameDenorm as string,",
				"          CancellationDate as timestamp,",
				"          ModelNumber as integer,",
				"          TemporaryBranch as boolean,",
				"          PrimaryInsuredName as string,",
				"          Segment as integer,",
				"          TermNumber as integer,",
				"          DepositOverridePct as decimal(12,3),",
				"          PolicyTermID as long,",
				"          WaiveDepositChange as boolean,",
				"          PeriodStart as timestamp,",
				"          ProducerCodeOfRecordID as long,",
				"          DoNotPurge as boolean,",
				"          PublicID as string,",
				"          AltBillingAccountNumber as string,",
				"          TotalCostRPT as decimal(18,2),",
				"          WrittenDate as timestamp,",
				"          TotalCostRPT_cur as integer,",
				"          CreateTime as timestamp,",
				"          MostRecentModel as boolean,",
				"          PolicyID as long,",
				"          ExcludedFromArchive as boolean,",
				"          AllocationOfRemainder as integer,",
				"          OverrideBillingAllocation as boolean,",
				"          ArchiveFailureDetailsID as long,",
				"          ModelDate as timestamp,",
				"          InvoiceStreamCode as string,",
				"          ModelNumberIndex as string,",
				"          BaseState as integer,",
				"          MostRecentModelIndex as string,",
				"          ArchivePartition as long,",
				"          CustomBilling as boolean,",
				"          TransactionCostRPT as decimal(18,2),",
				"          BranchNumber as integer,",
				"          FailedOOSEEvaluation as boolean,",
				"          DepositCollected as decimal(18,2),",
				"          TransactionCostRPT_cur as integer,",
				"          DepositCollected_cur as integer,",
				"          BasedOnID as long,",
				"          LockingColumn as integer,",
				"          RefundCalcMethod as integer,",
				"          ArchiveDate as timestamp,",
				"          BillImmediatelyPercentage as decimal(4,1),",
				"          Status as integer,",
				"          DepositAmount as decimal(18,2),",
				"          DepositAmount_cur as integer,",
				"          PeriodEnd as timestamp,",
				"          PreferredCoverageCurrency as integer,",
				"          PolicyNumber as string,",
				"          PreferredSettlementCurrency as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcPolicyPeriod",
				"source(output(",
				"          NotTakenNotifDate as timestamp,",
				"          ArchiveState as integer,",
				"          ArchiveSchemaInfo as long,",
				"          UpdateTime as timestamp,",
				"          NotificationDate as timestamp,",
				"          ID as long,",
				"          Source as integer,",
				"          ExcludeReason as string,",
				"          NextPurgeCheckDate as timestamp,",
				"          CreateUserID as long,",
				"          ArchiveFailureID as long,",
				"          RejectReason as integer,",
				"          CloseDate as timestamp,",
				"          BeanVersion as integer,",
				"          Retired as long,",
				"          CancelReasonCode as integer,",
				"          ChangePolicyNumber as boolean,",
				"          UpdateUserID as long,",
				"          PrimaryInsuredNameDenorm as string,",
				"          NonRenewalNotifDate as timestamp,",
				"          PrimaryInsuredName as string,",
				"          QuoteType as integer,",
				"          DateQuoteNeeded as timestamp,",
				"          PublicID as string,",
				"          SideBySide as boolean,",
				"          JobNumber as string,",
				"          RewriteType as integer,",
				"          CreateTime as timestamp,",
				"          AuditInformationID as long,",
				"          PolicyID as long,",
				"          ExcludedFromArchive as boolean,",
				"          RejectReasonText as string,",
				"          ArchiveFailureDetailsID as long,",
				"          RescindNotificationDate as timestamp,",
				"          PurgeStatus as integer,",
				"          InitialNotificationDate as timestamp,",
				"          LastNotifiedCancellationDate as timestamp,",
				"          JobGroup as long,",
				"          CancelProcessDate as timestamp,",
				"          RenewalCode as integer,",
				"          EscalateAfterHoldReleased as boolean,",
				"          ReinstateCode as integer,",
				"          RenewalNotifDate as timestamp,",
				"          PaymentReceived as decimal(18,2),",
				"          ArchivePartition as long,",
				"          PaymentReceived_cur as integer,",
				"          NotificationAckDate as timestamp,",
				"          ArchiveDate as timestamp,",
				"          BindOption as integer,",
				"          NonRenewalCode as integer,",
				"          Subtype as integer,",
				"          SubmissionDate as timestamp,",
				"          Description as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcJob",
				"source(output(",
				"          DoNotPurge as boolean,",
				"          PublicID as string,",
				"          PriorPremiums as decimal(18,2),",
				"          IssueDate as timestamp,",
				"          PriorPremiums_cur as integer,",
				"          MovedPolicySourceAccountID as long,",
				"          AccountID as long,",
				"          CreateTime as timestamp,",
				"          LossHistoryType as integer,",
				"          ExcludedFromArchive as boolean,",
				"          ArchiveState as integer,",
				"          ArchiveSchemaInfo as long,",
				"          ArchiveFailureDetailsID as long,",
				"          PackageRisk as integer,",
				"          NumPriorLosses as integer,",
				"          UpdateTime as timestamp,",
				"          PrimaryLanguage as integer,",
				"          DoNotArchive as boolean,",
				"          ID as long,",
				"          PrimaryLocale as integer,",
				"          ProductCode as string,",
				"          ExcludeReason as string,",
				"          CreateUserID as long,",
				"          ArchiveFailureID as long,",
				"          OriginalEffectiveDate as timestamp,",
				"          BeanVersion as integer,",
				"          ArchivePartition as long,",
				"          Retired as long,",
				"          UpdateUserID as long,",
				"          PriorTotalIncurred as decimal(18,2),",
				"          ArchiveDate as timestamp,",
				"          PriorTotalIncurred_cur as integer,",
				"          ProducerCodeOfServiceID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcPoicy",
				"source(output(",
				"          BusOpsDesc as string,",
				"          PublicID as string,",
				"          CreateTime as timestamp,",
				"          LinkContacts as boolean,",
				"          AccountOrgType as integer,",
				"          LocationAutoNumberSeq as long,",
				"          UpdateTime as timestamp,",
				"          ServiceTier as integer,",
				"          PrimaryLanguage as integer,",
				"          ID as long,",
				"          StateBureauNum as string,",
				"          PrimaryLocale as integer,",
				"          AccountStatus as integer,",
				"          Frozen as boolean,",
				"          CreateUserID as long,",
				"          YearBusinessStarted as integer,",
				"          IndustryCodeID as long,",
				"          BeanVersion as integer,",
				"          Retired as long,",
				"          LockingColumn as integer,",
				"          OtherOrgTypeDescription as string,",
				"          UpdateUserID as long,",
				"          AccountNumberDenorm as string,",
				"          AccountNumber as string,",
				"          PreferredCoverageCurrency as integer,",
				"          PreferredSettlementCurrency as integer,",
				"          OriginationDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcAccount",
				"source(output(",
				"          CreateUserID as long,",
				"          PreviousGroupID as long,",
				"          PublicID as string,",
				"          Active as boolean,",
				"          CloseDate as timestamp,",
				"          BeanVersion as integer,",
				"          CreateTime as timestamp,",
				"          Retired as long,",
				"          AssignedByUserID as long,",
				"          AssignedGroupID as long,",
				"          PolicyID as long,",
				"          UpdateUserID as long,",
				"          Comments as string,",
				"          AssignedUserID as long,",
				"          PreviousQueueID as long,",
				"          UpdateTime as timestamp,",
				"          Role as integer,",
				"          ID as long,",
				"          AssignmentDate as timestamp,",
				"          PreviousUserID as long,",
				"          AssignedQueueID as long,",
				"          AssignmentStatus as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcPolicyUserRoleAssign",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pctlPolicyPeriodStatus",
				"source(output(",
				"          Notes as string,",
				"          CreateUserID as long,",
				"          PublicID as string,",
				"          DownPayment as decimal(18,2),",
				"          Total as decimal(18,2),",
				"          Total_cur as integer,",
				"          DownPayment_cur as integer,",
				"          BeanVersion as integer,",
				"          ArchivePartition as long,",
				"          CreateTime as timestamp,",
				"          Retired as long,",
				"          PaymentPlanType as integer,",
				"          Name as string,",
				"          UpdateUserID as long,",
				"          InvoiceFrequency as integer,",
				"          ReportingPatternCode as string,",
				"          PolicyPeriod as long,",
				"          UpdateTime as timestamp,",
				"          BillingId as string,",
				"          Installment as decimal(18,2),",
				"          Installment_cur as integer,",
				"          ID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcPaymentPlanSummary",
				"source(output(",
				"          PublicID as string,",
				"          CreateTime as timestamp,",
				"          MostRecentTerm as boolean,",
				"          PolicyID as long,",
				"          GenerateReinsurables as boolean,",
				"          UpdateTime as timestamp,",
				"          FinalAuditOption as integer,",
				"          ID as long,",
				"          DepositReleased as boolean,",
				"          TotalEstimatedPremium as decimal(18,2),",
				"          TotalEstimatedPremium_cur as integer,",
				"          TotalReportedPremium as decimal(18,2),",
				"          TotalReportedPremium_cur as integer,",
				"          CreateUserID as long,",
				"          NonRenewReason as integer,",
				"          LastRestoreDate as timestamp,",
				"          NextArchiveCheckDate as timestamp,",
				"          BeanVersion as integer,",
				"          Retired as long,",
				"          PreRenewalDirection as integer,",
				"          DaysReported as integer,",
				"          PolicyTermArchiveState as integer,",
				"          UpdateUserID as long,",
				"          NextRenewalCheckDate as timestamp,",
				"          AffinityGroupID as long,",
				"          DepositAmount as decimal(18,2),",
				"          DepositAmount_cur as integer,",
				"          NonRenewAddExplanation as string,",
				"          Bound as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcPolicyTerm",
				"source(output(",
				"          LongDescription as string,",
				"          ShortDescription as string,",
				"          PublicID as string,",
				"          Active as boolean,",
				"          HasApprovalOrRejection as boolean,",
				"          CreateTime as timestamp,",
				"          ApprovalValue as string,",
				"          FixedID as long,",
				"          ApprovalDurationType as integer,",
				"          ApprovingUser as long,",
				"          EffectiveDate as timestamp,",
				"          UpdateTime as timestamp,",
				"          ApprovalBlockingPoint as integer,",
				"          CanEditApprovalBeforeBind as boolean,",
				"          ID as long,",
				"          ExpirationDate as timestamp,",
				"          CreateUserID as long,",
				"          IssueKey as string,",
				"          ArchivePartition as long,",
				"          BeanVersion as integer,",
				"          ChangeType as integer,",
				"          BasedOnID as long,",
				"          IssueTypeID as long,",
				"          UpdateUserID as long,",
				"          Valuee as string,",
				"          AutomaticApprovalCause as string,",
				"          BranchID as long,",
				"          ApprovalInvalidFrom as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcUwissue",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pctlJob",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pctlUserRole",
				"source(output(",
				"          LoadCommandID as long,",
				"          PublicID as string,",
				"          UserType as integer,",
				"          UseProducerCodeSecurity as boolean,",
				"          UserSettingsID as long,",
				"          CreateTime as timestamp,",
				"          SessionTimeoutSecs as integer,",
				"          OrganizationID as long,",
				"          VacationStatus as integer,",
				"          Department as string,",
				"          ExternalUser as boolean,",
				"          UpdateTime as timestamp,",
				"          UseOrgAddress as boolean,",
				"          Language as integer,",
				"          ExperienceLevel as integer,",
				"          Locale as integer,",
				"          ID as long,",
				"          CreateUserID as long,",
				"          BeanVersion as integer,",
				"          DefaultPhoneCountry as integer,",
				"          Retired as long,",
				"          ValidationLevel as integer,",
				"          UpdateUserID as long,",
				"          CredentialID as long,",
				"          SystemUserType as integer,",
				"          DefaultCountry as integer,",
				"          TimeZone as integer,",
				"          ContactID as long,",
				"          JobTitle as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcUser",
				"source(output(",
				"          LoadCommandID as long,",
				"          Preferred as boolean,",
				"          VendorType as integer,",
				"          FaxPhoneCountry as integer,",
				"          Particle as string,",
				"          TaxID as string,",
				"          NameDenorm as string,",
				"          Name as string,",
				"          VendorNumber as string,",
				"          State as integer,",
				"          Prefix as integer,",
				"          Score as integer,",
				"          PreferredCurrency as integer,",
				"          LastNameKanji as string,",
				"          TaxFilingStatus as integer,",
				"          AccountHolderCount as integer,",
				"          Country as integer,",
				"          UpdateTime as timestamp,",
				"          AdjudicatorLicense as string,",
				"          ID as long,",
				"          WithholdingRate as decimal(4,1),",
				"          LastNameDenorm as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          CreateUserID as long,",
				"          ExternalID as string,",
				"          BeanVersion as integer,",
				"          VenueType as integer,",
				"          Retired as long,",
				"          ValidationLevel as integer,",
				"          PrimaryPhone as integer,",
				"          LastUpdateTime as timestamp,",
				"          ExternalVersion as integer,",
				"          UpdateUserID as long,",
				"          HomePhoneExtension as string,",
				"          FirstNameDenorm as string,",
				"          FirstName as string,",
				"          FirstNameKanji as string,",
				"          TemporaryLastUpdateTime as timestamp,",
				"          Gender as integer,",
				"          Notes as string,",
				"          NumDependentsU18 as integer,",
				"          PublicID as string,",
				"          HomePhoneCountry as integer,",
				"          CityKanjiDenorm as string,",
				"          CreateTime as timestamp,",
				"          LicenseNumber as string,",
				"          CellPhoneCountry as integer,",
				"          AutoSync as integer,",
				"          Occupation as string,",
				"          CellPhone as string,",
				"          PrimaryAddressID as long,",
				"          Suffix as integer,",
				"          AddressBookUID as string,",
				"          LoadRelatedContacts as boolean,",
				"          EmailAddress1 as string,",
				"          NumDependents as integer,",
				"          DateOfBirth as timestamp,",
				"          PrimaryLanguage as integer,",
				"          EmailAddress2 as string,",
				"          PrimaryLocale as integer,",
				"          TaxStatus as integer,",
				"          NumDependentsU25 as integer,",
				"          WorkPhoneExtension as string,",
				"          MaritalStatus as integer,",
				"          CityDenorm as string,",
				"          NameKanji as string,",
				"          FaxPhoneExtension as string,",
				"          HomePhone as string,",
				"          LicenseState as integer,",
				"          FaxPhone as string,",
				"          CellPhoneExtension as string,",
				"          PostalCodeDenorm as string,",
				"          EmployeeNumber as string,",
				"          WorkPhoneCountry as integer,",
				"          Subtype as integer,",
				"          PreferredSettlementCurrency as integer,",
				"          FormerName as string,",
				"          WorkPhone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcContact",
				"source(output(",
				"          BasedOnDate as timestamp,",
				"          ValidQuote as boolean,",
				"          TotalPremiumRPT as decimal(18,2),",
				"          TotalPremiumRPT_cur as integer,",
				"          MinimumPremium as long,",
				"          Locked as boolean,",
				"          EditEffectiveDate as timestamp,",
				"          ValidReinsurance as boolean,",
				"          SeriesCheckingPatternCode as string,",
				"          ArchiveState as integer,",
				"          ArchiveSchemaInfo as long,",
				"          PNIContactDenorm as long,",
				"          LocationAutoNumberSeq as long,",
				"          EditLocked as boolean,",
				"          UpdateTime as timestamp,",
				"          RateAsOfDate as timestamp,",
				"          JobID as long,",
				"          ID as long,",
				"          SingleCheckingPatternCode as string,",
				"          UWCompany as long,",
				"          BillingMethod as integer,",
				"          PeriodID as long,",
				"          TransactionPremiumRPT as decimal(18,2),",
				"          AssignedRisk as boolean,",
				"          ExcludeReason as string,",
				"          TransactionPremiumRPT_cur as integer,",
				"          CreateUserID as long,",
				"          ArchiveFailureID as long,",
				"          AllowGapsBefore as boolean,",
				"          QuoteHidden as boolean,",
				"          BeanVersion as integer,",
				"          FailedOOSEValidation as boolean,",
				"          Retired as long,",
				"          BranchName as string,",
				"          Preempted as boolean,",
				"          UpdateUserID as long,",
				"          FuturePeriods as boolean,",
				"          PrimaryInsuredNameDenorm as string,",
				"          CancellationDate as timestamp,",
				"          ModelNumber as integer,",
				"          TemporaryBranch as boolean,",
				"          PrimaryInsuredName as string,",
				"          Segment as integer,",
				"          TermNumber as integer,",
				"          DepositOverridePct as decimal(12,3),",
				"          PolicyTermID as long,",
				"          WaiveDepositChange as boolean,",
				"          PeriodStart as timestamp,",
				"          ProducerCodeOfRecordID as long,",
				"          DoNotPurge as boolean,",
				"          PublicID as string,",
				"          AltBillingAccountNumber as string,",
				"          TotalCostRPT as decimal(18,2),",
				"          WrittenDate as timestamp,",
				"          TotalCostRPT_cur as integer,",
				"          CreateTime as timestamp,",
				"          MostRecentModel as boolean,",
				"          PolicyID as long,",
				"          ExcludedFromArchive as boolean,",
				"          AllocationOfRemainder as integer,",
				"          OverrideBillingAllocation as boolean,",
				"          ArchiveFailureDetailsID as long,",
				"          ModelDate as timestamp,",
				"          InvoiceStreamCode as string,",
				"          ModelNumberIndex as string,",
				"          BaseState as integer,",
				"          MostRecentModelIndex as string,",
				"          ArchivePartition as long,",
				"          CustomBilling as boolean,",
				"          TransactionCostRPT as decimal(18,2),",
				"          BranchNumber as integer,",
				"          FailedOOSEEvaluation as boolean,",
				"          DepositCollected as decimal(18,2),",
				"          TransactionCostRPT_cur as integer,",
				"          DepositCollected_cur as integer,",
				"          BasedOnID as long,",
				"          LockingColumn as integer,",
				"          RefundCalcMethod as integer,",
				"          ArchiveDate as timestamp,",
				"          BillImmediatelyPercentage as decimal(4,1),",
				"          Status as integer,",
				"          DepositAmount as decimal(18,2),",
				"          DepositAmount_cur as integer,",
				"          PeriodEnd as timestamp,",
				"          PreferredCoverageCurrency as integer,",
				"          PolicyNumber as string,",
				"          PreferredSettlementCurrency as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> policyperiodfilter",
				"source(output(",
				"          POLICY_ID as integer,",
				"          SOURCE as string,",
				"          LAST_STATUS_ID as integer,",
				"          LAST_STATUS_PROC_DTS as timestamp,",
				"          LAST_STATUS_EFF_DATE as timestamp,",
				"          POLICY_KEY as string,",
				"          POLICY_NO as string,",
				"          POL_EFF_DATE as timestamp,",
				"          POL_EXP_DATE as timestamp,",
				"          ORIG_EFF_DATE as timestamp,",
				"          POL_YEAR as integer,",
				"          POL_FORM_CODE as string,",
				"          PRIM_STATE_CODE as string,",
				"          POL_TERM as string,",
				"          SIC_CODE as string,",
				"          NEW_BUS_FL as string,",
				"          ENTITY_TYPE_CODE as string,",
				"          BILL_PLAN_CODE as string,",
				"          PAY_PLAN_CODE as string,",
				"          AUDIT_PLAN_CODE as string,",
				"          ELECT_FUNDS_TFR_FL as string,",
				"          CLAIMS_MADE_FL as string,",
				"          RETRO_FL as string,",
				"          UNDERWRITER_CODE as string,",
				"          END_EFF_DATE as timestamp,",
				"          END_EXP_DATE as timestamp,",
				"          MOSTRECENTMODEL as boolean,",
				"          JOB_CREATETIME as timestamp,",
				"          JOB_REJECTREASONTEXT as string,",
				"          JOB_JOBNUMBER as string,",
				"          JOB_SUBMISSIONDATE as timestamp,",
				"          JOB_UPDATEUSERID as integer,",
				"          ISSUEDATE as timestamp,",
				"          CANCELLATIONDATE as timestamp,",
				"          HASAPPROVALORREJECTION as boolean,",
				"          UWISSUE_SHORTDESCRIPTION as string,",
				"          POLICY_STATUS_ID as integer,",
				"          POL_PERIOD_STATUS as integer,",
				"          BRANCHNAME as string,",
				"          UPDATE_USER_ID as integer,",
				"          UPDATE_USER as string,",
				"          JOB_RENEWALCODE as integer,",
				"          POLICYTYPE as integer,",
				"          POLICYSUFFIX as string,",
				"          ACCOUNTNUMBER as string,",
				"          UNDERWRITERGROUPTYPE as integer,",
				"          UNDERWRITINGGROUPNAME as integer,",
				"          RETENTION_TYPE as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FL as string,",
				"          JOB_RENEWALCODE_DESCRIPTION as string,",
				"          POL_PERIOD_STATUS_DESCRIPTION as string,",
				"          POLICYTYPE_DESCRIPTION as string,",
				"          UNDERWRITINGGROUPNAME_DESCRIPTION as string,",
				"          UNDERWRITERGROUPTYPE_DESCRIPTION as string,",
				"          POL_STATUS_DESCRIPTION as string,",
				"          ACCOUNTNAME as string,",
				"          POLICY_STATUS_DESC as string,",
				"          POLICY_REASON_DESC as string,",
				"          POLICY_SNAPSHOT_FLAG as string,",
				"          PRIMIUM_STATE_DESCRIPTION as string,",
				"          UNDERWRITER_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tgtDimPolicy",
				"pcEffectivedatefields, FilterForPolicyperiod join(BranchID == policyperiodfilter@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEffectivedatefieldsAndFilterForPolicyperiodAnd",
				"joinEffectivedatefieldsAndFilterForPolicyperiodAnd, pcJob join(JobID == pcJob@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJob",
				"joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJob, pcPoicy join(policyperiodfilter@PolicyID == pcPoicy@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicy",
				"joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicy, pcAccount join(AccountID == pcAccount@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccount",
				"joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccount, pcPolicyUserRoleAssign join(policyperiodfilter@PolicyID == pcPolicyUserRoleAssign@PolicyID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssign",
				"joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssign, pctlPolicyPeriodStatus join(Status == pctlPolicyPeriodStatus@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatus",
				"joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatus, pcPaymentPlanSummary join(policyperiodfilter@ID == PolicyPeriod,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummary",
				"joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummary, pcPolicyTerm join(pcPoicy@ID == pcPolicyTerm@PolicyID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTerm",
				"joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTerm, pcUwissue join(pcPoicy@PublicID == pcUwissue@PublicID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTermAndpcUwissue",
				"joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTermAndpcUwissue, pctlJob join(Subtype == pctlJob@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTermAndpcUwissueAndpctlJob",
				"joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTermAndpcUwissueAndpctlJob, TypecodeFilter join(Role == pctlUserRole@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTermAndpcUwissueAndpctlJobAndTypecodeFilter",
				"joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTermAndpcUwissueAndpctlJobAndTypecodeFilter, pcUser join(pcJob@UpdateUserID == pcUser@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTermAndpcUwissueAndpctlJobAndTypecodeFilterAndpcUser",
				"joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTermAndpcUwissueAndpctlJobAndTypecodeFilterAndpcUser, pcContact join(ContactID == pcContact@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTermAndpcUwissueAndpctlJobAndTypecodeFilterAndpcUserAndpcContact",
				"joinEffectivedatefieldsAndFilterForPolicyperiodAndpcJobAndpcPoicyAndpcAccountAndpcPolicyUserRoleAssignAndpctlPolicyPeriodStatusAndpcPaymentPlanSummaryAndpcPolicyTermAndpcUwissueAndpctlJobAndTypecodeFilterAndpcUserAndpcContact derive(RETENTION_TYPE = case(MostRecentModel==true()&&Status==9&&currentTimestamp()>NextRenewalCheckDate,'Policies available for renewal',case(MostRecentModel==true()&&Status==9&&currentTimestamp()>PeriodStart,'Policies Renewed',case(MostRecentModel==true()&&Status==9&&CancellationDate>=PeriodStart&&CancellationDate<=PeriodEnd,'Mid Term Cancellations',case(MostRecentModel==true()&&Status==10,'Non Renewal Policies',case(MostRecentModel==true()&&Status==11,'Not Taken Policies',''))))),",
				"          ETL_ADD_DATETIMESTAMP = currentTimestamp(),",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = currentTimestamp(),",
				"          ETL_ACTIVE_FL = 'Y',",
				"          JOB_RENEWALCODE_DESCRIPTION = pcJob@Description,",
				"          SOURCE = 'PC',",
				"          POLICY_KEY = concat('PC-',toString(PeriodID)),",
				"          POL_YEAR = year(IssueDate),",
				"          POL_TERM = toInteger(monthsBetween(PeriodEnd,PeriodStart)),",
				"          NEW_BUS_FL = case(TermNumber==1,'Y','N'),",
				"          END_EFF_DATE = case(isNull(pcEffectivedatefields@EffectiveDate),PeriodStart,pcEffectivedatefields@EffectiveDate),",
				"          END_EXP_DATE = case(isNull(pcEffectivedatefields@ExpirationDate),PeriodEnd,pcEffectivedatefields@ExpirationDate),",
				"          POLICY_NO = isInteger(PolicyNumber)) ~> srcColumnTransformations",
				"pcPolicyPeriod filter((Retired== 0 && Status == 9 && ModelNumberIndex =='1')) ~> filterRows",
				"filterRows aggregate(minID = min(ID)) ~> aggregatetogetminvalue",
				"policyperiodfilter, aggregatetogetminvalue lookup(ID == minID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> FilterForPolicyperiod",
				"pctlUserRole filter(TYPECODE=='Underwriter') ~> FilterTypecode",
				"srcColumnTransformations filter(pctlPolicyPeriodStatus@TYPECODE=='Bound'&&MostRecentTerm==true()&&Role==d_id&&pcPaymentPlanSummary@Retired==0) ~> filterCondition",
				"srcClmnTypeConversions derive(SrcHashKey = md5(SRC_SOURCE,SRC_POLICY_KEY,SRC_POLICY_NO,SRC_POL_TERM,SRC_NEW_BUS_FL,SRC_UNDERWRITER_CODE,SRC_MOSTRECENTMODEL,SRC_JOB_REJECTREASONTEXT,SRC_JOB_JOBNUMBER,SRC_JOB_UPDATEUSERID,SRC_HASAPPROVALORREJECTION,SRC_UWISSUE_SHORTDESCRIPTION,SRC_POL_PERIOD_STATUS,SRC_BRANCHNAME,SRC_UPDATE_USER,SRC_JOB_RENEWALCODE,SRC_POL_YEAR,SRC_JOB_RENEWALCODE_DESCRIPTION,SRC_POL_PERIOD_STATUS_DESCRIPTION,SRC_RETENTION_TYPE)) ~> srcHashKey",
				"srcHashKey, TgtHashKey lookup(SRC_POLICY_KEY != tgtDimPolicy@POLICY_KEY,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'both')~> lookupKeyColumn",
				"tgtDimPolicy derive(TgtHashKey = md5(toString(SOURCE),toString(POLICY_KEY),toString(POLICY_NO),toString(POL_TERM),toString(NEW_BUS_FL),toString(UNDERWRITER_CODE),toString(MOSTRECENTMODEL),toString(JOB_REJECTREASONTEXT),toString(JOB_JOBNUMBER),toInteger(JOB_UPDATEUSERID),toString(HASAPPROVALORREJECTION),toString(UWISSUE_SHORTDESCRIPTION),toInteger(POL_PERIOD_STATUS),toString(BRANCHNAME),toString(UPDATE_USER),toInteger(JOB_RENEWALCODE),toInteger(POL_YEAR),toString(JOB_RENEWALCODE_DESCRIPTION),toString(POL_PERIOD_STATUS_DESCRIPTION),toString(RETENTION_TYPE))) ~> TgtHashKey",
				"lookupKeyColumn split(isNull(POLICY_ID),",
				"     !isNull(POLICY_ID)&&notEquals(SrcHashKey,TgtHashKey),",
				"     disjoint: false) ~> update@(INSERT, UPDATE, NOUPDATE)",
				"update@UPDATE alterRow(updateIf(true())) ~> updateCondition",
				"filterCondition derive(SRC_SOURCE = toString(srcColumnTransformations@SOURCE),",
				"          SRC_POLICY_KEY = toString(POLICY_KEY),",
				"          SRC_POLICY_NO = toString(PolicyNumber),",
				"          SRC_POL_TERM = toString(POL_TERM),",
				"          SRC_NEW_BUS_FL = toString(NEW_BUS_FL),",
				"          SRC_UNDERWRITER_CODE = toInteger(pcUser@PublicID),",
				"          SRC_MOSTRECENTMODEL = toString(MostRecentModel),",
				"          SRC_JOB_REJECTREASONTEXT = toString(RejectReasonText),",
				"          SRC_JOB_JOBNUMBER = toString(JobNumber),",
				"          SRC_JOB_UPDATEUSERID = toInteger(pcJob@UpdateUserID),",
				"          SRC_HASAPPROVALORREJECTION = toString(HasApprovalOrRejection),",
				"          SRC_UWISSUE_SHORTDESCRIPTION = toString(ShortDescription),",
				"          SRC_POL_PERIOD_STATUS = toInteger(Status),",
				"          SRC_BRANCHNAME = toString(BranchName),",
				"          SRC_UPDATE_USER = toString(FirstName),",
				"          SRC_JOB_RENEWALCODE = toString(RenewalCode),",
				"          SRC_POL_YEAR = toInteger(POL_YEAR),",
				"          SRC_JOB_RENEWALCODE_DESCRIPTION = toString(pcJob@Description),",
				"          SRC_POL_PERIOD_STATUS_DESCRIPTION = toString(pctlPolicyPeriodStatus@NAME),",
				"          SRC_RETENTION_TYPE = toString(RETENTION_TYPE)) ~> srcClmnTypeConversions",
				"FilterTypecode derive(d_id = ID) ~> TypecodeFilter",
				"update@INSERT sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     input(",
				"          POLICY_ID as integer,",
				"          SOURCE as string,",
				"          LAST_STATUS_ID as integer,",
				"          LAST_STATUS_PROC_DTS as timestamp,",
				"          LAST_STATUS_EFF_DATE as timestamp,",
				"          POLICY_KEY as string,",
				"          POLICY_NO as string,",
				"          POL_EFF_DATE as timestamp,",
				"          POL_EXP_DATE as timestamp,",
				"          ORIG_EFF_DATE as timestamp,",
				"          POL_YEAR as integer,",
				"          POL_FORM_CODE as string,",
				"          PRIM_STATE_CODE as string,",
				"          POL_TERM as string,",
				"          SIC_CODE as string,",
				"          NEW_BUS_FL as string,",
				"          ENTITY_TYPE_CODE as string,",
				"          BILL_PLAN_CODE as string,",
				"          PAY_PLAN_CODE as string,",
				"          AUDIT_PLAN_CODE as string,",
				"          ELECT_FUNDS_TFR_FL as string,",
				"          CLAIMS_MADE_FL as string,",
				"          RETRO_FL as string,",
				"          UNDERWRITER_CODE as string,",
				"          END_EFF_DATE as timestamp,",
				"          END_EXP_DATE as timestamp,",
				"          MOSTRECENTMODEL as boolean,",
				"          JOB_CREATETIME as timestamp,",
				"          JOB_REJECTREASONTEXT as string,",
				"          JOB_JOBNUMBER as string,",
				"          JOB_SUBMISSIONDATE as timestamp,",
				"          JOB_UPDATEUSERID as integer,",
				"          ISSUEDATE as timestamp,",
				"          CANCELLATIONDATE as timestamp,",
				"          HASAPPROVALORREJECTION as boolean,",
				"          UWISSUE_SHORTDESCRIPTION as string,",
				"          POLICY_STATUS_ID as integer,",
				"          POL_PERIOD_STATUS as integer,",
				"          BRANCHNAME as string,",
				"          UPDATE_USER_ID as integer,",
				"          UPDATE_USER as string,",
				"          JOB_RENEWALCODE as integer,",
				"          POLICYTYPE as integer,",
				"          POLICYSUFFIX as string,",
				"          ACCOUNTNUMBER as string,",
				"          UNDERWRITERGROUPTYPE as integer,",
				"          UNDERWRITINGGROUPNAME as integer,",
				"          RETENTION_TYPE as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FL as string,",
				"          JOB_RENEWALCODE_DESCRIPTION as string,",
				"          POL_PERIOD_STATUS_DESCRIPTION as string,",
				"          POLICYTYPE_DESCRIPTION as string,",
				"          UNDERWRITINGGROUPNAME_DESCRIPTION as string,",
				"          UNDERWRITERGROUPTYPE_DESCRIPTION as string,",
				"          POL_STATUS_DESCRIPTION as string,",
				"          ACCOUNTNAME as string,",
				"          POLICY_STATUS_DESC as string,",
				"          POLICY_REASON_DESC as string,",
				"          POLICY_SNAPSHOT_FLAG as string,",
				"          PRIMIUM_STATE_DESCRIPTION as string,",
				"          UNDERWRITER_DESC as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SOURCE = SRC_SOURCE,",
				"          POLICY_KEY = SRC_POLICY_KEY,",
				"          POLICY_NO = SRC_POLICY_NO,",
				"          POL_EFF_DATE,",
				"          POL_EXP_DATE,",
				"          POL_YEAR = SRC_POL_YEAR,",
				"          POL_TERM = SRC_POL_TERM,",
				"          NEW_BUS_FL = SRC_NEW_BUS_FL,",
				"          UNDERWRITER_CODE = SRC_UNDERWRITER_CODE,",
				"          END_EFF_DATE = update@INSERT@END_EFF_DATE,",
				"          END_EXP_DATE = update@INSERT@END_EXP_DATE,",
				"          MOSTRECENTMODEL = SRC_MOSTRECENTMODEL,",
				"          JOB_CREATETIME,",
				"          JOB_REJECTREASONTEXT = SRC_JOB_REJECTREASONTEXT,",
				"          JOB_JOBNUMBER = SRC_JOB_JOBNUMBER,",
				"          JOB_SUBMISSIONDATE,",
				"          JOB_UPDATEUSERID = SRC_JOB_UPDATEUSERID,",
				"          ISSUEDATE = update@INSERT@IssueDate,",
				"          CANCELLATIONDATE = update@INSERT@CancellationDate,",
				"          HASAPPROVALORREJECTION = SRC_HASAPPROVALORREJECTION,",
				"          UWISSUE_SHORTDESCRIPTION = SRC_UWISSUE_SHORTDESCRIPTION,",
				"          BRANCHNAME = SRC_BRANCHNAME,",
				"          UPDATE_USER,",
				"          JOB_RENEWALCODE = SRC_JOB_RENEWALCODE,",
				"          RETENTION_TYPE = SRC_RETENTION_TYPE,",
				"          ETL_ADD_DATETIMESTAMP = update@INSERT@ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = update@INSERT@ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ETL_ACTIVE_FL = update@INSERT@ETL_ACTIVE_FL,",
				"          JOB_RENEWALCODE_DESCRIPTION = SRC_JOB_RENEWALCODE_DESCRIPTION,",
				"          POL_PERIOD_STATUS_DESCRIPTION,",
				"          POL_PERIOD_STATUS = SRC_POL_PERIOD_STATUS",
				"     )) ~> insertedRows",
				"updateCondition sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          POLICY_ID as integer,",
				"          SOURCE as string,",
				"          LAST_STATUS_ID as integer,",
				"          LAST_STATUS_PROC_DTS as timestamp,",
				"          LAST_STATUS_EFF_DATE as timestamp,",
				"          POLICY_KEY as string,",
				"          POLICY_NO as string,",
				"          POL_EFF_DATE as timestamp,",
				"          POL_EXP_DATE as timestamp,",
				"          ORIG_EFF_DATE as timestamp,",
				"          POL_YEAR as integer,",
				"          POL_FORM_CODE as string,",
				"          PRIM_STATE_CODE as string,",
				"          POL_TERM as string,",
				"          SIC_CODE as string,",
				"          NEW_BUS_FL as string,",
				"          ENTITY_TYPE_CODE as string,",
				"          BILL_PLAN_CODE as string,",
				"          PAY_PLAN_CODE as string,",
				"          AUDIT_PLAN_CODE as string,",
				"          ELECT_FUNDS_TFR_FL as string,",
				"          CLAIMS_MADE_FL as string,",
				"          RETRO_FL as string,",
				"          UNDERWRITER_CODE as string,",
				"          END_EFF_DATE as timestamp,",
				"          END_EXP_DATE as timestamp,",
				"          MOSTRECENTMODEL as boolean,",
				"          JOB_CREATETIME as timestamp,",
				"          JOB_REJECTREASONTEXT as string,",
				"          JOB_JOBNUMBER as string,",
				"          JOB_SUBMISSIONDATE as timestamp,",
				"          JOB_UPDATEUSERID as integer,",
				"          ISSUEDATE as timestamp,",
				"          CANCELLATIONDATE as timestamp,",
				"          HASAPPROVALORREJECTION as boolean,",
				"          UWISSUE_SHORTDESCRIPTION as string,",
				"          POLICY_STATUS_ID as integer,",
				"          POL_PERIOD_STATUS as integer,",
				"          BRANCHNAME as string,",
				"          UPDATE_USER_ID as integer,",
				"          UPDATE_USER as string,",
				"          JOB_RENEWALCODE as integer,",
				"          POLICYTYPE as integer,",
				"          POLICYSUFFIX as string,",
				"          ACCOUNTNUMBER as string,",
				"          UNDERWRITERGROUPTYPE as integer,",
				"          UNDERWRITINGGROUPNAME as integer,",
				"          RETENTION_TYPE as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FL as string,",
				"          JOB_RENEWALCODE_DESCRIPTION as string,",
				"          POL_PERIOD_STATUS_DESCRIPTION as string,",
				"          POLICYTYPE_DESCRIPTION as string,",
				"          UNDERWRITINGGROUPNAME_DESCRIPTION as string,",
				"          UNDERWRITERGROUPTYPE_DESCRIPTION as string,",
				"          POL_STATUS_DESCRIPTION as string,",
				"          ACCOUNTNAME as string,",
				"          POLICY_STATUS_DESC as string,",
				"          POLICY_REASON_DESC as string,",
				"          POLICY_SNAPSHOT_FLAG as string,",
				"          PRIMIUM_STATE_DESCRIPTION as string,",
				"          UNDERWRITER_DESC as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['POLICY_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          POLICY_KEY = SRC_POLICY_KEY,",
				"          POLICY_NO = SRC_POLICY_NO,",
				"          POL_EFF_DATE,",
				"          POL_EXP_DATE,",
				"          POL_YEAR = SRC_POL_YEAR,",
				"          POL_TERM = SRC_POL_TERM,",
				"          NEW_BUS_FL = SRC_NEW_BUS_FL,",
				"          UNDERWRITER_CODE = SRC_UNDERWRITER_CODE,",
				"          JOB_CREATETIME,",
				"          JOB_REJECTREASONTEXT = SRC_JOB_REJECTREASONTEXT,",
				"          JOB_JOBNUMBER = SRC_JOB_JOBNUMBER,",
				"          JOB_SUBMISSIONDATE,",
				"          JOB_UPDATEUSERID = SRC_JOB_UPDATEUSERID,",
				"          UWISSUE_SHORTDESCRIPTION = SRC_UWISSUE_SHORTDESCRIPTION,",
				"          POL_PERIOD_STATUS = SRC_POL_PERIOD_STATUS,",
				"          UPDATE_USER = SRC_UPDATE_USER,",
				"          JOB_RENEWALCODE = SRC_JOB_RENEWALCODE,",
				"          ETL_ACTIVE_FL = update@UPDATE@ETL_ACTIVE_FL,",
				"          ETL_ADD_DATETIMESTAMP = update@UPDATE@ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = update@UPDATE@ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          SOURCE = SRC_SOURCE,",
				"          JOB_RENEWALCODE_DESCRIPTION = SRC_JOB_RENEWALCODE_DESCRIPTION,",
				"          POL_PERIOD_STATUS_DESCRIPTION = SRC_POL_PERIOD_STATUS_DESCRIPTION,",
				"          RETENTION_TYPE = SRC_RETENTION_TYPE,",
				"          BRANCHNAME = SRC_BRANCHNAME,",
				"          HASAPPROVALORREJECTION = SRC_HASAPPROVALORREJECTION,",
				"          CANCELLATIONDATE = update@UPDATE@CANCELLATIONDATE,",
				"          ISSUEDATE = update@UPDATE@ISSUEDATE,",
				"          MOSTRECENTMODEL = SRC_MOSTRECENTMODEL,",
				"          END_EFF_DATE = update@UPDATE@END_EFF_DATE,",
				"          END_EXP_DATE = update@UPDATE@END_EXP_DATE,",
				"          POLICY_ID",
				"     )) ~> updatedRows"
			]
		}
	}
}