{
	"name": "dimAccount",
	"properties": {
		"folder": {
			"name": "Insurance Analytics Azure/pcDimDataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_PC_ACCOUNT",
						"type": "DatasetReference"
					},
					"name": "pcAccount"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_ACCOUNTCONTACT",
						"type": "DatasetReference"
					},
					"name": "pcAccountContact"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_ACCOUNTCONTACTROLE",
						"type": "DatasetReference"
					},
					"name": "pcAccountContactRole"
				},
				{
					"dataset": {
						"referenceName": "PCTL_ACCOUNTCONTACTROLE",
						"type": "DatasetReference"
					},
					"name": "pctlAccountContactRole"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_CONTACT",
						"type": "DatasetReference"
					},
					"name": "pcContact"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_ADDRESS",
						"type": "DatasetReference"
					},
					"name": "pcAddress"
				},
				{
					"dataset": {
						"referenceName": "PCTL_STATE",
						"type": "DatasetReference"
					},
					"name": "pctlState"
				},
				{
					"dataset": {
						"referenceName": "DS_PCTL_ACCOUNTORGTYPE",
						"type": "DatasetReference"
					},
					"name": "pctlAccountorgtype"
				},
				{
					"dataset": {
						"referenceName": "PCTL_ACCOUNTSTATUS",
						"type": "DatasetReference"
					},
					"name": "pctlAccountstatus"
				},
				{
					"dataset": {
						"referenceName": "DIM_ACCOUNT",
						"type": "DatasetReference"
					},
					"name": "tgtDimAccount"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DIM_ACCOUNT",
						"type": "DatasetReference"
					},
					"name": "InsertedRows"
				},
				{
					"dataset": {
						"referenceName": "DIM_ACCOUNT",
						"type": "DatasetReference"
					},
					"name": "updatedRows"
				}
			],
			"transformations": [
				{
					"name": "joinAccountAndPcAccountContact"
				},
				{
					"name": "joinAccountAndPcAccountContactAndpcAccountContactRole"
				},
				{
					"name": "joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRole"
				},
				{
					"name": "joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRoleAndpcContact"
				},
				{
					"name": "joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRoleAndpcContactAndpcAddress"
				},
				{
					"name": "joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRoleAndpcContactAndpcAddressAndpctlState"
				},
				{
					"name": "joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRoleAndpcContactAndpcAddressAndpctlStateAndpctlAccountorgtype"
				},
				{
					"name": "joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRoleAndpcContactAndpcAddressAndpctlStateAndpctlAccountorgtypeAndpctlAccountstatus"
				},
				{
					"name": "filteredRows"
				},
				{
					"name": "SrcColumnTransformations"
				},
				{
					"name": "srcHashKey"
				},
				{
					"name": "tgtHashkey"
				},
				{
					"name": "lookupKeyColumn"
				},
				{
					"name": "convDatatypes"
				},
				{
					"name": "tgtColumnTransformations"
				},
				{
					"name": "split1"
				},
				{
					"name": "updateCondition"
				}
			],
			"scriptLines": [
				"source(output(",
				"          BusOpsDesc as string,",
				"          PublicID as string,",
				"          CreateTime as timestamp,",
				"          LinkContacts as boolean,",
				"          AccountOrgType as integer,",
				"          LocationAutoNumberSeq as long,",
				"          UpdateTime as timestamp,",
				"          ServiceTier as integer,",
				"          PrimaryLanguage as integer,",
				"          ID as long,",
				"          StateBureauNum as string,",
				"          PrimaryLocale as integer,",
				"          AccountStatus as integer,",
				"          Frozen as boolean,",
				"          CreateUserID as long,",
				"          YearBusinessStarted as integer,",
				"          IndustryCodeID as long,",
				"          BeanVersion as integer,",
				"          Retired as long,",
				"          LockingColumn as integer,",
				"          OtherOrgTypeDescription as string,",
				"          UpdateUserID as long,",
				"          AccountNumberDenorm as string,",
				"          AccountNumber as string,",
				"          PreferredCoverageCurrency as integer,",
				"          PreferredSettlementCurrency as integer,",
				"          OriginationDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcAccount",
				"source(output(",
				"          Contact as long,",
				"          CreateUserID as long,",
				"          PublicID as string,",
				"          Active as boolean,",
				"          BeanVersion as integer,",
				"          Retired as long,",
				"          CreateTime as timestamp,",
				"          LastUpdateTime as timestamp,",
				"          Account as long,",
				"          UpdateUserID as long,",
				"          UpdateTime as timestamp,",
				"          Subtype as integer,",
				"          ID as long,",
				"          TemporaryLastUpdateTime as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcAccountContact",
				"source(output(",
				"          RelationshipTitle as integer,",
				"          YearLicensed as integer,",
				"          DateCompletedTrainingClass as timestamp,",
				"          CreateUserID as long,",
				"          NumberofAccidents as integer,",
				"          PublicID as string,",
				"          IndustryCodeID as long,",
				"          GoodDriverDiscount as boolean,",
				"          BeanVersion as integer,",
				"          Retired as long,",
				"          CreateTime as timestamp,",
				"          BusOpsDescription as string,",
				"          NumberofViolations as integer,",
				"          UpdateUserID as long,",
				"          AccountContact as long,",
				"          UpdateTime as timestamp,",
				"          TrainingClassType as integer,",
				"          Referenced as boolean,",
				"          Subtype as integer,",
				"          Student as boolean,",
				"          ID as long,",
				"          OrgType as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcAccountContactRole",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pctlAccountContactRole",
				"source(output(",
				"          LoadCommandID as long,",
				"          Preferred as boolean,",
				"          VendorType as integer,",
				"          FaxPhoneCountry as integer,",
				"          Particle as string,",
				"          TaxID as string,",
				"          NameDenorm as string,",
				"          Name as string,",
				"          VendorNumber as string,",
				"          State as integer,",
				"          Prefix as integer,",
				"          Score as integer,",
				"          PreferredCurrency as integer,",
				"          LastNameKanji as string,",
				"          TaxFilingStatus as integer,",
				"          AccountHolderCount as integer,",
				"          Country as integer,",
				"          UpdateTime as timestamp,",
				"          AdjudicatorLicense as string,",
				"          ID as long,",
				"          WithholdingRate as decimal(4,1),",
				"          LastNameDenorm as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          CreateUserID as long,",
				"          ExternalID as string,",
				"          BeanVersion as integer,",
				"          VenueType as integer,",
				"          Retired as long,",
				"          ValidationLevel as integer,",
				"          PrimaryPhone as integer,",
				"          LastUpdateTime as timestamp,",
				"          ExternalVersion as integer,",
				"          UpdateUserID as long,",
				"          HomePhoneExtension as string,",
				"          FirstNameDenorm as string,",
				"          FirstName as string,",
				"          FirstNameKanji as string,",
				"          TemporaryLastUpdateTime as timestamp,",
				"          Gender as integer,",
				"          Notes as string,",
				"          NumDependentsU18 as integer,",
				"          PublicID as string,",
				"          HomePhoneCountry as integer,",
				"          CityKanjiDenorm as string,",
				"          CreateTime as timestamp,",
				"          LicenseNumber as string,",
				"          CellPhoneCountry as integer,",
				"          AutoSync as integer,",
				"          Occupation as string,",
				"          CellPhone as string,",
				"          PrimaryAddressID as long,",
				"          Suffix as integer,",
				"          AddressBookUID as string,",
				"          LoadRelatedContacts as boolean,",
				"          EmailAddress1 as string,",
				"          NumDependents as integer,",
				"          DateOfBirth as timestamp,",
				"          PrimaryLanguage as integer,",
				"          EmailAddress2 as string,",
				"          PrimaryLocale as integer,",
				"          TaxStatus as integer,",
				"          NumDependentsU25 as integer,",
				"          WorkPhoneExtension as string,",
				"          MaritalStatus as integer,",
				"          CityDenorm as string,",
				"          NameKanji as string,",
				"          FaxPhoneExtension as string,",
				"          HomePhone as string,",
				"          LicenseState as integer,",
				"          FaxPhone as string,",
				"          CellPhoneExtension as string,",
				"          PostalCodeDenorm as string,",
				"          EmployeeNumber as string,",
				"          WorkPhoneCountry as integer,",
				"          Subtype as integer,",
				"          PreferredSettlementCurrency as integer,",
				"          FormerName as string,",
				"          WorkPhone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcContact",
				"source(output(",
				"          LocationName as string,",
				"          LoadCommandID as long,",
				"          PublicID as string,",
				"          BatchGeocode as boolean,",
				"          Active as boolean,",
				"          CreateTime as timestamp,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          County as string,",
				"          AddressLine3 as string,",
				"          CityKanji as string,",
				"          AddressLine2Kanji as string,",
				"          PhoneExtension as string,",
				"          State as integer,",
				"          AddressBookUID as string,",
				"          UpdateTime as timestamp,",
				"          Country as integer,",
				"          ID as long,",
				"          EmployeeCount as integer,",
				"          LocationCode as string,",
				"          CreateUserID as long,",
				"          ValidUntil as timestamp,",
				"          PhoneCountry as integer,",
				"          BeanVersion as integer,",
				"          CityDenorm as string,",
				"          Retired as long,",
				"          City as string,",
				"          LastUpdateTime as timestamp,",
				"          Account as long,",
				"          Phone as string,",
				"          AddressType as integer,",
				"          AddressLine1Kanji as string,",
				"          UpdateUserID as long,",
				"          CEDEXBureau as string,",
				"          GeocodeStatus as integer,",
				"          LocationNum as integer,",
				"          CEDEX as boolean,",
				"          PostalCodeDenorm as string,",
				"          PostalCode as string,",
				"          Referenced as boolean,",
				"          Subtype as integer,",
				"          LinkedAddress as long,",
				"          Description as string,",
				"          TemporaryLastUpdateTime as timestamp,",
				"          NonSpecific as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcAddress",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pctlState",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pctlAccountorgtype",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pctlAccountstatus",
				"source(output(",
				"          ACCOUNT_ID as integer,",
				"          SOURCE as string,",
				"          ACCOUNT_KEY as string,",
				"          ACCOUNT_BASE_ID as integer,",
				"          ACCOUNT_NO as string,",
				"          ACCOUNT_NAME as string,",
				"          MAILING_ADDRESS_1 as string,",
				"          MAILING_ADDRESS_2 as string,",
				"          MAILING_ADDRESS_3 as string,",
				"          MAILING_CITY as string,",
				"          MAILING_STATE_CODE as string,",
				"          MAILING_STATE_SHORT_TEXT as string,",
				"          MAILING_STATE_LONG_TEXT as string,",
				"          MAILING_ZIP_CODE as string,",
				"          ACCOUNTORGTYPE as integer,",
				"          ACCOUNTSTATUS as integer,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ACCOUNTORGTYPE_DESCRIPTION as string,",
				"          ACCOUNTSTATUS_DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tgtDimAccount",
				"pcAccount, pcAccountContact join(pcAccount@ID == Account,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> joinAccountAndPcAccountContact",
				"joinAccountAndPcAccountContact, pcAccountContactRole join(pcAccountContact@ID == AccountContact,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinAccountAndPcAccountContactAndpcAccountContactRole",
				"joinAccountAndPcAccountContactAndpcAccountContactRole, pctlAccountContactRole join(pcAccountContactRole@Subtype == pctlAccountContactRole@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRole",
				"joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRole, pcContact join(Contact == pcContact@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRoleAndpcContact",
				"joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRoleAndpcContact, pcAddress join(PrimaryAddressID == pcAddress@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRoleAndpcContactAndpcAddress",
				"joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRoleAndpcContactAndpcAddress, pctlState join(pcAddress@State == pctlState@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRoleAndpcContactAndpcAddressAndpctlState",
				"joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRoleAndpcContactAndpcAddressAndpctlState, pctlAccountorgtype join(AccountOrgType == pctlAccountorgtype@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRoleAndpcContactAndpcAddressAndpctlStateAndpctlAccountorgtype",
				"joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRoleAndpcContactAndpcAddressAndpctlStateAndpctlAccountorgtype, pctlAccountstatus join(AccountStatus == pctlAccountstatus@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRoleAndpcContactAndpcAddressAndpctlStateAndpctlAccountorgtypeAndpctlAccountstatus",
				"joinAccountAndPcAccountContactAndpcAccountContactRoleAndpctlAccountContactRoleAndpcContactAndpcAddressAndpctlStateAndpctlAccountorgtypeAndpctlAccountstatus filter(pcAccountContactRole@Retired==0 && pctlAccountContactRole@TYPECODE=='AccountHolder') ~> filteredRows",
				"filteredRows derive(TGT_source = 'PC',",
				"          TGT_ACCOUNT_KEY = concat('PC-', AccountNumber),",
				"          TGT_ETL_LAST_UPDATE_DATETIMESTAMP = currentTimestamp(),",
				"          TGT_ETL_ADD_DATETIMESTAMP = currentTimestamp(),",
				"          TGT_ETL_ACTIVE_FLAG = 'Y',",
				"          TGT_ACCOUNT_NAME = iif(isNull(pcContact@Name),concat(iif(isNull(FirstName),'', FirstName),iif(isNull(LastName),'', LastName)), pcContact@Name),",
				"          TGT_ACCOUNT_BASE_ID = pcAccount@ID,",
				"          TGT_ACCOUNT_NO = AccountNumber,",
				"          TGT_MAILING_ADDRESS_1 = AddressLine1,",
				"          TGT_MAILING_ADDRESS_2 = AddressLine2,",
				"          TGT_MAILING_ADDRESS_3 = AddressLine3,",
				"          TGT_MAILING_CITY = City,",
				"          TGT_MAILING_STATE_CODE = pctlState@TYPECODE,",
				"          TGT_MAILING_STATE_SHORT_TEXT = pctlState@TYPECODE,",
				"          TGT_MAILING_STATE_LONG_TEXT = pctlState@NAME,",
				"          TGT_MAILING_ZIP_CODE = PostalCode,",
				"          TGT_ACCOUNTORGTYPE = AccountOrgType,",
				"          TGT_ACCOUNTSTATUS = AccountStatus,",
				"          TGT_ACCOUNTORGTYPE_DESCRIPTION = pctlAccountorgtype@NAME,",
				"          TGT_ACCOUNTSTATUS_DESCRIPTION = pctlAccountstatus@NAME) ~> SrcColumnTransformations",
				"convDatatypes derive(srcHashKey = md5(TGT_source,TGT_ACCOUNT_KEY,TGT_ACCOUNT_NAME,TGT_ACCOUNT_BASE_ID,TGT_ACCOUNT_NO,TGT_MAILING_ADDRESS_1,TGT_MAILING_ADDRESS_2,TGT_MAILING_ADDRESS_3,TGT_MAILING_CITY,TGT_MAILING_STATE_CODE)) ~> srcHashKey",
				"tgtColumnTransformations derive(tgtHashkey = md5(TBL_SOURCE,TBL_ACCOUNT_KEY,TBL_ACCOUNT_NAME,TBL_ACCOUNT_BASE_ID,TBL_ACCOUNT_NO,TBL_MAILING_ADDRESS_1,TBL_MAILING_ADDRESS_2,TBL_MAILING_ADDRESS_3,TBL_MAILING_CITY,TBL_MAILING_STATE_CODE)) ~> tgtHashkey",
				"srcHashKey, tgtHashkey lookup(TGT_ACCOUNT_KEY == TBL_ACCOUNT_KEY,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupKeyColumn",
				"SrcColumnTransformations derive(TGT_source = toString(TGT_source),",
				"          TGT_ACCOUNT_KEY = toString(TGT_ACCOUNT_KEY),",
				"          TGT_ACCOUNT_NAME = toString(TGT_ACCOUNT_NAME),",
				"          TGT_ACCOUNT_BASE_ID = toInteger(TGT_ACCOUNT_BASE_ID),",
				"          TGT_ACCOUNT_NO = toString(TGT_ACCOUNT_NO),",
				"          TGT_MAILING_ADDRESS_1 = toString(TGT_MAILING_ADDRESS_1),",
				"          TGT_MAILING_ADDRESS_2 = toString(TGT_MAILING_ADDRESS_2),",
				"          TGT_MAILING_ADDRESS_3 = toString(TGT_MAILING_ADDRESS_3),",
				"          TGT_MAILING_CITY = toString(TGT_MAILING_CITY),",
				"          TGT_MAILING_STATE_CODE = toString(TGT_MAILING_STATE_CODE),",
				"          TGT_MAILING_STATE_SHORT_TEXT = toString(TGT_MAILING_STATE_SHORT_TEXT),",
				"          TGT_MAILING_STATE_LONG_TEXT = toString(TGT_MAILING_STATE_LONG_TEXT),",
				"          TGT_MAILING_ZIP_CODE = toString(TGT_MAILING_ZIP_CODE),",
				"          TGT_ACCOUNTORGTYPE = toInteger(TGT_ACCOUNTORGTYPE),",
				"          TGT_ACCOUNTSTATUS = toInteger(TGT_ACCOUNTSTATUS),",
				"          TGT_ACCOUNTORGTYPE_DESCRIPTION = toString(TGT_ACCOUNTORGTYPE_DESCRIPTION),",
				"          TGT_ACCOUNTSTATUS_DESCRIPTION = toString(TGT_ACCOUNTSTATUS_DESCRIPTION)) ~> convDatatypes",
				"tgtDimAccount derive(TBL_SOURCE = toString(SOURCE),",
				"          TBL_ACCOUNT_KEY = toString(ACCOUNT_KEY),",
				"          TBL_ACCOUNT_NAME = toString(ACCOUNT_NAME),",
				"          TBL_ACCOUNT_BASE_ID = toInteger(ACCOUNT_BASE_ID),",
				"          TBL_ACCOUNT_NO = toString(ACCOUNT_NO),",
				"          TBL_MAILING_ADDRESS_1 = toString(MAILING_ADDRESS_1),",
				"          TBL_MAILING_ADDRESS_2 = toString(MAILING_ADDRESS_2),",
				"          TBL_MAILING_ADDRESS_3 = toString(MAILING_ADDRESS_3),",
				"          TBL_MAILING_CITY = toString(MAILING_CITY),",
				"          TBL_MAILING_STATE_CODE = toString(MAILING_STATE_CODE),",
				"          TBL_MAILING_STATE_SHORT_TEXT = toString(MAILING_STATE_SHORT_TEXT),",
				"          TBL_MAILING_STATE_LONG_TEXT = toString(MAILING_STATE_LONG_TEXT),",
				"          TBL_MAILING_ZIP_CODE = toString(MAILING_ZIP_CODE),",
				"          TBL_ACCOUNTORGTYPE = toInteger(ACCOUNTORGTYPE),",
				"          TBL_ACCOUNTSTATUS = toInteger(ACCOUNTSTATUS),",
				"          TBL_ACCOUNTORGTYPE_DESCRIPTION = toString(ACCOUNTORGTYPE_DESCRIPTION),",
				"          TBL_ACCOUNTSTATUS_DESCRIPTION = toString(ACCOUNTSTATUS_DESCRIPTION)) ~> tgtColumnTransformations",
				"lookupKeyColumn split(isNull(ACCOUNT_KEY),",
				"     !isNull(ACCOUNT_KEY)&&notEquals(srcHashKey,tgtHashkey),",
				"     disjoint: false) ~> split1@(Insert, Update, Noupdate)",
				"split1@Update alterRow(updateIf(true())) ~> updateCondition",
				"split1@Insert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ACCOUNT_ID as integer,",
				"          SOURCE as string,",
				"          ACCOUNT_KEY as string,",
				"          ACCOUNT_BASE_ID as integer,",
				"          ACCOUNT_NO as string,",
				"          ACCOUNT_NAME as string,",
				"          MAILING_ADDRESS_1 as string,",
				"          MAILING_ADDRESS_2 as string,",
				"          MAILING_ADDRESS_3 as string,",
				"          MAILING_CITY as string,",
				"          MAILING_STATE_CODE as string,",
				"          MAILING_STATE_SHORT_TEXT as string,",
				"          MAILING_STATE_LONG_TEXT as string,",
				"          MAILING_ZIP_CODE as string,",
				"          ACCOUNTORGTYPE as integer,",
				"          ACCOUNTSTATUS as integer,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ACCOUNTORGTYPE_DESCRIPTION as string,",
				"          ACCOUNTSTATUS_DESCRIPTION as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SOURCE = TGT_source,",
				"          ACCOUNT_KEY = TGT_ACCOUNT_KEY,",
				"          ACCOUNT_BASE_ID = TGT_ACCOUNT_BASE_ID,",
				"          ACCOUNT_NO = TGT_ACCOUNT_NO,",
				"          MAILING_ADDRESS_1 = TGT_MAILING_ADDRESS_1,",
				"          MAILING_ADDRESS_2 = TGT_MAILING_ADDRESS_2,",
				"          MAILING_ADDRESS_3 = TGT_MAILING_ADDRESS_3,",
				"          MAILING_CITY = TGT_MAILING_CITY,",
				"          MAILING_STATE_CODE = TGT_MAILING_STATE_CODE,",
				"          MAILING_STATE_SHORT_TEXT = TGT_MAILING_STATE_SHORT_TEXT,",
				"          MAILING_STATE_LONG_TEXT = TGT_MAILING_STATE_LONG_TEXT,",
				"          MAILING_ZIP_CODE = TGT_MAILING_ZIP_CODE,",
				"          ACCOUNTORGTYPE = TGT_ACCOUNTORGTYPE,",
				"          ACCOUNTSTATUS = TGT_ACCOUNTSTATUS,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = TGT_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ETL_ADD_DATETIMESTAMP = TGT_ETL_ADD_DATETIMESTAMP,",
				"          ETL_ACTIVE_FLAG = TGT_ETL_ACTIVE_FLAG,",
				"          ACCOUNTORGTYPE_DESCRIPTION = TGT_ACCOUNTORGTYPE_DESCRIPTION,",
				"          ACCOUNTSTATUS_DESCRIPTION = TGT_ACCOUNTSTATUS_DESCRIPTION,",
				"          ACCOUNT_NAME = TGT_ACCOUNT_NAME",
				"     )) ~> InsertedRows",
				"updateCondition sink(allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     input(",
				"          ACCOUNT_ID as integer,",
				"          SOURCE as string,",
				"          ACCOUNT_KEY as string,",
				"          ACCOUNT_BASE_ID as integer,",
				"          ACCOUNT_NO as string,",
				"          ACCOUNT_NAME as string,",
				"          MAILING_ADDRESS_1 as string,",
				"          MAILING_ADDRESS_2 as string,",
				"          MAILING_ADDRESS_3 as string,",
				"          MAILING_CITY as string,",
				"          MAILING_STATE_CODE as string,",
				"          MAILING_STATE_SHORT_TEXT as string,",
				"          MAILING_STATE_LONG_TEXT as string,",
				"          MAILING_ZIP_CODE as string,",
				"          ACCOUNTORGTYPE as integer,",
				"          ACCOUNTSTATUS as integer,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ACCOUNTORGTYPE_DESCRIPTION as string,",
				"          ACCOUNTSTATUS_DESCRIPTION as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['ACCOUNT_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SOURCE = TGT_source,",
				"          ACCOUNT_BASE_ID = TGT_ACCOUNT_BASE_ID,",
				"          ACCOUNT_NO = TGT_ACCOUNT_NO,",
				"          ACCOUNT_NAME = TGT_ACCOUNT_NAME,",
				"          MAILING_ADDRESS_1 = TGT_MAILING_ADDRESS_1,",
				"          MAILING_ADDRESS_2 = TGT_MAILING_ADDRESS_2,",
				"          MAILING_ADDRESS_3 = TGT_MAILING_ADDRESS_3,",
				"          MAILING_CITY = TGT_MAILING_CITY,",
				"          MAILING_STATE_CODE = TGT_MAILING_STATE_CODE,",
				"          MAILING_STATE_SHORT_TEXT = TGT_MAILING_STATE_SHORT_TEXT,",
				"          MAILING_STATE_LONG_TEXT = TGT_MAILING_STATE_LONG_TEXT,",
				"          MAILING_ZIP_CODE = TGT_MAILING_ZIP_CODE,",
				"          ACCOUNTORGTYPE = TGT_ACCOUNTORGTYPE,",
				"          ACCOUNTSTATUS = TGT_ACCOUNTSTATUS,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = TGT_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ETL_ADD_DATETIMESTAMP = TGT_ETL_ADD_DATETIMESTAMP,",
				"          ETL_ACTIVE_FLAG = TGT_ETL_ACTIVE_FLAG,",
				"          ACCOUNTORGTYPE_DESCRIPTION = TGT_ACCOUNTORGTYPE_DESCRIPTION,",
				"          ACCOUNTSTATUS_DESCRIPTION = TGT_ACCOUNTSTATUS_DESCRIPTION,",
				"          ACCOUNT_KEY = TGT_ACCOUNT_KEY,",
				"          ACCOUNT_ID",
				"     )) ~> updatedRows"
			]
		}
	}
}