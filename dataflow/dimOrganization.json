{
	"name": "dimOrganization",
	"properties": {
		"folder": {
			"name": "Insurance Analytics Azure/pcDimDataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_PCTL_UWCOMPANYCODE",
						"type": "DatasetReference"
					},
					"name": "PctlUwCompanyCode"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_POLICYPERIOD",
						"type": "DatasetReference"
					},
					"name": "PcPolicyperiod"
				},
				{
					"dataset": {
						"referenceName": "DS_AZSQL_ORGANIZATION",
						"type": "DatasetReference"
					},
					"name": "sourceTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_AZSQL_ORGANIZATION",
						"type": "DatasetReference"
					},
					"name": "insertedRows"
				},
				{
					"dataset": {
						"referenceName": "DS_AZSQL_ORGANIZATION",
						"type": "DatasetReference"
					},
					"name": "updatedRows"
				}
			],
			"transformations": [
				{
					"name": "joinUwCompanyCodeAndPcPolicyperiod"
				},
				{
					"name": "SrcColumnTransformation"
				},
				{
					"name": "split1"
				},
				{
					"name": "SrcHashKey"
				},
				{
					"name": "lookupkeycolumn"
				},
				{
					"name": "TgtHashKey"
				},
				{
					"name": "updateConditions"
				}
			],
			"scriptLines": [
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PctlUwCompanyCode",
				"source(output(",
				"          BasedOnDate as timestamp,",
				"          ValidQuote as boolean,",
				"          TotalPremiumRPT as decimal(18,2),",
				"          TotalPremiumRPT_cur as integer,",
				"          MinimumPremium as long,",
				"          Locked as boolean,",
				"          EditEffectiveDate as timestamp,",
				"          ValidReinsurance as boolean,",
				"          SeriesCheckingPatternCode as string,",
				"          ArchiveState as integer,",
				"          ArchiveSchemaInfo as long,",
				"          PNIContactDenorm as long,",
				"          LocationAutoNumberSeq as long,",
				"          EditLocked as boolean,",
				"          UpdateTime as timestamp,",
				"          RateAsOfDate as timestamp,",
				"          JobID as long,",
				"          ID as long,",
				"          SingleCheckingPatternCode as string,",
				"          UWCompany as long,",
				"          BillingMethod as integer,",
				"          PeriodID as long,",
				"          TransactionPremiumRPT as decimal(18,2),",
				"          AssignedRisk as boolean,",
				"          ExcludeReason as string,",
				"          TransactionPremiumRPT_cur as integer,",
				"          CreateUserID as long,",
				"          ArchiveFailureID as long,",
				"          AllowGapsBefore as boolean,",
				"          QuoteHidden as boolean,",
				"          BeanVersion as integer,",
				"          FailedOOSEValidation as boolean,",
				"          Retired as long,",
				"          BranchName as string,",
				"          Preempted as boolean,",
				"          UpdateUserID as long,",
				"          FuturePeriods as boolean,",
				"          PrimaryInsuredNameDenorm as string,",
				"          CancellationDate as timestamp,",
				"          ModelNumber as integer,",
				"          TemporaryBranch as boolean,",
				"          PrimaryInsuredName as string,",
				"          Segment as integer,",
				"          TermNumber as integer,",
				"          DepositOverridePct as decimal(12,3),",
				"          PolicyTermID as long,",
				"          WaiveDepositChange as boolean,",
				"          PeriodStart as timestamp,",
				"          ProducerCodeOfRecordID as long,",
				"          DoNotPurge as boolean,",
				"          PublicID as string,",
				"          AltBillingAccountNumber as string,",
				"          TotalCostRPT as decimal(18,2),",
				"          WrittenDate as timestamp,",
				"          TotalCostRPT_cur as integer,",
				"          CreateTime as timestamp,",
				"          MostRecentModel as boolean,",
				"          PolicyID as long,",
				"          ExcludedFromArchive as boolean,",
				"          AllocationOfRemainder as integer,",
				"          OverrideBillingAllocation as boolean,",
				"          ArchiveFailureDetailsID as long,",
				"          ModelDate as timestamp,",
				"          InvoiceStreamCode as string,",
				"          ModelNumberIndex as string,",
				"          BaseState as integer,",
				"          MostRecentModelIndex as string,",
				"          ArchivePartition as long,",
				"          CustomBilling as boolean,",
				"          TransactionCostRPT as decimal(18,2),",
				"          BranchNumber as integer,",
				"          FailedOOSEEvaluation as boolean,",
				"          DepositCollected as decimal(18,2),",
				"          TransactionCostRPT_cur as integer,",
				"          DepositCollected_cur as integer,",
				"          BasedOnID as long,",
				"          LockingColumn as integer,",
				"          RefundCalcMethod as integer,",
				"          ArchiveDate as timestamp,",
				"          BillImmediatelyPercentage as decimal(4,1),",
				"          Status as integer,",
				"          DepositAmount as decimal(18,2),",
				"          DepositAmount_cur as integer,",
				"          PeriodEnd as timestamp,",
				"          PreferredCoverageCurrency as integer,",
				"          PolicyNumber as string,",
				"          PreferredSettlementCurrency as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcPolicyperiod",
				"source(output(",
				"          ORG_ID as integer,",
				"          SOURCE as string,",
				"          MASTER_CO_CD as string,",
				"          MASTER_CO_CD_DESC as string,",
				"          POL_CO_CD as string,",
				"          POL_CO_CD_DESC as string,",
				"          BRANCH_OFC_CD as string,",
				"          PROFIT_CTR_CD as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_TIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          UWCOMPANYNAME_DESC as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceTable",
				"PctlUwCompanyCode, PcPolicyperiod join(PctlUwCompanyCode@ID == UWCompany,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinUwCompanyCodeAndPcPolicyperiod",
				"joinUwCompanyCodeAndPcPolicyperiod derive(Src_ETL_ACTIVE_FLAG = 'Y',",
				"          Src_ETL_ADD_DATETIMESTAMP = currentTimestamp(),",
				"          Src_ETL_LAST_UPDATE_DATETIMESTAMP = currentTimestamp(),",
				"          Src_SOURCE = 'PC',",
				"          Src_BRANCH_OFC_CD = 'N/A',",
				"          Src_PROFIT_CTR_CD = 'N/A',",
				"          Src_MASTER_CO_CD = TYPECODE,",
				"          Src_POL_CO_CD = TYPECODE) ~> SrcColumnTransformation",
				"lookupkeycolumn split(isNull(MASTER_CO_CD),",
				"     !isNull(ORG_ID)&&notEquals(SrcHashValue,TgtHashKey),",
				"     disjoint: true) ~> split1@(Insert, Update, DoNothing)",
				"SrcColumnTransformation derive(SrcHashValue = sha1(toString(Src_SOURCE),toString(Src_MASTER_CO_CD),toString(Src_POL_CO_CD))) ~> SrcHashKey",
				"SrcHashKey, TgtHashKey lookup(Src_MASTER_CO_CD == MASTER_CO_CD,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'both')~> lookupkeycolumn",
				"sourceTable derive(TgtHashKey = sha1(toString(SOURCE),toString(MASTER_CO_CD),toString(POL_CO_CD))) ~> TgtHashKey",
				"split1@Update alterRow(updateIf(true())) ~> updateConditions",
				"split1@Insert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ORG_ID as integer,",
				"          SOURCE as string,",
				"          MASTER_CO_CD as string,",
				"          MASTER_CO_CD_DESC as string,",
				"          POL_CO_CD as string,",
				"          POL_CO_CD_DESC as string,",
				"          BRANCH_OFC_CD as string,",
				"          PROFIT_CTR_CD as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_TIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          UWCOMPANYNAME_DESC as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SOURCE = Src_SOURCE,",
				"          MASTER_CO_CD = Src_MASTER_CO_CD,",
				"          POL_CO_CD = Src_POL_CO_CD,",
				"          BRANCH_OFC_CD = Src_BRANCH_OFC_CD,",
				"          PROFIT_CTR_CD = Src_PROFIT_CTR_CD,",
				"          ETL_ACTIVE_FLAG = Src_ETL_ACTIVE_FLAG,",
				"          ETL_ADD_DATETIMESTAMP = Src_ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_TIMESTAMP = Src_ETL_LAST_UPDATE_DATETIMESTAMP",
				"     )) ~> insertedRows",
				"updateConditions sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ORG_ID as integer,",
				"          SOURCE as string,",
				"          MASTER_CO_CD as string,",
				"          MASTER_CO_CD_DESC as string,",
				"          POL_CO_CD as string,",
				"          POL_CO_CD_DESC as string,",
				"          BRANCH_OFC_CD as string,",
				"          PROFIT_CTR_CD as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_TIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          UWCOMPANYNAME_DESC as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['ORG_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SOURCE = Src_SOURCE,",
				"          MASTER_CO_CD = Src_MASTER_CO_CD,",
				"          POL_CO_CD = Src_POL_CO_CD,",
				"          BRANCH_OFC_CD = Src_BRANCH_OFC_CD,",
				"          PROFIT_CTR_CD = Src_PROFIT_CTR_CD,",
				"          ETL_ACTIVE_FLAG = Src_ETL_ACTIVE_FLAG,",
				"          ETL_ADD_DATETIMESTAMP = Src_ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_TIMESTAMP = Src_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ORG_ID",
				"     )) ~> updatedRows"
			]
		}
	}
}