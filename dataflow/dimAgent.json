{
	"name": "dimAgent",
	"properties": {
		"folder": {
			"name": "Insurance Analytics Azure/pcDimDataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_PC_PRODUCERCODE",
						"type": "DatasetReference"
					},
					"name": "pcProducerCode"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_ORGANIZATION",
						"type": "DatasetReference"
					},
					"name": "pcOrganization"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_ADDRESS",
						"type": "DatasetReference"
					},
					"name": "pcAddress"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_CONCACT",
						"type": "DatasetReference"
					},
					"name": "pcContact"
				},
				{
					"dataset": {
						"referenceName": "DS_PCTL_STATE",
						"type": "DatasetReference"
					},
					"name": "pctlState"
				},
				{
					"dataset": {
						"referenceName": "DS_PCTL_PRIMARYPHONETYPE",
						"type": "DatasetReference"
					},
					"name": "pctlPrimaryPhoneType"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_GROUP",
						"type": "DatasetReference"
					},
					"name": "pcGroup"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_GROUPPRODUCERCODE",
						"type": "DatasetReference"
					},
					"name": "pcGroupProducerCode"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_AGENT",
						"type": "DatasetReference"
					},
					"name": "tgtDimAgent"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_DIM_AGENT",
						"type": "DatasetReference"
					},
					"name": "insertedRows"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_AGENT",
						"type": "DatasetReference"
					},
					"name": "updatedrows"
				}
			],
			"transformations": [
				{
					"name": "joinProducerCodeAndOrganization"
				},
				{
					"name": "joinProducerCodeAndOrganizationAndAddress"
				},
				{
					"name": "joinProducerCodeAndOrganizationAndAddressAndContact"
				},
				{
					"name": "joinProducerCodeAndOrganizationAndAddressAndContactAndPctlState"
				},
				{
					"name": "joinProducerCodeAndOrganizationAndAddressAndContactAndPctlStateAndPctlPrimaryPhoneType"
				},
				{
					"name": "joinProducerCodeAndOrganizationAndAddressAndContactAndPctlStateAndPctlPrimaryPhoneTypeAndpcGroupProducerCode"
				},
				{
					"name": "joinProducerCodeAndOrganizationAndAddressAndContactAndPctlStateAndPctlPrimaryPhoneTypeAndpcGroupProducerCodeAndPcGroup"
				},
				{
					"name": "srcColumnTransformations"
				},
				{
					"name": "srcHashKey"
				},
				{
					"name": "tgtHashKey"
				},
				{
					"name": "lookupKeyColumn"
				},
				{
					"name": "split1"
				},
				{
					"name": "updatecondition"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CreateUserID as long,",
				"          PublicID as string,",
				"          ProducerStatus as integer,",
				"          PreferredUnderwriterID as long,",
				"          BeanVersion as integer,",
				"          CreateTime as timestamp,",
				"          Retired as long,",
				"          CodeDenorm as string,",
				"          Code as string,",
				"          AppointmentDate as timestamp,",
				"          OrganizationID as long,",
				"          UpdateUserID as long,",
				"          AddressID as long,",
				"          TerminationDate as timestamp,",
				"          UpdateTime as timestamp,",
				"          DescriptionDenorm as string,",
				"          ID as long,",
				"          Description as string,",
				"          BranchID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcProducerCode",
				"source(output(",
				"          CreateUserID as long,",
				"          Tier as integer,",
				"          PublicID as string,",
				"          ProducerStatus as integer,",
				"          BeanVersion as integer,",
				"          NameDenorm as string,",
				"          Retired as long,",
				"          CreateTime as timestamp,",
				"          Name as string,",
				"          NameKanji as string,",
				"          MasterAdmin as boolean,",
				"          UpdateUserID as long,",
				"          UpdateTime as timestamp,",
				"          Carrier as boolean,",
				"          Type as integer,",
				"          ID as long,",
				"          ContactID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcOrganization",
				"source(output(",
				"          LocationName as string,",
				"          LoadCommandID as long,",
				"          PublicID as string,",
				"          BatchGeocode as boolean,",
				"          Active as boolean,",
				"          CreateTime as timestamp,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          County as string,",
				"          AddressLine3 as string,",
				"          CityKanji as string,",
				"          AddressLine2Kanji as string,",
				"          PhoneExtension as string,",
				"          State as integer,",
				"          AddressBookUID as string,",
				"          UpdateTime as timestamp,",
				"          Country as integer,",
				"          ID as long,",
				"          EmployeeCount as integer,",
				"          LocationCode as string,",
				"          CreateUserID as long,",
				"          ValidUntil as timestamp,",
				"          PhoneCountry as integer,",
				"          BeanVersion as integer,",
				"          CityDenorm as string,",
				"          Retired as long,",
				"          City as string,",
				"          LastUpdateTime as timestamp,",
				"          Account as long,",
				"          Phone as string,",
				"          AddressType as integer,",
				"          AddressLine1Kanji as string,",
				"          UpdateUserID as long,",
				"          CEDEXBureau as string,",
				"          GeocodeStatus as integer,",
				"          LocationNum as integer,",
				"          CEDEX as boolean,",
				"          PostalCodeDenorm as string,",
				"          PostalCode as string,",
				"          Referenced as boolean,",
				"          Subtype as integer,",
				"          LinkedAddress as long,",
				"          Description as string,",
				"          TemporaryLastUpdateTime as timestamp,",
				"          NonSpecific as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcAddress",
				"source(output(",
				"          LoadCommandID as long,",
				"          Preferred as boolean,",
				"          VendorType as integer,",
				"          FaxPhoneCountry as integer,",
				"          Particle as string,",
				"          TaxID as string,",
				"          NameDenorm as string,",
				"          Name as string,",
				"          VendorNumber as string,",
				"          State as integer,",
				"          Prefix as integer,",
				"          Score as integer,",
				"          PreferredCurrency as integer,",
				"          LastNameKanji as string,",
				"          TaxFilingStatus as integer,",
				"          AccountHolderCount as integer,",
				"          Country as integer,",
				"          UpdateTime as timestamp,",
				"          AdjudicatorLicense as string,",
				"          ID as long,",
				"          WithholdingRate as decimal(4,1),",
				"          LastNameDenorm as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          CreateUserID as long,",
				"          ExternalID as string,",
				"          BeanVersion as integer,",
				"          VenueType as integer,",
				"          Retired as long,",
				"          ValidationLevel as integer,",
				"          PrimaryPhone as integer,",
				"          LastUpdateTime as timestamp,",
				"          ExternalVersion as integer,",
				"          UpdateUserID as long,",
				"          HomePhoneExtension as string,",
				"          FirstNameDenorm as string,",
				"          FirstName as string,",
				"          FirstNameKanji as string,",
				"          TemporaryLastUpdateTime as timestamp,",
				"          Gender as integer,",
				"          Notes as string,",
				"          NumDependentsU18 as integer,",
				"          PublicID as string,",
				"          HomePhoneCountry as integer,",
				"          CityKanjiDenorm as string,",
				"          CreateTime as timestamp,",
				"          LicenseNumber as string,",
				"          CellPhoneCountry as integer,",
				"          AutoSync as integer,",
				"          Occupation as string,",
				"          CellPhone as string,",
				"          PrimaryAddressID as long,",
				"          Suffix as integer,",
				"          AddressBookUID as string,",
				"          LoadRelatedContacts as boolean,",
				"          EmailAddress1 as string,",
				"          NumDependents as integer,",
				"          DateOfBirth as timestamp,",
				"          PrimaryLanguage as integer,",
				"          EmailAddress2 as string,",
				"          PrimaryLocale as integer,",
				"          TaxStatus as integer,",
				"          NumDependentsU25 as integer,",
				"          WorkPhoneExtension as string,",
				"          MaritalStatus as integer,",
				"          CityDenorm as string,",
				"          NameKanji as string,",
				"          FaxPhoneExtension as string,",
				"          HomePhone as string,",
				"          LicenseState as integer,",
				"          FaxPhone as string,",
				"          CellPhoneExtension as string,",
				"          PostalCodeDenorm as string,",
				"          EmployeeNumber as string,",
				"          WorkPhoneCountry as integer,",
				"          Subtype as integer,",
				"          PreferredSettlementCurrency as integer,",
				"          FormerName as string,",
				"          WorkPhone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcContact",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pctlState",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pctlPrimaryPhoneType",
				"source(output(",
				"          WorldVisible as boolean,",
				"          CreateUserID as long,",
				"          SupervisorID as long,",
				"          PublicID as string,",
				"          SecurityZoneID as long,",
				"          BeanVersion as integer,",
				"          NameDenorm as string,",
				"          CreateTime as timestamp,",
				"          Retired as long,",
				"          ValidationLevel as integer,",
				"          Name as string,",
				"          NameKanji as string,",
				"          OrganizationID as long,",
				"          UpdateUserID as long,",
				"          BranchCode as string,",
				"          LoadFactor as integer,",
				"          UpdateTime as timestamp,",
				"          GroupType as integer,",
				"          ID as long,",
				"          Description as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcGroup",
				"source(output(",
				"          PublicID as string,",
				"          BeanVersion as integer,",
				"          ProducerCodeID as long,",
				"          GroupID as long,",
				"          ID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcGroupProducerCode",
				"source(output(",
				"          AGENT_ID as integer,",
				"          AGENT_KEY as string,",
				"          SOURCE as string,",
				"          AGENT_NAME as string,",
				"          AGENT_CODE as string,",
				"          AGENT_ADDRESS_1 as string,",
				"          AGENT_ADDRESS_2 as string,",
				"          AGENT_ADDRESS_3 as string,",
				"          AGENT_CITY as string,",
				"          AGENT_STATE_CODE as string,",
				"          AGENT_STATE_CODE_DESCRIPTION as string,",
				"          AGENT_ZIP_CODE as string,",
				"          AGENT_PHONE_NUMBER as string,",
				"          AGENT_APPT_DATE as date,",
				"          AGENT_TERM_DATE as date,",
				"          AGENT_STATUS_CODE as string,",
				"          MANAGER_NAME as string,",
				"          REP_CODE as string,",
				"          REGION_CODE as string,",
				"          AGENT_LIC_NUMBER as string,",
				"          AGENT_TAX_ID as string,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          PRODUCERGROUP_NAME as string,",
				"          BRANCHNAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tgtDimAgent",
				"pcProducerCode, pcOrganization join(OrganizationID == pcOrganization@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinProducerCodeAndOrganization",
				"joinProducerCodeAndOrganization, pcAddress join(AddressID == pcAddress@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinProducerCodeAndOrganizationAndAddress",
				"joinProducerCodeAndOrganizationAndAddress, pcContact join(ContactID == pcContact@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinProducerCodeAndOrganizationAndAddressAndContact",
				"joinProducerCodeAndOrganizationAndAddressAndContact, pctlState join(pctlState@ID == pcAddress@State,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinProducerCodeAndOrganizationAndAddressAndContactAndPctlState",
				"joinProducerCodeAndOrganizationAndAddressAndContactAndPctlState, pctlPrimaryPhoneType join(pctlPrimaryPhoneType@ID == PrimaryPhone,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinProducerCodeAndOrganizationAndAddressAndContactAndPctlStateAndPctlPrimaryPhoneType",
				"joinProducerCodeAndOrganizationAndAddressAndContactAndPctlStateAndPctlPrimaryPhoneType, pcGroupProducerCode join(pcProducerCode@ID == pcGroupProducerCode@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinProducerCodeAndOrganizationAndAddressAndContactAndPctlStateAndPctlPrimaryPhoneTypeAndpcGroupProducerCode",
				"joinProducerCodeAndOrganizationAndAddressAndContactAndPctlStateAndPctlPrimaryPhoneTypeAndpcGroupProducerCode, pcGroup join(GroupID == pcGroup@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinProducerCodeAndOrganizationAndAddressAndContactAndPctlStateAndPctlPrimaryPhoneTypeAndpcGroupProducerCodeAndPcGroup",
				"joinProducerCodeAndOrganizationAndAddressAndContactAndPctlStateAndPctlPrimaryPhoneTypeAndpcGroupProducerCodeAndPcGroup derive(SRC_AGENT_KEY = concat('PC-',pcProducerCode@PublicID),",
				"          SRC_AGENT_PHONE_NUMBER = case(pctlPrimaryPhoneType@TYPECODE=='home','HOMEPHONE',pctlPrimaryPhoneType@TYPECODE=='work','WORKPHONE'),",
				"          SRC_ETL_ACTIVE_FLAG = 'Y',",
				"          SRC_ETL_ADD_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_ETL_LAST_UPDATE_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_SOURCE = 'PC',",
				"          SRC_AGENT_NAME = pcOrganization@Name,",
				"          SRC_AGENT_CODE = Code,",
				"          SRC_AGENT_ADDRESS_1 = AddressLine1,",
				"          SRC_AGENT_ADDRESS_2 = AddressLine2,",
				"          SRC_AGENT_ADDRESS_3 = AddressLine3,",
				"          SRC_AGENT_CITY = City,",
				"          SRC_AGENT_STATE_CODE = pctlState@TYPECODE,",
				"          SRC_AGENT_STATE_CODE_DESCRIPTION = pctlState@DESCRIPTION,",
				"          SRC_AGENT_ZIP_CODE = PostalCode,",
				"          SRC_AGENT_LIC_NUMBER = LicenseNumber,",
				"          SRC_AGENT_TAX_ID = TaxID,",
				"          SRC_PRODUCERGROUP_NAME = pcGroup@Name,",
				"          SRC_BRANCHNAME = pcGroup@Name) ~> srcColumnTransformations",
				"srcColumnTransformations derive(srcHashKey = sha1(SRC_SOURCE,SRC_AGENT_KEY,SRC_AGENT_NAME,SRC_AGENT_CODE,SRC_AGENT_ADDRESS_1,SRC_AGENT_ADDRESS_2,SRC_AGENT_ADDRESS_3,SRC_AGENT_CITY,SRC_AGENT_STATE_CODE,SRC_AGENT_STATE_CODE_DESCRIPTION,SRC_AGENT_ZIP_CODE,SRC_AGENT_PHONE_NUMBER,SRC_AGENT_LIC_NUMBER,SRC_AGENT_TAX_ID,SRC_PRODUCERGROUP_NAME,SRC_BRANCHNAME)) ~> srcHashKey",
				"tgtDimAgent derive(tgtHashKey = sha1(SOURCE,AGENT_KEY,AGENT_NAME,AGENT_CODE,AGENT_ADDRESS_1,AGENT_ADDRESS_2,AGENT_ADDRESS_3,AGENT_CITY,AGENT_STATE_CODE,AGENT_STATE_CODE_DESCRIPTION,AGENT_ZIP_CODE,AGENT_PHONE_NUMBER,AGENT_LIC_NUMBER,AGENT_TAX_ID,PRODUCERGROUP_NAME,BRANCHNAME)) ~> tgtHashKey",
				"srcHashKey, tgtHashKey lookup(SRC_AGENT_KEY == AGENT_KEY,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupKeyColumn",
				"lookupKeyColumn split(isNull(AGENT_KEY),",
				"     !isNull(AGENT_KEY)&&notEquals(srcHashKey,tgtHashKey),",
				"     disjoint: false) ~> split1@(Insert, Update, Noupdate)",
				"split1@Update alterRow(updateIf(true())) ~> updatecondition",
				"split1@Insert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          AGENT_ID as integer,",
				"          AGENT_KEY as string,",
				"          SOURCE as string,",
				"          AGENT_NAME as string,",
				"          AGENT_CODE as string,",
				"          AGENT_ADDRESS_1 as string,",
				"          AGENT_ADDRESS_2 as string,",
				"          AGENT_ADDRESS_3 as string,",
				"          AGENT_CITY as string,",
				"          AGENT_STATE_CODE as string,",
				"          AGENT_STATE_CODE_DESCRIPTION as string,",
				"          AGENT_ZIP_CODE as string,",
				"          AGENT_PHONE_NUMBER as string,",
				"          AGENT_APPT_DATE as date,",
				"          AGENT_TERM_DATE as date,",
				"          AGENT_STATUS_CODE as string,",
				"          MANAGER_NAME as string,",
				"          REP_CODE as string,",
				"          REGION_CODE as string,",
				"          AGENT_LIC_NUMBER as string,",
				"          AGENT_TAX_ID as string,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          PRODUCERGROUP_NAME as string,",
				"          BRANCHNAME as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          AGENT_KEY = SRC_AGENT_KEY,",
				"          AGENT_NAME = SRC_AGENT_NAME,",
				"          AGENT_CODE = SRC_AGENT_CODE,",
				"          AGENT_ADDRESS_1 = SRC_AGENT_ADDRESS_1,",
				"          AGENT_ADDRESS_2 = SRC_AGENT_ADDRESS_2,",
				"          AGENT_ADDRESS_3 = SRC_AGENT_ADDRESS_3,",
				"          AGENT_CITY = SRC_AGENT_CITY,",
				"          AGENT_STATE_CODE = SRC_AGENT_STATE_CODE,",
				"          AGENT_STATE_CODE_DESCRIPTION = SRC_AGENT_STATE_CODE_DESCRIPTION,",
				"          AGENT_ZIP_CODE = SRC_AGENT_ZIP_CODE,",
				"          AGENT_PHONE_NUMBER = SRC_AGENT_PHONE_NUMBER,",
				"          AGENT_LIC_NUMBER = SRC_AGENT_LIC_NUMBER,",
				"          AGENT_TAX_ID = SRC_AGENT_TAX_ID,",
				"          PRODUCERGROUP_NAME = SRC_PRODUCERGROUP_NAME,",
				"          BRANCHNAME = SRC_BRANCHNAME,",
				"          ETL_ACTIVE_FLAG = SRC_ETL_ACTIVE_FLAG,",
				"          ETL_ADD_DATETIMESTAMP = SRC_ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = SRC_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          SOURCE = SRC_SOURCE",
				"     )) ~> insertedRows",
				"updatecondition sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          AGENT_ID as integer,",
				"          AGENT_KEY as string,",
				"          SOURCE as string,",
				"          AGENT_NAME as string,",
				"          AGENT_CODE as string,",
				"          AGENT_ADDRESS_1 as string,",
				"          AGENT_ADDRESS_2 as string,",
				"          AGENT_ADDRESS_3 as string,",
				"          AGENT_CITY as string,",
				"          AGENT_STATE_CODE as string,",
				"          AGENT_STATE_CODE_DESCRIPTION as string,",
				"          AGENT_ZIP_CODE as string,",
				"          AGENT_PHONE_NUMBER as string,",
				"          AGENT_APPT_DATE as date,",
				"          AGENT_TERM_DATE as date,",
				"          AGENT_STATUS_CODE as string,",
				"          MANAGER_NAME as string,",
				"          REP_CODE as string,",
				"          REGION_CODE as string,",
				"          AGENT_LIC_NUMBER as string,",
				"          AGENT_TAX_ID as string,",
				"          ETL_ACTIVE_FLAG as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          PRODUCERGROUP_NAME as string,",
				"          BRANCHNAME as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['AGENT_KEY'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          AGENT_KEY = SRC_AGENT_KEY,",
				"          SOURCE = SRC_SOURCE,",
				"          AGENT_NAME = SRC_AGENT_NAME,",
				"          AGENT_CODE = SRC_AGENT_CODE,",
				"          AGENT_ADDRESS_1 = SRC_AGENT_ADDRESS_1,",
				"          AGENT_ADDRESS_2 = SRC_AGENT_ADDRESS_2,",
				"          AGENT_ADDRESS_3 = SRC_AGENT_ADDRESS_3,",
				"          AGENT_CITY = SRC_AGENT_CITY,",
				"          AGENT_STATE_CODE = SRC_AGENT_STATE_CODE,",
				"          AGENT_STATE_CODE_DESCRIPTION = SRC_AGENT_STATE_CODE_DESCRIPTION,",
				"          AGENT_ZIP_CODE = SRC_AGENT_ZIP_CODE,",
				"          AGENT_PHONE_NUMBER = SRC_AGENT_PHONE_NUMBER,",
				"          AGENT_LIC_NUMBER = SRC_AGENT_LIC_NUMBER,",
				"          AGENT_TAX_ID = SRC_AGENT_TAX_ID,",
				"          ETL_ACTIVE_FLAG = SRC_ETL_ACTIVE_FLAG,",
				"          ETL_ADD_DATETIMESTAMP = SRC_ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = SRC_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          PRODUCERGROUP_NAME = SRC_PRODUCERGROUP_NAME,",
				"          BRANCHNAME = SRC_BRANCHNAME",
				"     )) ~> updatedrows"
			]
		}
	}
}