{
	"name": "dimProduct",
	"properties": {
		"folder": {
			"name": "Insurance Analytics Azure/pcDimDataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_PC_EFFECTIVEDATEDFIELDS",
						"type": "DatasetReference"
					},
					"name": "pcEffectiveFields"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_POLICYPERIOD",
						"type": "DatasetReference"
					},
					"name": "PcPolicyPeriod"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_JOB",
						"type": "DatasetReference"
					},
					"name": "PcJob"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_POLICY",
						"type": "DatasetReference"
					},
					"name": "PcPolicy"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_ACCOUNT",
						"type": "DatasetReference"
					},
					"name": "PcAccount"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_POLICYUSERROLEASSIGN",
						"type": "DatasetReference"
					},
					"name": "PolicyUSerRoleAssign"
				},
				{
					"dataset": {
						"referenceName": "DS_PCTL_POLICYPERIODSTATUS",
						"type": "DatasetReference"
					},
					"name": "PctlPolicyPeriodstatus"
				},
				{
					"dataset": {
						"referenceName": "PC_PAYMENTPLANSUMMARY",
						"type": "DatasetReference"
					},
					"name": "PcPaymentPlanSummary"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_POLICYTERM",
						"type": "DatasetReference"
					},
					"name": "PcPolicyTerm"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_UWISSUE",
						"type": "DatasetReference"
					},
					"name": "PcUwissue"
				},
				{
					"dataset": {
						"referenceName": "DS_Pctl_job",
						"type": "DatasetReference"
					},
					"name": "PctlJob"
				},
				{
					"dataset": {
						"referenceName": "DS_PCTL_USERROLE",
						"type": "DatasetReference"
					},
					"name": "PctlUesrRole"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_USER",
						"type": "DatasetReference"
					},
					"name": "PcUser"
				},
				{
					"dataset": {
						"referenceName": "policyperiodfilter",
						"type": "DatasetReference"
					},
					"name": "policyperiodfilter"
				},
				{
					"dataset": {
						"referenceName": "DW_DIM_PRODUCT",
						"type": "DatasetReference"
					},
					"name": "tgtDimProduct"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DW_DIM_PRODUCT",
						"type": "DatasetReference"
					},
					"name": "insertedRows"
				},
				{
					"dataset": {
						"referenceName": "DW_DIM_PRODUCT",
						"type": "DatasetReference"
					},
					"name": "updatedrows"
				}
			],
			"transformations": [
				{
					"name": "joinPcEffectiveFieldsAndFilterForPolicyperiod"
				},
				{
					"name": "joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJob"
				},
				{
					"name": "joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicy"
				},
				{
					"name": "joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccount"
				},
				{
					"name": "joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssign"
				},
				{
					"name": "joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatus"
				},
				{
					"name": "joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummary"
				},
				{
					"name": "joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummaryAndPcPolicyTerm"
				},
				{
					"name": "joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummaryAndPcPolicyTermAndPcUwissue"
				},
				{
					"name": "joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummaryAndPcPolicyTermAndPcUwissueAndPctlJob"
				},
				{
					"name": "joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummaryAndPcPolicyTermAndPcUwissueAndPctlJobAndColumnTransformation1"
				},
				{
					"name": "joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummaryAndPcPolicyTermAndPcUwissueAndPctlJobAndColumnTransformation1AndPcUser"
				},
				{
					"name": "srcColumnTransformations"
				},
				{
					"name": "filterRows"
				},
				{
					"name": "aggregatetogetminvalue"
				},
				{
					"name": "FilterForPolicyperiod"
				},
				{
					"name": "FilterTypecode"
				},
				{
					"name": "filterRows2"
				},
				{
					"name": "ColumnTransformation1"
				},
				{
					"name": "tgtHashKey"
				},
				{
					"name": "srcHashKey"
				},
				{
					"name": "lookupKeyColumn"
				},
				{
					"name": "split1"
				},
				{
					"name": "updatecondition"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CreateUserID as long,",
				"          PolicyAddress as long,",
				"          PublicID as string,",
				"          SecondaryNamedInsured as long,",
				"          BillingContact as long,",
				"          ArchivePartition as long,",
				"          BeanVersion as integer,",
				"          CreateTime as timestamp,",
				"          ChangeType as integer,",
				"          BasedOnID as long,",
				"          UpdateUserID as long,",
				"          FixedID as long,",
				"          OfferingCode as string,",
				"          PrimaryNamedInsured as long,",
				"          EffectiveDate as timestamp,",
				"          UpdateTime as timestamp,",
				"          PrimaryLocation as long,",
				"          ProducerCodeID as long,",
				"          ID as long,",
				"          BranchID as long,",
				"          ExpirationDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> pcEffectiveFields",
				"source(output(",
				"          BasedOnDate as timestamp,",
				"          ValidQuote as boolean,",
				"          TotalPremiumRPT as decimal(18,2),",
				"          TotalPremiumRPT_cur as integer,",
				"          MinimumPremium as long,",
				"          Locked as boolean,",
				"          EditEffectiveDate as timestamp,",
				"          ValidReinsurance as boolean,",
				"          SeriesCheckingPatternCode as string,",
				"          ArchiveState as integer,",
				"          ArchiveSchemaInfo as long,",
				"          PNIContactDenorm as long,",
				"          LocationAutoNumberSeq as long,",
				"          EditLocked as boolean,",
				"          UpdateTime as timestamp,",
				"          RateAsOfDate as timestamp,",
				"          JobID as long,",
				"          ID as long,",
				"          SingleCheckingPatternCode as string,",
				"          UWCompany as long,",
				"          BillingMethod as integer,",
				"          PeriodID as long,",
				"          TransactionPremiumRPT as decimal(18,2),",
				"          AssignedRisk as boolean,",
				"          ExcludeReason as string,",
				"          TransactionPremiumRPT_cur as integer,",
				"          CreateUserID as long,",
				"          ArchiveFailureID as long,",
				"          AllowGapsBefore as boolean,",
				"          QuoteHidden as boolean,",
				"          BeanVersion as integer,",
				"          FailedOOSEValidation as boolean,",
				"          Retired as long,",
				"          BranchName as string,",
				"          Preempted as boolean,",
				"          UpdateUserID as long,",
				"          FuturePeriods as boolean,",
				"          PrimaryInsuredNameDenorm as string,",
				"          CancellationDate as timestamp,",
				"          ModelNumber as integer,",
				"          TemporaryBranch as boolean,",
				"          PrimaryInsuredName as string,",
				"          Segment as integer,",
				"          TermNumber as integer,",
				"          DepositOverridePct as decimal(12,3),",
				"          PolicyTermID as long,",
				"          WaiveDepositChange as boolean,",
				"          PeriodStart as timestamp,",
				"          ProducerCodeOfRecordID as long,",
				"          DoNotPurge as boolean,",
				"          PublicID as string,",
				"          AltBillingAccountNumber as string,",
				"          TotalCostRPT as decimal(18,2),",
				"          WrittenDate as timestamp,",
				"          TotalCostRPT_cur as integer,",
				"          CreateTime as timestamp,",
				"          MostRecentModel as boolean,",
				"          PolicyID as long,",
				"          ExcludedFromArchive as boolean,",
				"          AllocationOfRemainder as integer,",
				"          OverrideBillingAllocation as boolean,",
				"          ArchiveFailureDetailsID as long,",
				"          ModelDate as timestamp,",
				"          InvoiceStreamCode as string,",
				"          ModelNumberIndex as string,",
				"          BaseState as integer,",
				"          MostRecentModelIndex as string,",
				"          ArchivePartition as long,",
				"          CustomBilling as boolean,",
				"          TransactionCostRPT as decimal(18,2),",
				"          BranchNumber as integer,",
				"          FailedOOSEEvaluation as boolean,",
				"          DepositCollected as decimal(18,2),",
				"          TransactionCostRPT_cur as integer,",
				"          DepositCollected_cur as integer,",
				"          BasedOnID as long,",
				"          LockingColumn as integer,",
				"          RefundCalcMethod as integer,",
				"          ArchiveDate as timestamp,",
				"          BillImmediatelyPercentage as decimal(4,1),",
				"          Status as integer,",
				"          DepositAmount as decimal(18,2),",
				"          DepositAmount_cur as integer,",
				"          PeriodEnd as timestamp,",
				"          PreferredCoverageCurrency as integer,",
				"          PolicyNumber as string,",
				"          PreferredSettlementCurrency as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcPolicyPeriod",
				"source(output(",
				"          NotTakenNotifDate as timestamp,",
				"          ArchiveState as integer,",
				"          ArchiveSchemaInfo as long,",
				"          UpdateTime as timestamp,",
				"          NotificationDate as timestamp,",
				"          ID as long,",
				"          Source as integer,",
				"          ExcludeReason as string,",
				"          NextPurgeCheckDate as timestamp,",
				"          CreateUserID as long,",
				"          ArchiveFailureID as long,",
				"          RejectReason as integer,",
				"          CloseDate as timestamp,",
				"          BeanVersion as integer,",
				"          Retired as long,",
				"          CancelReasonCode as integer,",
				"          ChangePolicyNumber as boolean,",
				"          UpdateUserID as long,",
				"          PrimaryInsuredNameDenorm as string,",
				"          NonRenewalNotifDate as timestamp,",
				"          PrimaryInsuredName as string,",
				"          QuoteType as integer,",
				"          DateQuoteNeeded as timestamp,",
				"          PublicID as string,",
				"          SideBySide as boolean,",
				"          JobNumber as string,",
				"          RewriteType as integer,",
				"          CreateTime as timestamp,",
				"          AuditInformationID as long,",
				"          PolicyID as long,",
				"          ExcludedFromArchive as boolean,",
				"          RejectReasonText as string,",
				"          ArchiveFailureDetailsID as long,",
				"          RescindNotificationDate as timestamp,",
				"          PurgeStatus as integer,",
				"          InitialNotificationDate as timestamp,",
				"          LastNotifiedCancellationDate as timestamp,",
				"          JobGroup as long,",
				"          CancelProcessDate as timestamp,",
				"          RenewalCode as integer,",
				"          EscalateAfterHoldReleased as boolean,",
				"          ReinstateCode as integer,",
				"          RenewalNotifDate as timestamp,",
				"          PaymentReceived as decimal(18,2),",
				"          ArchivePartition as long,",
				"          PaymentReceived_cur as integer,",
				"          NotificationAckDate as timestamp,",
				"          ArchiveDate as timestamp,",
				"          BindOption as integer,",
				"          NonRenewalCode as integer,",
				"          Subtype as integer,",
				"          SubmissionDate as timestamp,",
				"          Description as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcJob",
				"source(output(",
				"          DoNotPurge as boolean,",
				"          PublicID as string,",
				"          PriorPremiums as decimal(18,2),",
				"          IssueDate as timestamp,",
				"          PriorPremiums_cur as integer,",
				"          MovedPolicySourceAccountID as long,",
				"          AccountID as long,",
				"          CreateTime as timestamp,",
				"          LossHistoryType as integer,",
				"          ExcludedFromArchive as boolean,",
				"          ArchiveState as integer,",
				"          ArchiveSchemaInfo as long,",
				"          ArchiveFailureDetailsID as long,",
				"          PackageRisk as integer,",
				"          NumPriorLosses as integer,",
				"          UpdateTime as timestamp,",
				"          PrimaryLanguage as integer,",
				"          DoNotArchive as boolean,",
				"          ID as long,",
				"          PrimaryLocale as integer,",
				"          ProductCode as string,",
				"          ExcludeReason as string,",
				"          CreateUserID as long,",
				"          ArchiveFailureID as long,",
				"          OriginalEffectiveDate as timestamp,",
				"          BeanVersion as integer,",
				"          ArchivePartition as long,",
				"          Retired as long,",
				"          UpdateUserID as long,",
				"          PriorTotalIncurred as decimal(18,2),",
				"          ArchiveDate as timestamp,",
				"          PriorTotalIncurred_cur as integer,",
				"          ProducerCodeOfServiceID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcPolicy",
				"source(output(",
				"          BusOpsDesc as string,",
				"          PublicID as string,",
				"          CreateTime as timestamp,",
				"          LinkContacts as boolean,",
				"          AccountOrgType as integer,",
				"          LocationAutoNumberSeq as long,",
				"          UpdateTime as timestamp,",
				"          ServiceTier as integer,",
				"          PrimaryLanguage as integer,",
				"          ID as long,",
				"          StateBureauNum as string,",
				"          PrimaryLocale as integer,",
				"          AccountStatus as integer,",
				"          Frozen as boolean,",
				"          CreateUserID as long,",
				"          YearBusinessStarted as integer,",
				"          IndustryCodeID as long,",
				"          BeanVersion as integer,",
				"          Retired as long,",
				"          LockingColumn as integer,",
				"          OtherOrgTypeDescription as string,",
				"          UpdateUserID as long,",
				"          AccountNumberDenorm as string,",
				"          AccountNumber as string,",
				"          PreferredCoverageCurrency as integer,",
				"          PreferredSettlementCurrency as integer,",
				"          OriginationDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcAccount",
				"source(output(",
				"          CreateUserID as long,",
				"          PreviousGroupID as long,",
				"          PublicID as string,",
				"          Active as boolean,",
				"          CloseDate as timestamp,",
				"          BeanVersion as integer,",
				"          CreateTime as timestamp,",
				"          Retired as long,",
				"          AssignedByUserID as long,",
				"          AssignedGroupID as long,",
				"          PolicyID as long,",
				"          UpdateUserID as long,",
				"          Comments as string,",
				"          AssignedUserID as long,",
				"          PreviousQueueID as long,",
				"          UpdateTime as timestamp,",
				"          Role as integer,",
				"          ID as long,",
				"          AssignmentDate as timestamp,",
				"          PreviousUserID as long,",
				"          AssignedQueueID as long,",
				"          AssignmentStatus as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PolicyUSerRoleAssign",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PctlPolicyPeriodstatus",
				"source(output(",
				"          Notes as string,",
				"          CreateUserID as long,",
				"          PublicID as string,",
				"          DownPayment as decimal(18,2),",
				"          Total as decimal(18,2),",
				"          Total_cur as integer,",
				"          DownPayment_cur as integer,",
				"          BeanVersion as integer,",
				"          ArchivePartition as long,",
				"          CreateTime as timestamp,",
				"          Retired as long,",
				"          PaymentPlanType as integer,",
				"          Name as string,",
				"          UpdateUserID as long,",
				"          InvoiceFrequency as integer,",
				"          ReportingPatternCode as string,",
				"          PolicyPeriod as long,",
				"          UpdateTime as timestamp,",
				"          BillingId as string,",
				"          Installment as decimal(18,2),",
				"          Installment_cur as integer,",
				"          ID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcPaymentPlanSummary",
				"source(output(",
				"          PublicID as string,",
				"          CreateTime as timestamp,",
				"          MostRecentTerm as boolean,",
				"          PolicyID as long,",
				"          GenerateReinsurables as boolean,",
				"          UpdateTime as timestamp,",
				"          FinalAuditOption as integer,",
				"          ID as long,",
				"          DepositReleased as boolean,",
				"          TotalEstimatedPremium as decimal(18,2),",
				"          TotalEstimatedPremium_cur as integer,",
				"          TotalReportedPremium as decimal(18,2),",
				"          TotalReportedPremium_cur as integer,",
				"          CreateUserID as long,",
				"          NonRenewReason as integer,",
				"          LastRestoreDate as timestamp,",
				"          NextArchiveCheckDate as timestamp,",
				"          BeanVersion as integer,",
				"          Retired as long,",
				"          PreRenewalDirection as integer,",
				"          DaysReported as integer,",
				"          PolicyTermArchiveState as integer,",
				"          UpdateUserID as long,",
				"          NextRenewalCheckDate as timestamp,",
				"          AffinityGroupID as long,",
				"          DepositAmount as decimal(18,2),",
				"          DepositAmount_cur as integer,",
				"          NonRenewAddExplanation as string,",
				"          Bound as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcPolicyTerm",
				"source(output(",
				"          LongDescription as string,",
				"          ShortDescription as string,",
				"          PublicID as string,",
				"          Active as boolean,",
				"          HasApprovalOrRejection as boolean,",
				"          CreateTime as timestamp,",
				"          ApprovalValue as string,",
				"          FixedID as long,",
				"          ApprovalDurationType as integer,",
				"          ApprovingUser as long,",
				"          EffectiveDate as timestamp,",
				"          UpdateTime as timestamp,",
				"          ApprovalBlockingPoint as integer,",
				"          CanEditApprovalBeforeBind as boolean,",
				"          ID as long,",
				"          ExpirationDate as timestamp,",
				"          CreateUserID as long,",
				"          IssueKey as string,",
				"          ArchivePartition as long,",
				"          BeanVersion as integer,",
				"          ChangeType as integer,",
				"          BasedOnID as long,",
				"          IssueTypeID as long,",
				"          UpdateUserID as long,",
				"          Valuee as string,",
				"          AutomaticApprovalCause as string,",
				"          BranchID as long,",
				"          ApprovalInvalidFrom as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcUwissue",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PctlJob",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PctlUesrRole",
				"source(output(",
				"          LoadCommandID as long,",
				"          PublicID as string,",
				"          UserType as integer,",
				"          UseProducerCodeSecurity as boolean,",
				"          UserSettingsID as long,",
				"          CreateTime as timestamp,",
				"          SessionTimeoutSecs as integer,",
				"          OrganizationID as long,",
				"          VacationStatus as integer,",
				"          Department as string,",
				"          ExternalUser as boolean,",
				"          UpdateTime as timestamp,",
				"          UseOrgAddress as boolean,",
				"          Language as integer,",
				"          ExperienceLevel as integer,",
				"          Locale as integer,",
				"          ID as long,",
				"          CreateUserID as long,",
				"          BeanVersion as integer,",
				"          DefaultPhoneCountry as integer,",
				"          Retired as long,",
				"          ValidationLevel as integer,",
				"          UpdateUserID as long,",
				"          CredentialID as long,",
				"          SystemUserType as integer,",
				"          DefaultCountry as integer,",
				"          TimeZone as integer,",
				"          ContactID as long,",
				"          JobTitle as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcUser",
				"source(output(",
				"          BasedOnDate as timestamp,",
				"          ValidQuote as boolean,",
				"          TotalPremiumRPT as decimal(18,2),",
				"          TotalPremiumRPT_cur as integer,",
				"          MinimumPremium as long,",
				"          Locked as boolean,",
				"          EditEffectiveDate as timestamp,",
				"          ValidReinsurance as boolean,",
				"          SeriesCheckingPatternCode as string,",
				"          ArchiveState as integer,",
				"          ArchiveSchemaInfo as long,",
				"          PNIContactDenorm as long,",
				"          LocationAutoNumberSeq as long,",
				"          EditLocked as boolean,",
				"          UpdateTime as timestamp,",
				"          RateAsOfDate as timestamp,",
				"          JobID as long,",
				"          ID as long,",
				"          SingleCheckingPatternCode as string,",
				"          UWCompany as long,",
				"          BillingMethod as integer,",
				"          PeriodID as long,",
				"          TransactionPremiumRPT as decimal(18,2),",
				"          AssignedRisk as boolean,",
				"          ExcludeReason as string,",
				"          TransactionPremiumRPT_cur as integer,",
				"          CreateUserID as long,",
				"          ArchiveFailureID as long,",
				"          AllowGapsBefore as boolean,",
				"          QuoteHidden as boolean,",
				"          BeanVersion as integer,",
				"          FailedOOSEValidation as boolean,",
				"          Retired as long,",
				"          BranchName as string,",
				"          Preempted as boolean,",
				"          UpdateUserID as long,",
				"          FuturePeriods as boolean,",
				"          PrimaryInsuredNameDenorm as string,",
				"          CancellationDate as timestamp,",
				"          ModelNumber as integer,",
				"          TemporaryBranch as boolean,",
				"          PrimaryInsuredName as string,",
				"          Segment as integer,",
				"          TermNumber as integer,",
				"          DepositOverridePct as decimal(12,3),",
				"          PolicyTermID as long,",
				"          WaiveDepositChange as boolean,",
				"          PeriodStart as timestamp,",
				"          ProducerCodeOfRecordID as long,",
				"          DoNotPurge as boolean,",
				"          PublicID as string,",
				"          AltBillingAccountNumber as string,",
				"          TotalCostRPT as decimal(18,2),",
				"          WrittenDate as timestamp,",
				"          TotalCostRPT_cur as integer,",
				"          CreateTime as timestamp,",
				"          MostRecentModel as boolean,",
				"          PolicyID as long,",
				"          ExcludedFromArchive as boolean,",
				"          AllocationOfRemainder as integer,",
				"          OverrideBillingAllocation as boolean,",
				"          ArchiveFailureDetailsID as long,",
				"          ModelDate as timestamp,",
				"          InvoiceStreamCode as string,",
				"          ModelNumberIndex as string,",
				"          BaseState as integer,",
				"          MostRecentModelIndex as string,",
				"          ArchivePartition as long,",
				"          CustomBilling as boolean,",
				"          TransactionCostRPT as decimal(18,2),",
				"          BranchNumber as integer,",
				"          FailedOOSEEvaluation as boolean,",
				"          DepositCollected as decimal(18,2),",
				"          TransactionCostRPT_cur as integer,",
				"          DepositCollected_cur as integer,",
				"          BasedOnID as long,",
				"          LockingColumn as integer,",
				"          RefundCalcMethod as integer,",
				"          ArchiveDate as timestamp,",
				"          BillImmediatelyPercentage as decimal(4,1),",
				"          Status as integer,",
				"          DepositAmount as decimal(18,2),",
				"          DepositAmount_cur as integer,",
				"          PeriodEnd as timestamp,",
				"          PreferredCoverageCurrency as integer,",
				"          PolicyNumber as string,",
				"          PreferredSettlementCurrency as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> policyperiodfilter",
				"source(output(",
				"          PRODUCT_ID as integer,",
				"          SOURCE as string,",
				"          LOB_CODE as string,",
				"          LOB_CODE_DESC as string,",
				"          LINE_DIV_CODE as string,",
				"          LINE_DIV_CODE_DESC as string,",
				"          PRODUCT_CODE as string,",
				"          PROG_CD as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tgtDimProduct",
				"pcEffectiveFields, FilterForPolicyperiod join(BranchID == policyperiodfilter@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPcEffectiveFieldsAndFilterForPolicyperiod",
				"joinPcEffectiveFieldsAndFilterForPolicyperiod, PcJob join(JobID == PcJob@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJob",
				"joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJob, PcPolicy join(policyperiodfilter@PolicyID == PcPolicy@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicy",
				"joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicy, PcAccount join(AccountID == PcAccount@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccount",
				"joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccount, PolicyUSerRoleAssign join(policyperiodfilter@PolicyID == PolicyUSerRoleAssign@PolicyID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssign",
				"joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssign, PctlPolicyPeriodstatus join(Status == PctlPolicyPeriodstatus@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatus",
				"joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatus, PcPaymentPlanSummary join(policyperiodfilter@ID == PolicyPeriod,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummary",
				"joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummary, PcPolicyTerm join(PcPolicy@ID == PcPolicyTerm@PolicyID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummaryAndPcPolicyTerm",
				"joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummaryAndPcPolicyTerm, PcUwissue join(PcPolicy@PublicID == PcUwissue@PublicID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummaryAndPcPolicyTermAndPcUwissue",
				"joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummaryAndPcPolicyTermAndPcUwissue, PctlJob join(Subtype == PctlJob@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummaryAndPcPolicyTermAndPcUwissueAndPctlJob",
				"joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummaryAndPcPolicyTermAndPcUwissueAndPctlJob, ColumnTransformation1 join(Role == PctlUesrRole@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummaryAndPcPolicyTermAndPcUwissueAndPctlJobAndColumnTransformation1",
				"joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummaryAndPcPolicyTermAndPcUwissueAndPctlJobAndColumnTransformation1, PcUser join(PcJob@UpdateUserID == PcUser@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummaryAndPcPolicyTermAndPcUwissueAndPctlJobAndColumnTransformation1AndPcUser",
				"joinPcEffectiveFieldsAndFilterForPolicyperiodAndPcJobAndPcPolicyAndPcAccountAndPolicyUSerRoleAssignAndPctlPolicyPeriodstatusAndPcPaymentPlanSummaryAndPcPolicyTermAndPcUwissueAndPctlJobAndColumnTransformation1AndPcUser derive(SRC_SOURCE = 'PC',",
				"          SRC_LINE_DIV_CODE = case(ProductCode== 'PersonalAuto','P',ProductCode=='InlandMarine','P',ProductCode=='Homeowners','P', ProductCode=='BusinessAuto','C',ProductCode=='BusinessOwners','C',ProductCode=='CommercialProperty','C',ProductCode=='GeneralLiability','C',ProductCode=='WorkersComp','C',ProductCode=='CommercialPackage','C','U'),",
				"          SRC_ETL_ACTIVE_FLAG = 'Y',",
				"          SRC_ETL_ADD_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_ETL_LAST_UPDATE_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_LOB_CODE = ProductCode,",
				"          SRC_PRODUCT_CODE = OfferingCode) ~> srcColumnTransformations",
				"PcPolicyPeriod filter((Retired== 0 && Status == 9 && ModelNumberIndex =='1')) ~> filterRows",
				"filterRows aggregate(minID = min(ID)) ~> aggregatetogetminvalue",
				"policyperiodfilter, aggregatetogetminvalue lookup(ID == minID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> FilterForPolicyperiod",
				"PctlUesrRole filter(TYPECODE=='Underwriter') ~> FilterTypecode",
				"srcColumnTransformations filter(PctlPolicyPeriodstatus@TYPECODE =='Bound'&& MostRecentTerm==true()&&Role==d_id&&PcPaymentPlanSummary@Retired==0) ~> filterRows2",
				"FilterTypecode derive(d_id = ID) ~> ColumnTransformation1",
				"tgtDimProduct derive(TgtHashKey = sha1(SOURCE,LOB_CODE,LINE_DIV_CODE,PRODUCT_CODE)) ~> tgtHashKey",
				"filterRows2 derive(SrcHashKey = sha1(SRC_SOURCE,SRC_LOB_CODE,SRC_LINE_DIV_CODE,SRC_PRODUCT_CODE)) ~> srcHashKey",
				"srcHashKey, tgtHashKey lookup(SrcHashKey != TgtHashKey,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'both')~> lookupKeyColumn",
				"lookupKeyColumn split(isNull(PRODUCT_ID),",
				"     !isNull(PRODUCT_ID)&&notEquals(SrcHashKey,TgtHashKey),",
				"     disjoint: false) ~> split1@(Insert, Update)",
				"split1@Update alterRow(updateIf(true())) ~> updatecondition",
				"split1@Insert sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     input(",
				"          PRODUCT_ID as integer,",
				"          SOURCE as string,",
				"          LOB_CODE as string,",
				"          LOB_CODE_DESC as string,",
				"          LINE_DIV_CODE as string,",
				"          LINE_DIV_CODE_DESC as string,",
				"          PRODUCT_CODE as string,",
				"          PROG_CD as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SOURCE = SRC_SOURCE,",
				"          LOB_CODE = SRC_LOB_CODE,",
				"          LINE_DIV_CODE = SRC_LINE_DIV_CODE,",
				"          PRODUCT_CODE = SRC_PRODUCT_CODE,",
				"          ETL_ADD_DATETIMESTAMP = SRC_ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = SRC_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ETL_ACTIVE_FLAG = SRC_ETL_ACTIVE_FLAG",
				"     )) ~> insertedRows",
				"updatecondition sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PRODUCT_ID as integer,",
				"          SOURCE as string,",
				"          LOB_CODE as string,",
				"          LOB_CODE_DESC as string,",
				"          LINE_DIV_CODE as string,",
				"          LINE_DIV_CODE_DESC as string,",
				"          PRODUCT_CODE as string,",
				"          PROG_CD as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['PRODUCT_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SOURCE = SRC_SOURCE,",
				"          LOB_CODE = SRC_LOB_CODE,",
				"          LINE_DIV_CODE = SRC_LINE_DIV_CODE,",
				"          PRODUCT_CODE = SRC_PRODUCT_CODE,",
				"          ETL_ADD_DATETIMESTAMP = SRC_ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = SRC_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ETL_ACTIVE_FLAG = SRC_ETL_ACTIVE_FLAG,",
				"          PRODUCT_ID",
				"     )) ~> updatedrows"
			]
		}
	}
}