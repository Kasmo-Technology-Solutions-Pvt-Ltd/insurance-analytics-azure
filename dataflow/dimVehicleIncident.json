{
	"name": "dimVehicleIncident",
	"properties": {
		"folder": {
			"name": "Insurance Analytics Azure/ccDimDataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_CC_INCIDENT",
						"type": "DatasetReference"
					},
					"name": "ccIncident"
				},
				{
					"dataset": {
						"referenceName": "DS_CCTL_INCIDENT",
						"type": "DatasetReference"
					},
					"name": "cctlIncident"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_VEHICLE",
						"type": "DatasetReference"
					},
					"name": "ccVehicle"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_VEHICLE_INCIDENT",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_DIM_VEHICLE_INCIDENT",
						"type": "DatasetReference"
					},
					"name": "dimCcVehicleIncident"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_VEHICLE_INCIDENT",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "joinSrcCcIncidentAndSrcCctlIncident"
				},
				{
					"name": "joinSrcCcIncidentAndSrcCctlIncidentAndSrcCcVehicle"
				},
				{
					"name": "columnTransformations"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "split1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          RentalRequired as boolean,",
				"          ReturnToWorkActual as boolean,",
				"          VehicleDriveable as boolean,",
				"          FireBurnEngine as boolean,",
				"          RelatedTripRUID as long,",
				"          VehicleTitleRecvd as integer,",
				"          PropertyID as long,",
				"          DamagedAreaSize as integer,",
				"          FireProtectionAvailable as boolean,",
				"          RoofMaterial as integer,",
				"          VehicleRollOver as boolean,",
				"          HitAndRun as boolean,",
				"          VehicleUseReason as integer,",
				"          StartDate as timestamp,",
				"          RecovClassType as integer,",
				"          BeanVersion as integer,",
				"          SalvageStorage as decimal(18,2),",
				"          DelayOnly as boolean,",
				"          AirbagsMissing as boolean,",
				"          RentalAgency as string,",
				"          SprinkRetServ as integer,",
				"          LossofUse as boolean,",
				"          MovePermission as boolean,",
				"          AffdvCmplInd as integer,",
				"          IncludeContentLineItems as boolean,",
				"          VehicleParked as boolean,",
				"          InternalUserID as long,",
				"          MealsDays as integer,",
				"          NumberOfPeopleOnPolicy as integer,",
				"          SalvagePrep as decimal(18,2),",
				"          TrafficViolation as integer,",
				"          CitationIssued as integer,",
				"          MinorOnPolicy as integer,",
				"          EstimatesReceived as integer,",
				"          AmbulanceUsed as boolean,",
				"          EquipmentFailure as boolean,",
				"          StorageFeeAmt as decimal(18,2),",
				"          TotalLoss as boolean,",
				"          VehicleSubmerged as boolean,",
				"          FireBurnWindshield as boolean,",
				"          NumSprinkOper as integer,",
				"          MealsPeople as integer,",
				"          AlarmType as integer,",
				"          AssessmentType as integer,",
				"          InspectionRequired as boolean,",
				"          ReturnToWorkDate as timestamp,",
				"          DateVehicleSold as timestamp,",
				"          PublicID as string,",
				"          OccupancyType as integer,",
				"          CarrierCompensatedAmount as decimal(18,2),",
				"          AppraisalFirstAppointment as timestamp,",
				"          Appraisal as boolean,",
				"          RentalEndDate as timestamp,",
				"          OwnersPermission as boolean,",
				"          VehicleDirection as integer,",
				"          AssessmentCloseDate as timestamp,",
				"          RecovState as integer,",
				"          SalvageTitle as decimal(18,2),",
				"          DriverRelation as integer,",
				"          MaterialsDamaged as string,",
				"          RentalReserveNo as string,",
				"          LossArea as integer,",
				"          GeneralInjuryType as integer,",
				"          VehicleAge10Years as boolean,",
				"          UpdateUserID as long,",
				"          ClaimID as long,",
				"          RecovDate as timestamp,",
				"          UpdateTime as timestamp,",
				"          WhenToView as string,",
				"          FireBurnDash as boolean,",
				"          ExtDamagetxt as string,",
				"          VehicleLossParty as integer,",
				"          Speed as integer,",
				"          EstRepairCost as decimal(18,2),",
				"          Collision as boolean,",
				"          AssessmentComment as string,",
				"          ClaimIncident as boolean,",
				"          AntiThftInd as boolean,",
				"          LocationInd as boolean,",
				"          CreateTime as timestamp,",
				"          StorageAccrInd as integer,",
				"          SprinklerType as integer,",
				"          FloodSaltWater as boolean,",
				"          CollisionPoint as integer,",
				"          DisabledDueToAccident as integer,",
				"          VehiclePolStatus as integer,",
				"          InteriorMissing as boolean,",
				"          WaterLevelSeats as boolean,",
				"          DateVehicleRecovered as timestamp,",
				"          RepWhereDisInd as boolean,",
				"          Extrication as boolean,",
				"          Retired as long,",
				"          SalvageTow as decimal(18,2),",
				"          VehicleTitleReqd as integer,",
				"          IncludeLineItems as boolean,",
				"          Impairment as decimal(4,1),",
				"          LossDesc as string,",
				"          DateSalvageAssigned as timestamp,",
				"          PercentageDrivenByMinor as integer,",
				"          AssessmentTargetCloseDate as timestamp,",
				"          PropertySize as integer,",
				"          OdomRead as integer,",
				"          Severity as integer,",
				"          ReturnToModWorkValid as boolean,",
				"          NumSprinkler as integer,",
				"          BaggageType as integer,",
				"          ID as long,",
				"          SalvageNet as decimal(18,2),",
				"          FencesDamaged as boolean,",
				"          WaterLevelDash as boolean,",
				"          VehicleID as long,",
				"          StorageFclty as string,",
				"          RecoveryLocationID as long,",
				"          TotalLossPoints as integer,",
				"          DescOther as string,",
				"          RecovCondType as integer,",
				"          LossOccured as integer,",
				"          BodyShopSelected as boolean,",
				"          DriverRelToOwner as integer,",
				"          VehicleAge5Years as boolean,",
				"          SalvageProceeds as decimal(18,2),",
				"          VehicleACV as decimal(18,2),",
				"          Subtype as integer,",
				"          RentalDailyRate as decimal(18,2),",
				"          RentalBeginDate as timestamp,",
				"          ExtWallMat as integer,",
				"          TripRUID as long,",
				"          MealsRate as decimal(18,2),",
				"          MoldInvolved as integer,",
				"          LocationAddress as long,",
				"          VehicleOperable as boolean,",
				"          AlreadyRepaired as boolean,",
				"          LotNumber as string,",
				"          VehTowedInd as boolean,",
				"          Mileage100K as boolean,",
				"          BaggageMissingFrom as timestamp,",
				"          LossEstimate as decimal(18,2),",
				"          DetailedInjuryType as integer,",
				"          VehicleType as integer,",
				"          EstDamageType as integer,",
				"          CarrierCompensated as boolean,",
				"          PhantomVehicle as boolean,",
				"          EMSInd as boolean,",
				"          VehStolenInd as boolean,",
				"          VehCondType as integer,",
				"          ArchivePartition as long,",
				"          LostWages as boolean,",
				"          VehLockInd as boolean,",
				"          CreateUserID as long,",
				"          YearBuilt as timestamp,",
				"          AssessmentName as string,",
				"          OwnerRetainingSalvage as boolean,",
				"          NumStories as integer,",
				"          EstRepairTime as string,",
				"          Description as string,",
				"          ComponentsMissing as boolean,",
				"          ReturnToModWorkActual as boolean,",
				"          LoadCommandID as long,",
				"          RecovInd as integer,",
				"          SalvageCompany as string,",
				"          ClassType as integer,",
				"          VehicleLocation as string,",
				"          ReturnToWorkValid as boolean,",
				"          BaggageRecoveredOn as timestamp,",
				"          DebrisRemovalInd as boolean,",
				"          FireProtDetails as string,",
				"          AssessmentStatus as integer,",
				"          MedicalTreatmentType as integer,",
				"          YearsInHome as integer,",
				"          ReturnToModWorkDate as timestamp,",
				"          AirbagsDeployed as boolean,",
				"          HazardInvolved as integer,",
				"          PropertyDesc as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccIncident",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> cctlIncident",
				"source(output(",
				"          Model as string,",
				"          Retired as long,",
				"          Style as integer,",
				"          PublicID as string,",
				"          BoatType as integer,",
				"          Vin as string,",
				"          ArchivePartition as long,",
				"          SerialNumber as string,",
				"          Year as integer,",
				"          Loan as boolean,",
				"          LicensePlate as string,",
				"          Manufacturer as integer,",
				"          CreateUserID as long,",
				"          LoanMonthlyPayment as decimal(18,2),",
				"          ID as long,",
				"          BeanVersion as integer,",
				"          OffRoadStyle as integer,",
				"          LoanPayoffAmount as decimal(18,2),",
				"          UpdateUserID as long,",
				"          LoadCommandID as long,",
				"          UpdateTime as timestamp,",
				"          Color as string,",
				"          PolicySystemId as string,",
				"          State as integer,",
				"          CreateTime as timestamp,",
				"          LoanMonthsRemaining as integer,",
				"          Make as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccVehicle",
				"source(output(",
				"          VEHICLE_INCIDENT_ID as integer,",
				"          SOURCE as string,",
				"          ICDNT_KEY as string,",
				"          VEHICLE_MAKE as string,",
				"          VEHICLE_MODEL as string,",
				"          VEHICLE_VIN as string,",
				"          VEHICLE_YEAR as integer,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"ccIncident, cctlIncident join(ccIncident@ID == cctlIncident@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSrcCcIncidentAndSrcCctlIncident",
				"joinSrcCcIncidentAndSrcCctlIncident, ccVehicle join(cctlIncident@ID == ccVehicle@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSrcCcIncidentAndSrcCctlIncidentAndSrcCcVehicle",
				"joinSrcCcIncidentAndSrcCctlIncidentAndSrcCcVehicle derive(SRC_ETL_ACTIVE_FLAG = 'Y',",
				"          SRC_ETL_ADD_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_ETL_LAST_UPDATE_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_SOURCE = 'CC',",
				"          SRC_ICDNT_KEY = concat('CC-',ccIncident@PublicID),",
				"          SRC_VEH_MAKE = Make,",
				"          SRC_VEH_MODEL = Model,",
				"          SRC_VEH_VIN = Vin,",
				"          SRC_VEHICLE_YEAR = Year) ~> columnTransformations",
				"columnTransformations derive(srcHashKey = sha1(SRC_ICDNT_KEY,SRC_SOURCE,SRC_VEH_MAKE,SRC_VEH_MODEL,SRC_VEH_VIN,SRC_VEHICLE_YEAR)) ~> derivedColumn1",
				"source1 derive(tgtHashKey = sha1(ICDNT_KEY,SOURCE,VEHICLE_MAKE,VEHICLE_MODEL,VEHICLE_VIN,VEHICLE_YEAR)) ~> derivedColumn2",
				"derivedColumn1, derivedColumn2 lookup(SRC_ICDNT_KEY == ICDNT_KEY,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 split(isNull(ICDNT_KEY),",
				"     !isNull(ICDNT_KEY)&&notEquals(srcHashKey, tgtHashKey),",
				"     disjoint: false) ~> split1@(insert, update, noupdate)",
				"split1@update alterRow(updateIf(true())) ~> alterRow1",
				"split1@insert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          VEHICLE_INCIDENT_ID as integer,",
				"          SOURCE as string,",
				"          ICDNT_KEY as string,",
				"          VEHICLE_MAKE as string,",
				"          VEHICLE_MODEL as string,",
				"          VEHICLE_VIN as string,",
				"          VEHICLE_YEAR as integer,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SOURCE = SRC_SOURCE,",
				"          ICDNT_KEY = SRC_ICDNT_KEY,",
				"          VEHICLE_MAKE = SRC_VEH_MAKE,",
				"          VEHICLE_MODEL = SRC_VEH_MODEL,",
				"          VEHICLE_VIN = SRC_VEH_VIN,",
				"          VEHICLE_YEAR = SRC_VEHICLE_YEAR,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = SRC_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ETL_ADD_DATETIMESTAMP = SRC_ETL_ADD_DATETIMESTAMP,",
				"          ETL_ACTIVE_FLAG = SRC_ETL_ACTIVE_FLAG",
				"     )) ~> dimCcVehicleIncident",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          VEHICLE_INCIDENT_ID as integer,",
				"          SOURCE as string,",
				"          ICDNT_KEY as string,",
				"          VEHICLE_MAKE as string,",
				"          VEHICLE_MODEL as string,",
				"          VEHICLE_VIN as string,",
				"          VEHICLE_YEAR as integer,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['ICDNT_KEY'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ICDNT_KEY = SRC_ICDNT_KEY,",
				"          SOURCE = SRC_SOURCE,",
				"          VEHICLE_MAKE = SRC_VEH_MAKE,",
				"          VEHICLE_MODEL = SRC_VEH_MODEL,",
				"          VEHICLE_VIN = SRC_VEH_VIN,",
				"          VEHICLE_YEAR = SRC_VEHICLE_YEAR,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = SRC_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ETL_ADD_DATETIMESTAMP,",
				"          ETL_ACTIVE_FLAG = SRC_ETL_ACTIVE_FLAG",
				"     )) ~> sink1"
			]
		}
	}
}