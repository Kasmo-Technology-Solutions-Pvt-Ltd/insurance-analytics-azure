{
	"name": "dimNote",
	"properties": {
		"folder": {
			"name": "Insurance Analytics Azure/ccDimDataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_CC_USER",
						"type": "DatasetReference"
					},
					"name": "ccUser"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_NOTE",
						"type": "DatasetReference"
					},
					"name": "ccNote"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_CONTACT",
						"type": "DatasetReference"
					},
					"name": "ccContact"
				},
				{
					"dataset": {
						"referenceName": "DS_CC_CLAIM",
						"type": "DatasetReference"
					},
					"name": "ccClaim"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_NOTE",
						"type": "DatasetReference"
					},
					"name": "tgtCcDimNote"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_DIM_NOTE",
						"type": "DatasetReference"
					},
					"name": "ccDimNote"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_NOTE",
						"type": "DatasetReference"
					},
					"name": "updateCondtion"
				}
			],
			"transformations": [
				{
					"name": "joinccNoteAndccUser"
				},
				{
					"name": "joinccNoteAndccUserAndccContact"
				},
				{
					"name": "joinccNoteAndccUserAndccContactAndccClaim"
				},
				{
					"name": "srcClmnTransformations"
				},
				{
					"name": "srcHashKey"
				},
				{
					"name": "tgtHashKey"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "update"
				},
				{
					"name": "updateCondition"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ValidationLevel as integer,",
				"          ExternalUser as boolean,",
				"          Retired as long,",
				"          OrganizationID as long,",
				"          VacationStatus as integer,",
				"          PublicID as string,",
				"          CreateUserID as long,",
				"          CredentialID as long,",
				"          DefaultCountry as integer,",
				"          ID as long,",
				"          BeanVersion as integer,",
				"          TimeZone as integer,",
				"          Department as string,",
				"          UpdateUserID as long,",
				"          PolicyType as integer,",
				"          DefaultPhoneCountry as integer,",
				"          UserSettingsID as long,",
				"          LoadCommandID as long,",
				"          ContactID as long,",
				"          AuthorityProfileID as long,",
				"          UpdateTime as timestamp,",
				"          Locale as integer,",
				"          ExperienceLevel as integer,",
				"          QuickClaim as integer,",
				"          CreateTime as timestamp,",
				"          LossType as integer,",
				"          SystemUserType as integer,",
				"          Language as integer,",
				"          NewlyAssignedActivities as integer,",
				"          JobTitle as string,",
				"          OffsetStatsUpdateTime as timestamp,",
				"          SessionTimeoutSecs as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccUser",
				"source(output(",
				"          Body as string,",
				"          Retired as long,",
				"          Subject as string,",
				"          ClaimID as long,",
				"          LoadCommandID as long,",
				"          Confidential as boolean,",
				"          AuthorID as long,",
				"          SecurityType as integer,",
				"          MatterID as long,",
				"          UpdateTime as timestamp,",
				"          PublicID as string,",
				"          ClaimContactID as long,",
				"          ArchivePartition as long,",
				"          ServiceRequestID as long,",
				"          CreateUserID as long,",
				"          AuthoringDate as timestamp,",
				"          ActivityID as long,",
				"          ExposureID as long,",
				"          CreateTime as timestamp,",
				"          ID as long,",
				"          Topic as integer,",
				"          Language as integer,",
				"          BeanVersion as integer,",
				"          UpdateUserID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccNote",
				"source(output(",
				"          ValidationLevel as integer,",
				"          LawFirmSpecialty as integer,",
				"          Retired as long,",
				"          FirstNameKanji as string,",
				"          EmailAddress2 as string,",
				"          SpecialtyType as integer,",
				"          EmailAddress1 as string,",
				"          LastName as string,",
				"          FaxPhoneExtension as string,",
				"          AutoSync as integer,",
				"          Admin as boolean,",
				"          HomePhone as string,",
				"          TaxID as string,",
				"          W9ReceivedDate as timestamp,",
				"          LicenseNumber as string,",
				"          PrimaryPhone as integer,",
				"          AdjudicatorLicense as string,",
				"          AutoRepairLicense as string,",
				"          AutoTowingLicense as string,",
				"          ID as long,",
				"          W9Received as boolean,",
				"          BeanVersion as integer,",
				"          PrimaryLocale as integer,",
				"          Score as integer,",
				"          NameDenorm as string,",
				"          AddressBookUID as string,",
				"          PrimaryLanguage as integer,",
				"          AttorneySpecialty as integer,",
				"          DoctorSpecialty as integer,",
				"          Suffix as integer,",
				"          FormerName as string,",
				"          NumDependents as integer,",
				"          Prefix as integer,",
				"          NameKanji as string,",
				"          HomePhoneCountry as integer,",
				"          TaxFilingStatus as integer,",
				"          Notes as string,",
				"          PolicySystemId as string,",
				"          DateOfBirth as timestamp,",
				"          Subtype as integer,",
				"          CellPhoneCountry as integer,",
				"          AdjudicativeDomain as integer,",
				"          CellPhone as string,",
				"          MedicalOrgSpecialty as integer,",
				"          Gender as integer,",
				"          FaxPhoneCountry as integer,",
				"          FaxPhone as string,",
				"          VendorNumber as string,",
				"          AttorneyLicense as string,",
				"          CellPhoneExtension as string,",
				"          VendorType as integer,",
				"          TaxStatus as integer,",
				"          EmployeeNumber as string,",
				"          WorkPhone as string,",
				"          NumDependentsU25 as integer,",
				"          HomePhoneExtension as string,",
				"          Particle as string,",
				"          PublicID as string,",
				"          ArchivePartition as long,",
				"          W9ValidTo as timestamp,",
				"          PendingLinkMessage as boolean,",
				"          CreateUserID as long,",
				"          Occupation as string,",
				"          LoadRelatedContacts as boolean,",
				"          VenueType as integer,",
				"          FirstName as string,",
				"          LastNameDenorm as string,",
				"          MaritalStatus as integer,",
				"          NumDependentsU18 as integer,",
				"          PrimaryAddressID as long,",
				"          FirstNameDenorm as string,",
				"          WorkPhoneCountry as integer,",
				"          UpdateUserID as long,",
				"          WorkPhoneExtension as string,",
				"          LoadCommandID as long,",
				"          UpdateTime as timestamp,",
				"          LicenseState as integer,",
				"          Name as string,",
				"          PreferredCurrency as integer,",
				"          MedicalLicense as string,",
				"          MiddleName as string,",
				"          LastNameKanji as string,",
				"          WithholdingRate as decimal(4,1),",
				"          OrganizationType as integer,",
				"          CreateTime as timestamp,",
				"          W9ValidFrom as timestamp,",
				"          Preferred as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccContact",
				"source(output(",
				"          HazardousWaste as boolean,",
				"          SubrogationStatus as integer,",
				"          MMIdate as timestamp,",
				"          ReinsuranceReportable as boolean,",
				"          EmpSentMPNNotice as timestamp,",
				"          InsurerSentMPNNotice as timestamp,",
				"          SIEscalateSIU as integer,",
				"          StateFileNumber as string,",
				"          BeanVersion as integer,",
				"          StorageLocationState as integer,",
				"          Currency as integer,",
				"          Weather as integer,",
				"          SIEscalateSIUdate as timestamp,",
				"          LockingColumn as integer,",
				"          ReportedDate as timestamp,",
				"          PurgeDate as timestamp,",
				"          LargeLossNotificationStatus as integer,",
				"          OtherRecovStatus as integer,",
				"          SalvageStatus as integer,",
				"          LossLocationID as long,",
				"          SIUStatus as integer,",
				"          StorageCategory as integer,",
				"          JurisdictionState as integer,",
				"          ISOReceiveDate as timestamp,",
				"          FaultRating as integer,",
				"          PolicyID as long,",
				"          LossType as integer,",
				"          CloseDate as timestamp,",
				"          EmploymentInjury as boolean,",
				"          StorageType as integer,",
				"          DateFormRetByEmp as timestamp,",
				"          LocationOfTheft as integer,",
				"          ClosedOutcome as integer,",
				"          AssignmentDate as timestamp,",
				"          PreviousUserID as long,",
				"          ClaimTier as integer,",
				"          ReopenedReason as integer,",
				"          EmployerValidityReason as string,",
				"          AssignedByUserID as long,",
				"          PublicID as string,",
				"          LitigationStatus as integer,",
				"          DateEligibleForArchive as timestamp,",
				"          FlaggedReason as string,",
				"          LossCause as integer,",
				"          LossDate as timestamp,",
				"          InjuredRegularJob as boolean,",
				"          ClaimantDenormID as long,",
				"          Segment as integer,",
				"          ISOStatus as integer,",
				"          StorageVolumes as string,",
				"          AssignedGroupID as long,",
				"          UpdateUserID as long,",
				"          AssignedQueueID as long,",
				"          ExposureBegan as timestamp,",
				"          SIScore as integer,",
				"          Mold as boolean,",
				"          WorkloadUpdated as timestamp,",
				"          Strategy as integer,",
				"          CurrentConditions as boolean,",
				"          UpdateTime as timestamp,",
				"          LocationCodeID as long,",
				"          PTPinMPN as boolean,",
				"          HospitalDate as timestamp,",
				"          SupplementalWorkloadWeight as integer,",
				"          FurtherTreatment as boolean,",
				"          SafetyEquipUsed as boolean,",
				"          FlaggedDate as timestamp,",
				"          ReOpenDate as timestamp,",
				"          CreateTime as timestamp,",
				"          StateAckNumber as string,",
				"          StorageDate as timestamp,",
				"          LossLocationCode as string,",
				"          AgencyId as string,",
				"          Fault as decimal(4,1),",
				"          StatuteDate as timestamp,",
				"          ValidationLevel as integer,",
				"          ModifiedDutyAvail as boolean,",
				"          Retired as long,",
				"          HospitalDays as integer,",
				"          ExposureEnded as timestamp,",
				"          DateRptdToEmployer as timestamp,",
				"          DrugsInvolved as integer,",
				"          ISOKnown as boolean,",
				"          ComputerSecurity as boolean,",
				"          InjuredOnPremises as boolean,",
				"          ExaminationDate as timestamp,",
				"          DateRptdToInsured as timestamp,",
				"          AssignedUserID as long,",
				"          ReportedByType as integer,",
				"          ID as long,",
				"          CatastropheID as long,",
				"          DeathDate as timestamp,",
				"          PreviousQueueID as long,",
				"          SafetyEquipProv as boolean,",
				"          TreatedPatientBfr as boolean,",
				"          HowReported as integer,",
				"          DateCompDcsnDue as timestamp,",
				"          InsuredPremises as boolean,",
				"          MainContactType as integer,",
				"          StorageBarCodeNum as string,",
				"          ClaimNumber as string,",
				"          DiagnosticCnsistnt as boolean,",
				"          DateCompDcsnMade as timestamp,",
				"          DateFormGivenToEmp as timestamp,",
				"          Flagged as integer,",
				"          SIULifeCycleState as integer,",
				"          ClaimWorkCompID as long,",
				"          LOBCode as integer,",
				"          FireDeptInfo as string,",
				"          PreexDisblty as boolean,",
				"          InjWkrInMPN as timestamp,",
				"          IncidentReport as boolean,",
				"          BenefitsStatusDcsn as boolean,",
				"          ArchivePartition as long,",
				"          ConcurrentEmp as integer,",
				"          CreateUserID as long,",
				"          ShowMedicalFirstInfo as integer,",
				"          ISOSendDate as timestamp,",
				"          EmploymentDataID as long,",
				"          ISOEnabled as boolean,",
				"          FirstNoticeSuit as boolean,",
				"          AssignmentStatus as integer,",
				"          Description as string,",
				"          CoverageInQuestion as boolean,",
				"          ReinsuranceFlaggedStatus as integer,",
				"          AccidentType as integer,",
				"          LoadCommandID as long,",
				"          WorkloadWeight as integer,",
				"          PoliceDeptInfo as string,",
				"          ClaimSource as integer,",
				"          DateRptdToAgent as timestamp,",
				"          ManifestationDate as timestamp,",
				"          Progress as integer,",
				"          PermissionRequired as integer,",
				"          State as integer,",
				"          EmpQusValidity as integer,",
				"          StorageBoxNum as string,",
				"          ClaimantRprtdDate as timestamp,",
				"          InsuredDenormID as long,",
				"          WeatherRelated as boolean,",
				"          PreviousGroupID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ccClaim",
				"source(output(",
				"          NOTE_ID as integer,",
				"          NOTE_KEY as string,",
				"          SOURCE as string,",
				"          CLAIM_ID as integer,",
				"          NOTE_UPDATETIME as timestamp,",
				"          NOTE_BODY as string,",
				"          NOTE_TOPIC as integer,",
				"          NOTE_AUTHORINGDATE as timestamp,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          AUTHORSTATENAME as string,",
				"          NOTE_SUBJECT as string,",
				"          CLAIM_NUMBER as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tgtCcDimNote",
				"ccNote, ccUser join(AuthorID == ccUser@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinccNoteAndccUser",
				"joinccNoteAndccUser, ccContact join(AuthorID == ccContact@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinccNoteAndccUserAndccContact",
				"joinccNoteAndccUserAndccContact, ccClaim join(ClaimID == ccClaim@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinccNoteAndccUserAndccContactAndccClaim",
				"joinccNoteAndccUserAndccContactAndccClaim derive(SRC_NOTE_KEY = concat('CC-',ccNote@PublicID),",
				"          SRC_SOURCE = 'CC',",
				"          SRC_ETL_ADD_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_ETL_LAST_UPDATE_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_ETL_ACTIVE_FLAG = 'Y') ~> srcClmnTransformations",
				"srcClmnTransformations derive(srcHashKey = md5(SRC_NOTE_KEY,SRC_SOURCE,toInteger(ClaimID),Body,toInteger(Topic),Subject,ClaimNumber,LastName)) ~> srcHashKey",
				"tgtCcDimNote derive(tgtHashKey = md5(NOTE_KEY,SOURCE,toInteger(CLAIM_ID),NOTE_BODY,toInteger(NOTE_TOPIC),NOTE_SUBJECT,CLAIM_NUMBER,AUTHORSTATENAME)) ~> tgtHashKey",
				"srcHashKey, tgtHashKey lookup(SRC_NOTE_KEY == NOTE_KEY,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 split(isNull(NOTE_KEY),",
				"     !isNull(NOTE_KEY)&&notEquals(srcHashKey,tgtHashKey),",
				"     disjoint: false) ~> update@(INSERT, UPDATE, NOUPDATE)",
				"update@UPDATE alterRow(updateIf(true())) ~> updateCondition",
				"update@INSERT sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          NOTE_ID as integer,",
				"          NOTE_KEY as string,",
				"          SOURCE as string,",
				"          CLAIM_ID as integer,",
				"          NOTE_UPDATETIME as timestamp,",
				"          NOTE_BODY as string,",
				"          NOTE_TOPIC as integer,",
				"          NOTE_AUTHORINGDATE as timestamp,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          AUTHORSTATENAME as string,",
				"          NOTE_SUBJECT as string,",
				"          CLAIM_NUMBER as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CLAIM_ID = ClaimID,",
				"          NOTE_UPDATETIME = update@INSERT@UpdateTime,",
				"          NOTE_BODY = Body,",
				"          NOTE_TOPIC = Topic,",
				"          NOTE_AUTHORINGDATE = AuthoringDate,",
				"          NOTE_SUBJECT = Subject,",
				"          CLAIM_NUMBER = ClaimNumber,",
				"          AUTHORSTATENAME = LastName,",
				"          NOTE_KEY = SRC_NOTE_KEY,",
				"          SOURCE = SRC_SOURCE,",
				"          ETL_ADD_DATETIMESTAMP = SRC_ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = SRC_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ETL_ACTIVE_FLAG = SRC_ETL_ACTIVE_FLAG",
				"     )) ~> ccDimNote",
				"updateCondition sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          NOTE_ID as integer,",
				"          NOTE_KEY as string,",
				"          SOURCE as string,",
				"          CLAIM_ID as integer,",
				"          NOTE_UPDATETIME as timestamp,",
				"          NOTE_BODY as string,",
				"          NOTE_TOPIC as integer,",
				"          NOTE_AUTHORINGDATE as timestamp,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          ETL_ACTIVE_FLAG as string,",
				"          AUTHORSTATENAME as string,",
				"          NOTE_SUBJECT as string,",
				"          CLAIM_NUMBER as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['NOTE_KEY'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          NOTE_KEY = SRC_NOTE_KEY,",
				"          SOURCE = SRC_SOURCE,",
				"          CLAIM_ID = ClaimID,",
				"          NOTE_UPDATETIME = update@UPDATE@UpdateTime,",
				"          NOTE_BODY = Body,",
				"          NOTE_TOPIC = Topic,",
				"          NOTE_AUTHORINGDATE = AuthoringDate,",
				"          ETL_ADD_DATETIMESTAMP = SRC_ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = SRC_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          ETL_ACTIVE_FLAG = SRC_ETL_ACTIVE_FLAG,",
				"          AUTHORSTATENAME = LastName,",
				"          NOTE_SUBJECT = Subject,",
				"          CLAIM_NUMBER = ClaimNumber",
				"     )) ~> updateCondtion"
			]
		}
	}
}