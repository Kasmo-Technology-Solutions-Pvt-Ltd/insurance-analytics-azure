{
	"name": "dimNamedInsured",
	"properties": {
		"folder": {
			"name": "Insurance Analytics Azure/pcDimDataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_PC_POLICYCONTACTROLE",
						"type": "DatasetReference"
					},
					"name": "PcPolContactRole"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_POLICYPERIOD",
						"type": "DatasetReference"
					},
					"name": "PcPolicyPeriod"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_POLICY",
						"type": "DatasetReference"
					},
					"name": "PcPolicy"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_JOB",
						"type": "DatasetReference"
					},
					"name": "PcJob"
				},
				{
					"dataset": {
						"referenceName": "DS_PCTL_POLICYPERIODSTATUS",
						"type": "DatasetReference"
					},
					"name": "PctlPeriodStatus"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_CONTACT",
						"type": "DatasetReference"
					},
					"name": "PcContact"
				},
				{
					"dataset": {
						"referenceName": "DS_PC_ADDRESS",
						"type": "DatasetReference"
					},
					"name": "PcAddress"
				},
				{
					"dataset": {
						"referenceName": "DS_PCTL_STATE",
						"type": "DatasetReference"
					},
					"name": "PctlState"
				},
				{
					"dataset": {
						"referenceName": "DS_PCTL_POLICYCONTACTROLE",
						"type": "DatasetReference"
					},
					"name": "PctlPolContactRole"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_NAMED_INSURED",
						"type": "DatasetReference"
					},
					"name": "tgtDimNamedInsured"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_DIM_NAMED_INSURED",
						"type": "DatasetReference"
					},
					"name": "insertedRows"
				},
				{
					"dataset": {
						"referenceName": "DS_DIM_NAMED_INSURED",
						"type": "DatasetReference"
					},
					"name": "updatedRows"
				}
			],
			"transformations": [
				{
					"name": "joinPcPolContactRoleAndPcPolicyPeriod"
				},
				{
					"name": "joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicy"
				},
				{
					"name": "joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJob"
				},
				{
					"name": "joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJobAndPctlPeriodStatus"
				},
				{
					"name": "joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJobAndPctlPeriodStatusAndPctlPolContactRole"
				},
				{
					"name": "joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJobAndPctlPeriodStatusAndPctlPolContactRoleAndPcContact"
				},
				{
					"name": "joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJobAndPctlPeriodStatusAndPctlPolContactRoleAndPcContactAndPcAddress"
				},
				{
					"name": "joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJobAndPctlPeriodStatusAndPctlPolContactRoleAndPcContactAndPcAddressAndPctlState"
				},
				{
					"name": "columnTransformations"
				},
				{
					"name": "filterColumns"
				},
				{
					"name": "tgtHashKey"
				},
				{
					"name": "srcHashKey"
				},
				{
					"name": "lookupKeyColumn"
				},
				{
					"name": "split1"
				},
				{
					"name": "updateCondition"
				}
			],
			"scriptLines": [
				"source(output(",
				"          LicenseNumberInternal as string,",
				"          ExcludedInternal as boolean,",
				"          CompanyNameKanjiInternalDenorm as string,",
				"          FixedID as long,",
				"          State as integer,",
				"          OwnershipPct as integer,",
				"          CommercialPropertyLine as long,",
				"          UpdateTime as timestamp,",
				"          DateOfBirthInternal as timestamp,",
				"          GeneralLiabilityLine as long,",
				"          LastNameInternalDenorm as string,",
				"          ID as long,",
				"          CreateUserID as long,",
				"          MaritalStatusInternal as integer,",
				"          PolicyLine as long,",
				"          BeanVersion as integer,",
				"          LicenseStateInternal as integer,",
				"          UpdateUserID as long,",
				"          FirstNameInternalDenorm as string,",
				"          QuickQuoteNumber as integer,",
				"          WorkersCompLine as long,",
				"          Relationship as string,",
				"          Included as integer,",
				"          BranchID as long,",
				"          ClassCodeID as long,",
				"          CompanyNameInternalDenorm as string,",
				"          DoNotOrderMVR as boolean,",
				"          ParticleInternal as string,",
				"          PublicID as string,",
				"          CompanyNameInternal as string,",
				"          ApplicableGoodDriverDiscount as boolean,",
				"          InlandMarineLine as long,",
				"          AccountContactRole as long,",
				"          CreateTime as timestamp,",
				"          CompanyNameKanjiInternal as string,",
				"          NumberOfViolations as integer,",
				"          LastNameKanjiInternalDenorm as string,",
				"          LastNameKanjiInternal as string,",
				"          BusinessOwnersLine as long,",
				"          EffectiveDate as timestamp,",
				"          ExpirationDate as timestamp,",
				"          ContactDenorm as long,",
				"          RelationshipTitleInternal as integer,",
				"          LastNameInternal as string,",
				"          BusinessAutoLine as long,",
				"          PersonalAutoLine as long,",
				"          NumberOfAccidents as integer,",
				"          SeqNumber as integer,",
				"          ArchivePartition as long,",
				"          ChangeType as integer,",
				"          BasedOnID as long,",
				"          FirstNameKanjiInternalDenorm as string,",
				"          FirstNameInternal as string,",
				"          FirstNameKanjiInternal as string,",
				"          Subtype as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcPolContactRole",
				"source(output(",
				"          BasedOnDate as timestamp,",
				"          ValidQuote as boolean,",
				"          TotalPremiumRPT as decimal(18,2),",
				"          TotalPremiumRPT_cur as integer,",
				"          MinimumPremium as long,",
				"          Locked as boolean,",
				"          EditEffectiveDate as timestamp,",
				"          ValidReinsurance as boolean,",
				"          SeriesCheckingPatternCode as string,",
				"          ArchiveState as integer,",
				"          ArchiveSchemaInfo as long,",
				"          PNIContactDenorm as long,",
				"          LocationAutoNumberSeq as long,",
				"          EditLocked as boolean,",
				"          UpdateTime as timestamp,",
				"          RateAsOfDate as timestamp,",
				"          JobID as long,",
				"          ID as long,",
				"          SingleCheckingPatternCode as string,",
				"          UWCompany as long,",
				"          BillingMethod as integer,",
				"          PeriodID as long,",
				"          TransactionPremiumRPT as decimal(18,2),",
				"          AssignedRisk as boolean,",
				"          ExcludeReason as string,",
				"          TransactionPremiumRPT_cur as integer,",
				"          CreateUserID as long,",
				"          ArchiveFailureID as long,",
				"          AllowGapsBefore as boolean,",
				"          QuoteHidden as boolean,",
				"          BeanVersion as integer,",
				"          FailedOOSEValidation as boolean,",
				"          Retired as long,",
				"          BranchName as string,",
				"          Preempted as boolean,",
				"          UpdateUserID as long,",
				"          FuturePeriods as boolean,",
				"          PrimaryInsuredNameDenorm as string,",
				"          CancellationDate as timestamp,",
				"          ModelNumber as integer,",
				"          TemporaryBranch as boolean,",
				"          PrimaryInsuredName as string,",
				"          Segment as integer,",
				"          TermNumber as integer,",
				"          DepositOverridePct as decimal(12,3),",
				"          PolicyTermID as long,",
				"          WaiveDepositChange as boolean,",
				"          PeriodStart as timestamp,",
				"          ProducerCodeOfRecordID as long,",
				"          DoNotPurge as boolean,",
				"          PublicID as string,",
				"          AltBillingAccountNumber as string,",
				"          TotalCostRPT as decimal(18,2),",
				"          WrittenDate as timestamp,",
				"          TotalCostRPT_cur as integer,",
				"          CreateTime as timestamp,",
				"          MostRecentModel as boolean,",
				"          PolicyID as long,",
				"          ExcludedFromArchive as boolean,",
				"          AllocationOfRemainder as integer,",
				"          OverrideBillingAllocation as boolean,",
				"          ArchiveFailureDetailsID as long,",
				"          ModelDate as timestamp,",
				"          InvoiceStreamCode as string,",
				"          ModelNumberIndex as string,",
				"          BaseState as integer,",
				"          MostRecentModelIndex as string,",
				"          ArchivePartition as long,",
				"          CustomBilling as boolean,",
				"          TransactionCostRPT as decimal(18,2),",
				"          BranchNumber as integer,",
				"          FailedOOSEEvaluation as boolean,",
				"          DepositCollected as decimal(18,2),",
				"          TransactionCostRPT_cur as integer,",
				"          DepositCollected_cur as integer,",
				"          BasedOnID as long,",
				"          LockingColumn as integer,",
				"          RefundCalcMethod as integer,",
				"          ArchiveDate as timestamp,",
				"          BillImmediatelyPercentage as decimal(4,1),",
				"          Status as integer,",
				"          DepositAmount as decimal(18,2),",
				"          DepositAmount_cur as integer,",
				"          PeriodEnd as timestamp,",
				"          PreferredCoverageCurrency as integer,",
				"          PolicyNumber as string,",
				"          PreferredSettlementCurrency as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcPolicyPeriod",
				"source(output(",
				"          DoNotPurge as boolean,",
				"          PublicID as string,",
				"          PriorPremiums as decimal(18,2),",
				"          IssueDate as timestamp,",
				"          PriorPremiums_cur as integer,",
				"          MovedPolicySourceAccountID as long,",
				"          AccountID as long,",
				"          CreateTime as timestamp,",
				"          LossHistoryType as integer,",
				"          ExcludedFromArchive as boolean,",
				"          ArchiveState as integer,",
				"          ArchiveSchemaInfo as long,",
				"          ArchiveFailureDetailsID as long,",
				"          PackageRisk as integer,",
				"          NumPriorLosses as integer,",
				"          UpdateTime as timestamp,",
				"          PrimaryLanguage as integer,",
				"          DoNotArchive as boolean,",
				"          ID as long,",
				"          PrimaryLocale as integer,",
				"          ProductCode as string,",
				"          ExcludeReason as string,",
				"          CreateUserID as long,",
				"          ArchiveFailureID as long,",
				"          OriginalEffectiveDate as timestamp,",
				"          BeanVersion as integer,",
				"          ArchivePartition as long,",
				"          Retired as long,",
				"          UpdateUserID as long,",
				"          PriorTotalIncurred as decimal(18,2),",
				"          ArchiveDate as timestamp,",
				"          PriorTotalIncurred_cur as integer,",
				"          ProducerCodeOfServiceID as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcPolicy",
				"source(output(",
				"          NotTakenNotifDate as timestamp,",
				"          ArchiveState as integer,",
				"          ArchiveSchemaInfo as long,",
				"          UpdateTime as timestamp,",
				"          NotificationDate as timestamp,",
				"          ID as long,",
				"          Source as integer,",
				"          ExcludeReason as string,",
				"          NextPurgeCheckDate as timestamp,",
				"          CreateUserID as long,",
				"          ArchiveFailureID as long,",
				"          RejectReason as integer,",
				"          CloseDate as timestamp,",
				"          BeanVersion as integer,",
				"          Retired as long,",
				"          CancelReasonCode as integer,",
				"          ChangePolicyNumber as boolean,",
				"          UpdateUserID as long,",
				"          PrimaryInsuredNameDenorm as string,",
				"          NonRenewalNotifDate as timestamp,",
				"          PrimaryInsuredName as string,",
				"          QuoteType as integer,",
				"          DateQuoteNeeded as timestamp,",
				"          PublicID as string,",
				"          SideBySide as boolean,",
				"          JobNumber as string,",
				"          RewriteType as integer,",
				"          CreateTime as timestamp,",
				"          AuditInformationID as long,",
				"          PolicyID as long,",
				"          ExcludedFromArchive as boolean,",
				"          RejectReasonText as string,",
				"          ArchiveFailureDetailsID as long,",
				"          RescindNotificationDate as timestamp,",
				"          PurgeStatus as integer,",
				"          InitialNotificationDate as timestamp,",
				"          LastNotifiedCancellationDate as timestamp,",
				"          JobGroup as long,",
				"          CancelProcessDate as timestamp,",
				"          RenewalCode as integer,",
				"          EscalateAfterHoldReleased as boolean,",
				"          ReinstateCode as integer,",
				"          RenewalNotifDate as timestamp,",
				"          PaymentReceived as decimal(18,2),",
				"          ArchivePartition as long,",
				"          PaymentReceived_cur as integer,",
				"          NotificationAckDate as timestamp,",
				"          ArchiveDate as timestamp,",
				"          BindOption as integer,",
				"          NonRenewalCode as integer,",
				"          Subtype as integer,",
				"          SubmissionDate as timestamp,",
				"          Description as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcJob",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PctlPeriodStatus",
				"source(output(",
				"          LoadCommandID as long,",
				"          Preferred as boolean,",
				"          VendorType as integer,",
				"          FaxPhoneCountry as integer,",
				"          Particle as string,",
				"          TaxID as string,",
				"          NameDenorm as string,",
				"          Name as string,",
				"          VendorNumber as string,",
				"          State as integer,",
				"          Prefix as integer,",
				"          Score as integer,",
				"          PreferredCurrency as integer,",
				"          LastNameKanji as string,",
				"          TaxFilingStatus as integer,",
				"          AccountHolderCount as integer,",
				"          Country as integer,",
				"          UpdateTime as timestamp,",
				"          AdjudicatorLicense as string,",
				"          ID as long,",
				"          WithholdingRate as decimal(4,1),",
				"          LastNameDenorm as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          CreateUserID as long,",
				"          ExternalID as string,",
				"          BeanVersion as integer,",
				"          VenueType as integer,",
				"          Retired as long,",
				"          ValidationLevel as integer,",
				"          PrimaryPhone as integer,",
				"          LastUpdateTime as timestamp,",
				"          ExternalVersion as integer,",
				"          UpdateUserID as long,",
				"          HomePhoneExtension as string,",
				"          FirstNameDenorm as string,",
				"          FirstName as string,",
				"          FirstNameKanji as string,",
				"          TemporaryLastUpdateTime as timestamp,",
				"          Gender as integer,",
				"          Notes as string,",
				"          NumDependentsU18 as integer,",
				"          PublicID as string,",
				"          HomePhoneCountry as integer,",
				"          CityKanjiDenorm as string,",
				"          CreateTime as timestamp,",
				"          LicenseNumber as string,",
				"          CellPhoneCountry as integer,",
				"          AutoSync as integer,",
				"          Occupation as string,",
				"          CellPhone as string,",
				"          PrimaryAddressID as long,",
				"          Suffix as integer,",
				"          AddressBookUID as string,",
				"          LoadRelatedContacts as boolean,",
				"          EmailAddress1 as string,",
				"          NumDependents as integer,",
				"          DateOfBirth as timestamp,",
				"          PrimaryLanguage as integer,",
				"          EmailAddress2 as string,",
				"          PrimaryLocale as integer,",
				"          TaxStatus as integer,",
				"          NumDependentsU25 as integer,",
				"          WorkPhoneExtension as string,",
				"          MaritalStatus as integer,",
				"          CityDenorm as string,",
				"          NameKanji as string,",
				"          FaxPhoneExtension as string,",
				"          HomePhone as string,",
				"          LicenseState as integer,",
				"          FaxPhone as string,",
				"          CellPhoneExtension as string,",
				"          PostalCodeDenorm as string,",
				"          EmployeeNumber as string,",
				"          WorkPhoneCountry as integer,",
				"          Subtype as integer,",
				"          PreferredSettlementCurrency as integer,",
				"          FormerName as string,",
				"          WorkPhone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcContact",
				"source(output(",
				"          LocationName as string,",
				"          LoadCommandID as long,",
				"          PublicID as string,",
				"          BatchGeocode as boolean,",
				"          Active as boolean,",
				"          CreateTime as timestamp,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          County as string,",
				"          AddressLine3 as string,",
				"          CityKanji as string,",
				"          AddressLine2Kanji as string,",
				"          PhoneExtension as string,",
				"          State as integer,",
				"          AddressBookUID as string,",
				"          UpdateTime as timestamp,",
				"          Country as integer,",
				"          ID as long,",
				"          EmployeeCount as integer,",
				"          LocationCode as string,",
				"          CreateUserID as long,",
				"          ValidUntil as timestamp,",
				"          PhoneCountry as integer,",
				"          BeanVersion as integer,",
				"          CityDenorm as string,",
				"          Retired as long,",
				"          City as string,",
				"          LastUpdateTime as timestamp,",
				"          Account as long,",
				"          Phone as string,",
				"          AddressType as integer,",
				"          AddressLine1Kanji as string,",
				"          UpdateUserID as long,",
				"          CEDEXBureau as string,",
				"          GeocodeStatus as integer,",
				"          LocationNum as integer,",
				"          CEDEX as boolean,",
				"          PostalCodeDenorm as string,",
				"          PostalCode as string,",
				"          Referenced as boolean,",
				"          Subtype as integer,",
				"          LinkedAddress as long,",
				"          Description as string,",
				"          TemporaryLastUpdateTime as timestamp,",
				"          NonSpecific as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PcAddress",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PctlState",
				"source(output(",
				"          L_en_US as string,",
				"          PRIORITY as integer,",
				"          TYPECODE as string,",
				"          S_en_US as integer,",
				"          RETIRED as boolean,",
				"          NAME as string,",
				"          ID as integer,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PctlPolContactRole",
				"source(output(",
				"          NAMED_INSURED_ID as integer,",
				"          NAMED_INSURED_KEY as string,",
				"          ETL_END_EFF_DTS as timestamp,",
				"          ETL_END_EXP_DTS as timestamp,",
				"          POLICY_KEY as string,",
				"          SOURCE as string,",
				"          MAILING_ADDRESS_1 as string,",
				"          MAILING_ADDRESS_2 as string,",
				"          MAILING_ADDRESS_3 as string,",
				"          MAILING_CITY as string,",
				"          MAILING_STATE_CODE as string,",
				"          MAILING_ZIP_CODE as string,",
				"          PRIM_INSURED_FL as string,",
				"          INSURED_NAME as string,",
				"          EMAILADDRESS2 as string,",
				"          EMAILADDRESS1 as string,",
				"          HOMEPHONE as string,",
				"          PRIMARYPHONE as integer,",
				"          CELLPHONE as string,",
				"          WORKPHONE as string,",
				"          ETL_ACTIVE_FL as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          NAMED_INSURED as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tgtDimNamedInsured",
				"PcPolContactRole, PcPolicyPeriod join(BranchID == PcPolicyPeriod@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> joinPcPolContactRoleAndPcPolicyPeriod",
				"joinPcPolContactRoleAndPcPolicyPeriod, PcPolicy join(PolicyID == PcPolicy@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicy",
				"joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicy, PcJob join(JobID == PcJob@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJob",
				"joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJob, PctlPeriodStatus join(Status == PctlPeriodStatus@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJobAndPctlPeriodStatus",
				"joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJobAndPctlPeriodStatus, PctlPolContactRole join(PcPolContactRole@Subtype == PctlPolContactRole@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJobAndPctlPeriodStatusAndPctlPolContactRole",
				"joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJobAndPctlPeriodStatusAndPctlPolContactRole, PcContact join(ContactDenorm == PcContact@ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJobAndPctlPeriodStatusAndPctlPolContactRoleAndPcContact",
				"joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJobAndPctlPeriodStatusAndPctlPolContactRoleAndPcContact, PcAddress join(PrimaryAddressID == PcAddress@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJobAndPctlPeriodStatusAndPctlPolContactRoleAndPcContactAndPcAddress",
				"joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJobAndPctlPeriodStatusAndPctlPolContactRoleAndPcContactAndPcAddress, PctlState join(PcContact@State == PctlState@ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJobAndPctlPeriodStatusAndPctlPolContactRoleAndPcContactAndPcAddressAndPctlState",
				"joinPcPolContactRoleAndPcPolicyPeriodAndPcPolicyAndPcJobAndPctlPeriodStatusAndPctlPolContactRoleAndPcContactAndPcAddressAndPctlState derive(SRC_ETL_ACTIVE_FLAG = 'Y',",
				"          SRC_ETL_ADD_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_ETL_LAST_UPDATE_DATETIMESTAMP = currentTimestamp(),",
				"          SRC_SOURCE = 'PC',",
				"          SRC_NAMED_INSURED_KEY = 'PC-'+toString(PeriodID)+'-'+toString(FixedID),",
				"          SRC_INSURED_NAME = case(isNull(PcContact@Name),case(isNull(FirstName),'', FirstName)+case(isNull(LastName),'',LastName),PcContact@Name),",
				"          SRC_MAILING_ADDRESS_1 = AddressLine1,",
				"          SRC_MAILING_ADDRESS_2 = AddressLine2,",
				"          SRC_MAILING_ADDRESS_3 = AddressLine3,",
				"          SRC_MAILING_STATE_CODE = PctlState@TYPECODE,",
				"          SRC_MAILING_ZIP_CODE = PostalCode,",
				"          SRC_EMAILADDRESS2 = EmailAddress2,",
				"          SRC_EMAILADDRESS1 = EmailAddress1,",
				"          SRC_HOMEPHONE = HomePhone,",
				"          SRC_PRIMARYPHONE = PrimaryPhone,",
				"          SRC_CELLPHONE = CellPhone,",
				"          SRC_WORKPHONE = WorkPhone,",
				"          SRC_MAILING_CITY = City) ~> columnTransformations",
				"columnTransformations filter((PctlPeriodStatus@TYPECODE=='Bound')&&(PctlPolContactRole@TYPECODE=='PolicyPriNamedInsured' ||\r",
				"PctlPolContactRole@TYPECODE=='PolicySecNamedInsured' ||\r",
				"PctlPolContactRole@TYPECODE=='PolicyNamedInsured' ||\r",
				"PctlPolContactRole@TYPECODE=='PolicyAddlNamedInsured' ||\r",
				"PctlPolContactRole@TYPECODE=='PolicyAddlInsured' ||\r",
				"PctlPolContactRole@TYPECODE=='PlcyNonPriNamedInsured'\r",
				")) ~> filterColumns",
				"tgtDimNamedInsured derive(tgtHashKey = sha1(NAMED_INSURED_KEY,SOURCE,MAILING_ADDRESS_1,MAILING_ADDRESS_2,MAILING_ADDRESS_3,MAILING_CITY,MAILING_STATE_CODE,MAILING_ZIP_CODE,INSURED_NAME,EMAILADDRESS2,EMAILADDRESS1,HOMEPHONE,PRIMARYPHONE,CELLPHONE,WORKPHONE)) ~> tgtHashKey",
				"filterColumns derive(srcHashKey = sha1(SRC_NAMED_INSURED_KEY,SRC_SOURCE,SRC_MAILING_ADDRESS_1,SRC_MAILING_ADDRESS_2,SRC_MAILING_ADDRESS_3,SRC_MAILING_CITY,SRC_MAILING_STATE_CODE,SRC_MAILING_ZIP_CODE,SRC_INSURED_NAME,SRC_EMAILADDRESS2,SRC_EMAILADDRESS1,SRC_HOMEPHONE,SRC_PRIMARYPHONE,SRC_CELLPHONE,SRC_WORKPHONE)) ~> srcHashKey",
				"srcHashKey, tgtHashKey lookup(SRC_NAMED_INSURED_KEY == NAMED_INSURED_KEY,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupKeyColumn",
				"lookupKeyColumn split(isNull(NAMED_INSURED_KEY),",
				"     !isNull(NAMED_INSURED_KEY)&&notEquals(srcHashKey, tgtHashKey),",
				"     disjoint: false) ~> split1@(insert, update, noupdate)",
				"split1@update alterRow(updateIf(true())) ~> updateCondition",
				"split1@insert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          NAMED_INSURED_ID as integer,",
				"          NAMED_INSURED_KEY as string,",
				"          ETL_END_EFF_DTS as timestamp,",
				"          ETL_END_EXP_DTS as timestamp,",
				"          POLICY_KEY as string,",
				"          SOURCE as string,",
				"          MAILING_ADDRESS_1 as string,",
				"          MAILING_ADDRESS_2 as string,",
				"          MAILING_ADDRESS_3 as string,",
				"          MAILING_CITY as string,",
				"          MAILING_STATE_CODE as string,",
				"          MAILING_ZIP_CODE as string,",
				"          PRIM_INSURED_FL as string,",
				"          INSURED_NAME as string,",
				"          EMAILADDRESS2 as string,",
				"          EMAILADDRESS1 as string,",
				"          HOMEPHONE as string,",
				"          PRIMARYPHONE as integer,",
				"          CELLPHONE as string,",
				"          WORKPHONE as string,",
				"          ETL_ACTIVE_FL as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          NAMED_INSURED as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          SOURCE = SRC_SOURCE,",
				"          MAILING_ADDRESS_1 = SRC_MAILING_ADDRESS_1,",
				"          MAILING_ADDRESS_2 = SRC_MAILING_ADDRESS_2,",
				"          MAILING_ADDRESS_3 = SRC_MAILING_ADDRESS_3,",
				"          MAILING_CITY = SRC_MAILING_CITY,",
				"          MAILING_STATE_CODE = SRC_MAILING_STATE_CODE,",
				"          MAILING_ZIP_CODE = SRC_MAILING_ZIP_CODE,",
				"          EMAILADDRESS1 = SRC_EMAILADDRESS1,",
				"          EMAILADDRESS2 = SRC_EMAILADDRESS2,",
				"          HOMEPHONE = SRC_HOMEPHONE,",
				"          PRIMARYPHONE = SRC_PRIMARYPHONE,",
				"          CELLPHONE = SRC_CELLPHONE,",
				"          WORKPHONE = SRC_WORKPHONE,",
				"          ETL_ACTIVE_FL = SRC_ETL_ACTIVE_FLAG,",
				"          ETL_ADD_DATETIMESTAMP = SRC_ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = SRC_ETL_LAST_UPDATE_DATETIMESTAMP,",
				"          NAMED_INSURED_KEY = SRC_NAMED_INSURED_KEY,",
				"          INSURED_NAME = SRC_INSURED_NAME",
				"     )) ~> insertedRows",
				"updateCondition sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          NAMED_INSURED_ID as integer,",
				"          NAMED_INSURED_KEY as string,",
				"          ETL_END_EFF_DTS as timestamp,",
				"          ETL_END_EXP_DTS as timestamp,",
				"          POLICY_KEY as string,",
				"          SOURCE as string,",
				"          MAILING_ADDRESS_1 as string,",
				"          MAILING_ADDRESS_2 as string,",
				"          MAILING_ADDRESS_3 as string,",
				"          MAILING_CITY as string,",
				"          MAILING_STATE_CODE as string,",
				"          MAILING_ZIP_CODE as string,",
				"          PRIM_INSURED_FL as string,",
				"          INSURED_NAME as string,",
				"          EMAILADDRESS2 as string,",
				"          EMAILADDRESS1 as string,",
				"          HOMEPHONE as string,",
				"          PRIMARYPHONE as integer,",
				"          CELLPHONE as string,",
				"          WORKPHONE as string,",
				"          ETL_ACTIVE_FL as string,",
				"          ETL_ADD_DATETIMESTAMP as timestamp,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP as timestamp,",
				"          NAMED_INSURED as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['NAMED_INSURED_KEY'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          NAMED_INSURED_KEY = SRC_NAMED_INSURED_KEY,",
				"          SOURCE = SRC_SOURCE,",
				"          MAILING_ADDRESS_1 = SRC_MAILING_ADDRESS_1,",
				"          MAILING_ADDRESS_2 = SRC_MAILING_ADDRESS_2,",
				"          MAILING_ADDRESS_3 = SRC_MAILING_ADDRESS_3,",
				"          MAILING_CITY = SRC_MAILING_CITY,",
				"          MAILING_STATE_CODE = SRC_MAILING_STATE_CODE,",
				"          MAILING_ZIP_CODE = SRC_MAILING_ZIP_CODE,",
				"          INSURED_NAME = SRC_INSURED_NAME,",
				"          EMAILADDRESS2 = SRC_EMAILADDRESS2,",
				"          EMAILADDRESS1 = SRC_EMAILADDRESS1,",
				"          HOMEPHONE = SRC_HOMEPHONE,",
				"          PRIMARYPHONE = SRC_PRIMARYPHONE,",
				"          CELLPHONE = SRC_CELLPHONE,",
				"          WORKPHONE = SRC_WORKPHONE,",
				"          ETL_ACTIVE_FL = SRC_ETL_ACTIVE_FLAG,",
				"          ETL_ADD_DATETIMESTAMP = SRC_ETL_ADD_DATETIMESTAMP,",
				"          ETL_LAST_UPDATE_DATETIMESTAMP = SRC_ETL_LAST_UPDATE_DATETIMESTAMP",
				"     )) ~> updatedRows"
			]
		}
	}
}